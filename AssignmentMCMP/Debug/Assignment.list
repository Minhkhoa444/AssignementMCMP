
Assignment.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000421c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000011c  08004328  08004328  00014328  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004444  08004444  000200e4  2**0
                  CONTENTS
  4 .ARM          00000000  08004444  08004444  000200e4  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004444  08004444  000200e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004444  08004444  00014444  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004448  08004448  00014448  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000e4  20000000  0800444c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001d8  200000e4  08004530  000200e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002bc  08004530  000202bc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012abe  00000000  00000000  0002010d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000273a  00000000  00000000  00032bcb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d48  00000000  00000000  00035308  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c40  00000000  00000000  00036050  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019803  00000000  00000000  00036c90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f848  00000000  00000000  00050493  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008c23a  00000000  00000000  0005fcdb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000ebf15  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003d60  00000000  00000000  000ebf68  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200000e4 	.word	0x200000e4
 8000128:	00000000 	.word	0x00000000
 800012c:	08004310 	.word	0x08004310

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200000e8 	.word	0x200000e8
 8000148:	08004310 	.word	0x08004310

0800014c <isButtonPressed>:
int TimerForKeyPress = 2000;

int button_ports[4] = {A0_GPIO_Port, A1_GPIO_Port, A2_GPIO_Port, A3_GPIO_Port};
int button_pins[4] = {A0_Pin,A1_Pin, A2_Pin, A3_Pin};

int isButtonPressed(int key){
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
	if(button_flag[key] == 1){
 8000154:	4a09      	ldr	r2, [pc, #36]	; (800017c <isButtonPressed+0x30>)
 8000156:	687b      	ldr	r3, [r7, #4]
 8000158:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800015c:	2b01      	cmp	r3, #1
 800015e:	d106      	bne.n	800016e <isButtonPressed+0x22>
		button_flag[key] = 0;
 8000160:	4a06      	ldr	r2, [pc, #24]	; (800017c <isButtonPressed+0x30>)
 8000162:	687b      	ldr	r3, [r7, #4]
 8000164:	2100      	movs	r1, #0
 8000166:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		return 1;
 800016a:	2301      	movs	r3, #1
 800016c:	e000      	b.n	8000170 <isButtonPressed+0x24>
	}
	return 0;
 800016e:	2300      	movs	r3, #0
}
 8000170:	4618      	mov	r0, r3
 8000172:	370c      	adds	r7, #12
 8000174:	46bd      	mov	sp, r7
 8000176:	bc80      	pop	{r7}
 8000178:	4770      	bx	lr
 800017a:	bf00      	nop
 800017c:	20000100 	.word	0x20000100

08000180 <subKeyProcess>:
void subKeyProcess(int key){
 8000180:	b480      	push	{r7}
 8000182:	b083      	sub	sp, #12
 8000184:	af00      	add	r7, sp, #0
 8000186:	6078      	str	r0, [r7, #4]
	button_flag[key] = 1;
 8000188:	4a04      	ldr	r2, [pc, #16]	; (800019c <subKeyProcess+0x1c>)
 800018a:	687b      	ldr	r3, [r7, #4]
 800018c:	2101      	movs	r1, #1
 800018e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 8000192:	bf00      	nop
 8000194:	370c      	adds	r7, #12
 8000196:	46bd      	mov	sp, r7
 8000198:	bc80      	pop	{r7}
 800019a:	4770      	bx	lr
 800019c:	20000100 	.word	0x20000100

080001a0 <getKeyInput>:
void getKeyInput(int key){
 80001a0:	b580      	push	{r7, lr}
 80001a2:	b082      	sub	sp, #8
 80001a4:	af00      	add	r7, sp, #0
 80001a6:	6078      	str	r0, [r7, #4]
	KeyReg[key][0] = KeyReg[key][1];
 80001a8:	4a42      	ldr	r2, [pc, #264]	; (80002b4 <getKeyInput+0x114>)
 80001aa:	687b      	ldr	r3, [r7, #4]
 80001ac:	011b      	lsls	r3, r3, #4
 80001ae:	4413      	add	r3, r2
 80001b0:	3304      	adds	r3, #4
 80001b2:	681a      	ldr	r2, [r3, #0]
 80001b4:	493f      	ldr	r1, [pc, #252]	; (80002b4 <getKeyInput+0x114>)
 80001b6:	687b      	ldr	r3, [r7, #4]
 80001b8:	011b      	lsls	r3, r3, #4
 80001ba:	440b      	add	r3, r1
 80001bc:	601a      	str	r2, [r3, #0]
	KeyReg[key][1] = KeyReg[key][2];
 80001be:	4a3d      	ldr	r2, [pc, #244]	; (80002b4 <getKeyInput+0x114>)
 80001c0:	687b      	ldr	r3, [r7, #4]
 80001c2:	011b      	lsls	r3, r3, #4
 80001c4:	4413      	add	r3, r2
 80001c6:	3308      	adds	r3, #8
 80001c8:	681a      	ldr	r2, [r3, #0]
 80001ca:	493a      	ldr	r1, [pc, #232]	; (80002b4 <getKeyInput+0x114>)
 80001cc:	687b      	ldr	r3, [r7, #4]
 80001ce:	011b      	lsls	r3, r3, #4
 80001d0:	440b      	add	r3, r1
 80001d2:	3304      	adds	r3, #4
 80001d4:	601a      	str	r2, [r3, #0]
	KeyReg[key][2] = HAL_GPIO_ReadPin(button_ports[key],button_pins[key]);
 80001d6:	4a38      	ldr	r2, [pc, #224]	; (80002b8 <getKeyInput+0x118>)
 80001d8:	687b      	ldr	r3, [r7, #4]
 80001da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80001de:	4618      	mov	r0, r3
 80001e0:	4a36      	ldr	r2, [pc, #216]	; (80002bc <getKeyInput+0x11c>)
 80001e2:	687b      	ldr	r3, [r7, #4]
 80001e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80001e8:	b29b      	uxth	r3, r3
 80001ea:	4619      	mov	r1, r3
 80001ec:	f001 fc20 	bl	8001a30 <HAL_GPIO_ReadPin>
 80001f0:	4603      	mov	r3, r0
 80001f2:	4619      	mov	r1, r3
 80001f4:	4a2f      	ldr	r2, [pc, #188]	; (80002b4 <getKeyInput+0x114>)
 80001f6:	687b      	ldr	r3, [r7, #4]
 80001f8:	011b      	lsls	r3, r3, #4
 80001fa:	4413      	add	r3, r2
 80001fc:	3308      	adds	r3, #8
 80001fe:	6019      	str	r1, [r3, #0]
	if((KeyReg[key][0] == KeyReg[key][1]) && (KeyReg[key][1] == KeyReg[key][2])){
 8000200:	4a2c      	ldr	r2, [pc, #176]	; (80002b4 <getKeyInput+0x114>)
 8000202:	687b      	ldr	r3, [r7, #4]
 8000204:	011b      	lsls	r3, r3, #4
 8000206:	4413      	add	r3, r2
 8000208:	681a      	ldr	r2, [r3, #0]
 800020a:	492a      	ldr	r1, [pc, #168]	; (80002b4 <getKeyInput+0x114>)
 800020c:	687b      	ldr	r3, [r7, #4]
 800020e:	011b      	lsls	r3, r3, #4
 8000210:	440b      	add	r3, r1
 8000212:	3304      	adds	r3, #4
 8000214:	681b      	ldr	r3, [r3, #0]
 8000216:	429a      	cmp	r2, r3
 8000218:	d147      	bne.n	80002aa <getKeyInput+0x10a>
 800021a:	4a26      	ldr	r2, [pc, #152]	; (80002b4 <getKeyInput+0x114>)
 800021c:	687b      	ldr	r3, [r7, #4]
 800021e:	011b      	lsls	r3, r3, #4
 8000220:	4413      	add	r3, r2
 8000222:	3304      	adds	r3, #4
 8000224:	681a      	ldr	r2, [r3, #0]
 8000226:	4923      	ldr	r1, [pc, #140]	; (80002b4 <getKeyInput+0x114>)
 8000228:	687b      	ldr	r3, [r7, #4]
 800022a:	011b      	lsls	r3, r3, #4
 800022c:	440b      	add	r3, r1
 800022e:	3308      	adds	r3, #8
 8000230:	681b      	ldr	r3, [r3, #0]
 8000232:	429a      	cmp	r2, r3
 8000234:	d139      	bne.n	80002aa <getKeyInput+0x10a>
		if(KeyReg[key][3] != KeyReg[key][2]){
 8000236:	4a1f      	ldr	r2, [pc, #124]	; (80002b4 <getKeyInput+0x114>)
 8000238:	687b      	ldr	r3, [r7, #4]
 800023a:	011b      	lsls	r3, r3, #4
 800023c:	4413      	add	r3, r2
 800023e:	330c      	adds	r3, #12
 8000240:	681a      	ldr	r2, [r3, #0]
 8000242:	491c      	ldr	r1, [pc, #112]	; (80002b4 <getKeyInput+0x114>)
 8000244:	687b      	ldr	r3, [r7, #4]
 8000246:	011b      	lsls	r3, r3, #4
 8000248:	440b      	add	r3, r1
 800024a:	3308      	adds	r3, #8
 800024c:	681b      	ldr	r3, [r3, #0]
 800024e:	429a      	cmp	r2, r3
 8000250:	d01b      	beq.n	800028a <getKeyInput+0xea>
			KeyReg[key][3] = KeyReg[key][2];
 8000252:	4a18      	ldr	r2, [pc, #96]	; (80002b4 <getKeyInput+0x114>)
 8000254:	687b      	ldr	r3, [r7, #4]
 8000256:	011b      	lsls	r3, r3, #4
 8000258:	4413      	add	r3, r2
 800025a:	3308      	adds	r3, #8
 800025c:	681a      	ldr	r2, [r3, #0]
 800025e:	4915      	ldr	r1, [pc, #84]	; (80002b4 <getKeyInput+0x114>)
 8000260:	687b      	ldr	r3, [r7, #4]
 8000262:	011b      	lsls	r3, r3, #4
 8000264:	440b      	add	r3, r1
 8000266:	330c      	adds	r3, #12
 8000268:	601a      	str	r2, [r3, #0]
			if(KeyReg[key][2] == PRESSED_STATE){
 800026a:	4a12      	ldr	r2, [pc, #72]	; (80002b4 <getKeyInput+0x114>)
 800026c:	687b      	ldr	r3, [r7, #4]
 800026e:	011b      	lsls	r3, r3, #4
 8000270:	4413      	add	r3, r2
 8000272:	3308      	adds	r3, #8
 8000274:	681b      	ldr	r3, [r3, #0]
 8000276:	2b00      	cmp	r3, #0
 8000278:	d117      	bne.n	80002aa <getKeyInput+0x10a>
				subKeyProcess(key);
 800027a:	6878      	ldr	r0, [r7, #4]
 800027c:	f7ff ff80 	bl	8000180 <subKeyProcess>
				TimerForKeyPress = 2000;
 8000280:	4b0f      	ldr	r3, [pc, #60]	; (80002c0 <getKeyInput+0x120>)
 8000282:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8000286:	601a      	str	r2, [r3, #0]
			if(TimerForKeyPress == 0){
				KeyReg[key][3] = NORMAL_STATE;
			}
		}
	}
}
 8000288:	e00f      	b.n	80002aa <getKeyInput+0x10a>
			TimerForKeyPress--;
 800028a:	4b0d      	ldr	r3, [pc, #52]	; (80002c0 <getKeyInput+0x120>)
 800028c:	681b      	ldr	r3, [r3, #0]
 800028e:	3b01      	subs	r3, #1
 8000290:	4a0b      	ldr	r2, [pc, #44]	; (80002c0 <getKeyInput+0x120>)
 8000292:	6013      	str	r3, [r2, #0]
			if(TimerForKeyPress == 0){
 8000294:	4b0a      	ldr	r3, [pc, #40]	; (80002c0 <getKeyInput+0x120>)
 8000296:	681b      	ldr	r3, [r3, #0]
 8000298:	2b00      	cmp	r3, #0
 800029a:	d106      	bne.n	80002aa <getKeyInput+0x10a>
				KeyReg[key][3] = NORMAL_STATE;
 800029c:	4a05      	ldr	r2, [pc, #20]	; (80002b4 <getKeyInput+0x114>)
 800029e:	687b      	ldr	r3, [r7, #4]
 80002a0:	011b      	lsls	r3, r3, #4
 80002a2:	4413      	add	r3, r2
 80002a4:	330c      	adds	r3, #12
 80002a6:	2201      	movs	r2, #1
 80002a8:	601a      	str	r2, [r3, #0]
}
 80002aa:	bf00      	nop
 80002ac:	3708      	adds	r7, #8
 80002ae:	46bd      	mov	sp, r7
 80002b0:	bd80      	pop	{r7, pc}
 80002b2:	bf00      	nop
 80002b4:	20000000 	.word	0x20000000
 80002b8:	20000044 	.word	0x20000044
 80002bc:	20000054 	.word	0x20000054
 80002c0:	20000040 	.word	0x20000040

080002c4 <fsm_automatic_run>:
int green_duration = 3;
int yellow_duration = 2;
int index_led = 0;
int pedeson=0;

void fsm_automatic_run(){
 80002c4:	b580      	push	{r7, lr}
 80002c6:	b084      	sub	sp, #16
 80002c8:	af00      	add	r7, sp, #0
	switch(status) {
 80002ca:	4bbc      	ldr	r3, [pc, #752]	; (80005bc <fsm_automatic_run+0x2f8>)
 80002cc:	681b      	ldr	r3, [r3, #0]
 80002ce:	3b01      	subs	r3, #1
 80002d0:	2b04      	cmp	r3, #4
 80002d2:	f200 81e6 	bhi.w	80006a2 <fsm_automatic_run+0x3de>
 80002d6:	a201      	add	r2, pc, #4	; (adr r2, 80002dc <fsm_automatic_run+0x18>)
 80002d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80002dc:	080002f1 	.word	0x080002f1
 80002e0:	08000313 	.word	0x08000313
 80002e4:	0800041b 	.word	0x0800041b
 80002e8:	080004eb 	.word	0x080004eb
 80002ec:	080005d5 	.word	0x080005d5
		case INIT:
			status = RED_GREEN;
 80002f0:	4bb2      	ldr	r3, [pc, #712]	; (80005bc <fsm_automatic_run+0x2f8>)
 80002f2:	2202      	movs	r2, #2
 80002f4:	601a      	str	r2, [r3, #0]
			setTimer(green_duration*100, 0);
 80002f6:	4bb2      	ldr	r3, [pc, #712]	; (80005c0 <fsm_automatic_run+0x2fc>)
 80002f8:	681b      	ldr	r3, [r3, #0]
 80002fa:	2264      	movs	r2, #100	; 0x64
 80002fc:	fb02 f303 	mul.w	r3, r2, r3
 8000300:	2100      	movs	r1, #0
 8000302:	4618      	mov	r0, r3
 8000304:	f000 fe7a 	bl	8000ffc <setTimer>
			setTimer(100, 1);
 8000308:	2101      	movs	r1, #1
 800030a:	2064      	movs	r0, #100	; 0x64
 800030c:	f000 fe76 	bl	8000ffc <setTimer>
			break;
 8000310:	e1d0      	b.n	80006b4 <fsm_automatic_run+0x3f0>
		case RED_GREEN:
			setHorizontalLeds(SET,RESET,RESET);	//D4-5 horizontal
 8000312:	2200      	movs	r2, #0
 8000314:	2100      	movs	r1, #0
 8000316:	2001      	movs	r0, #1
 8000318:	f000 fbae 	bl	8000a78 <setHorizontalLeds>
			setVerticalLeds(RESET,SET, RESET);
 800031c:	2200      	movs	r2, #0
 800031e:	2101      	movs	r1, #1
 8000320:	2000      	movs	r0, #0
 8000322:	f000 fbef 	bl	8000b04 <setVerticalLeds>
			if(timer_flag[9]==1){
 8000326:	4ba7      	ldr	r3, [pc, #668]	; (80005c4 <fsm_automatic_run+0x300>)
 8000328:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800032a:	2b01      	cmp	r3, #1
 800032c:	d107      	bne.n	800033e <fsm_automatic_run+0x7a>
				pedeson=0;
 800032e:	4ba6      	ldr	r3, [pc, #664]	; (80005c8 <fsm_automatic_run+0x304>)
 8000330:	2200      	movs	r2, #0
 8000332:	601a      	str	r2, [r3, #0]
				setPedesLeds(RESET, RESET, RESET);
 8000334:	2200      	movs	r2, #0
 8000336:	2100      	movs	r1, #0
 8000338:	2000      	movs	r0, #0
 800033a:	f000 fc2f 	bl	8000b9c <setPedesLeds>
			}
			if(pedeson==1){
 800033e:	4ba2      	ldr	r3, [pc, #648]	; (80005c8 <fsm_automatic_run+0x304>)
 8000340:	681b      	ldr	r3, [r3, #0]
 8000342:	2b01      	cmp	r3, #1
 8000344:	d104      	bne.n	8000350 <fsm_automatic_run+0x8c>
				setPedesLeds(RESET, SET, RESET);
 8000346:	2200      	movs	r2, #0
 8000348:	2101      	movs	r1, #1
 800034a:	2000      	movs	r0, #0
 800034c:	f000 fc26 	bl	8000b9c <setPedesLeds>
			}
			if(timer_flag[0] == 1){
 8000350:	4b9c      	ldr	r3, [pc, #624]	; (80005c4 <fsm_automatic_run+0x300>)
 8000352:	681b      	ldr	r3, [r3, #0]
 8000354:	2b01      	cmp	r3, #1
 8000356:	d11a      	bne.n	800038e <fsm_automatic_run+0xca>
				setPedesLeds(RESET,RESET,RESET);
 8000358:	2200      	movs	r2, #0
 800035a:	2100      	movs	r1, #0
 800035c:	2000      	movs	r0, #0
 800035e:	f000 fc1d 	bl	8000b9c <setPedesLeds>
				setTimer(yellow_duration*100, 0);
 8000362:	4b9a      	ldr	r3, [pc, #616]	; (80005cc <fsm_automatic_run+0x308>)
 8000364:	681b      	ldr	r3, [r3, #0]
 8000366:	2264      	movs	r2, #100	; 0x64
 8000368:	fb02 f303 	mul.w	r3, r2, r3
 800036c:	2100      	movs	r1, #0
 800036e:	4618      	mov	r0, r3
 8000370:	f000 fe44 	bl	8000ffc <setTimer>
				setHorizontalLeds(RESET,RESET,RESET); //D4-5 horizontal
 8000374:	2200      	movs	r2, #0
 8000376:	2100      	movs	r1, #0
 8000378:	2000      	movs	r0, #0
 800037a:	f000 fb7d 	bl	8000a78 <setHorizontalLeds>
				setVerticalLeds(RESET,RESET, RESET);
 800037e:	2200      	movs	r2, #0
 8000380:	2100      	movs	r1, #0
 8000382:	2000      	movs	r0, #0
 8000384:	f000 fbbe 	bl	8000b04 <setVerticalLeds>
				status = RED_YELLOW;
 8000388:	4b8c      	ldr	r3, [pc, #560]	; (80005bc <fsm_automatic_run+0x2f8>)
 800038a:	2203      	movs	r2, #3
 800038c:	601a      	str	r2, [r3, #0]
			}
			if(timer_flag[1] == 1){
 800038e:	4b8d      	ldr	r3, [pc, #564]	; (80005c4 <fsm_automatic_run+0x300>)
 8000390:	685b      	ldr	r3, [r3, #4]
 8000392:	2b01      	cmp	r3, #1
 8000394:	d105      	bne.n	80003a2 <fsm_automatic_run+0xde>
				countDown();
 8000396:	f000 fb4d 	bl	8000a34 <countDown>
				setTimer(100, 1);
 800039a:	2101      	movs	r1, #1
 800039c:	2064      	movs	r0, #100	; 0x64
 800039e:	f000 fe2d 	bl	8000ffc <setTimer>
			}
			if(isButtonPressed(1) == 1){
 80003a2:	2001      	movs	r0, #1
 80003a4:	f7ff fed2 	bl	800014c <isButtonPressed>
 80003a8:	4603      	mov	r3, r0
 80003aa:	2b01      	cmp	r3, #1
 80003ac:	d115      	bne.n	80003da <fsm_automatic_run+0x116>
				setHorizontalLeds(RESET,RESET,RESET);
 80003ae:	2200      	movs	r2, #0
 80003b0:	2100      	movs	r1, #0
 80003b2:	2000      	movs	r0, #0
 80003b4:	f000 fb60 	bl	8000a78 <setHorizontalLeds>
				setVerticalLeds(RESET,RESET, RESET);
 80003b8:	2200      	movs	r2, #0
 80003ba:	2100      	movs	r1, #0
 80003bc:	2000      	movs	r0, #0
 80003be:	f000 fba1 	bl	8000b04 <setVerticalLeds>
				setPedesLeds(RESET,RESET,RESET);
 80003c2:	2200      	movs	r2, #0
 80003c4:	2100      	movs	r1, #0
 80003c6:	2000      	movs	r0, #0
 80003c8:	f000 fbe8 	bl	8000b9c <setPedesLeds>
				setTimer(100, 3);
 80003cc:	2103      	movs	r1, #3
 80003ce:	2064      	movs	r0, #100	; 0x64
 80003d0:	f000 fe14 	bl	8000ffc <setTimer>
				status = MAN_RED;
 80003d4:	4b79      	ldr	r3, [pc, #484]	; (80005bc <fsm_automatic_run+0x2f8>)
 80003d6:	220b      	movs	r2, #11
 80003d8:	601a      	str	r2, [r3, #0]
			}
			if(isButtonPressed(0) == 1){
 80003da:	2000      	movs	r0, #0
 80003dc:	f7ff feb6 	bl	800014c <isButtonPressed>
 80003e0:	4603      	mov	r3, r0
 80003e2:	2b01      	cmp	r3, #1
 80003e4:	f040 815f 	bne.w	80006a6 <fsm_automatic_run+0x3e2>
				setPedesLeds(RESET,SET,RESET);
 80003e8:	2200      	movs	r2, #0
 80003ea:	2101      	movs	r1, #1
 80003ec:	2000      	movs	r0, #0
 80003ee:	f000 fbd5 	bl	8000b9c <setPedesLeds>
				pedeson=1;
 80003f2:	4b75      	ldr	r3, [pc, #468]	; (80005c8 <fsm_automatic_run+0x304>)
 80003f4:	2201      	movs	r2, #1
 80003f6:	601a      	str	r2, [r3, #0]
				int pedesduration = (red_duration+green_duration+yellow_duration)*100;
 80003f8:	4b75      	ldr	r3, [pc, #468]	; (80005d0 <fsm_automatic_run+0x30c>)
 80003fa:	681a      	ldr	r2, [r3, #0]
 80003fc:	4b70      	ldr	r3, [pc, #448]	; (80005c0 <fsm_automatic_run+0x2fc>)
 80003fe:	681b      	ldr	r3, [r3, #0]
 8000400:	441a      	add	r2, r3
 8000402:	4b72      	ldr	r3, [pc, #456]	; (80005cc <fsm_automatic_run+0x308>)
 8000404:	681b      	ldr	r3, [r3, #0]
 8000406:	4413      	add	r3, r2
 8000408:	2264      	movs	r2, #100	; 0x64
 800040a:	fb02 f303 	mul.w	r3, r2, r3
 800040e:	603b      	str	r3, [r7, #0]
				setTimer(pedesduration,9);
 8000410:	2109      	movs	r1, #9
 8000412:	6838      	ldr	r0, [r7, #0]
 8000414:	f000 fdf2 	bl	8000ffc <setTimer>
			}
			break;
 8000418:	e145      	b.n	80006a6 <fsm_automatic_run+0x3e2>
		case RED_YELLOW:
			setHorizontalLeds(SET,RESET,RESET);
 800041a:	2200      	movs	r2, #0
 800041c:	2100      	movs	r1, #0
 800041e:	2001      	movs	r0, #1
 8000420:	f000 fb2a 	bl	8000a78 <setHorizontalLeds>
			setVerticalLeds(RESET,RESET, SET);
 8000424:	2201      	movs	r2, #1
 8000426:	2100      	movs	r1, #0
 8000428:	2000      	movs	r0, #0
 800042a:	f000 fb6b 	bl	8000b04 <setVerticalLeds>
			if(timer_flag[9]==1){
 800042e:	4b65      	ldr	r3, [pc, #404]	; (80005c4 <fsm_automatic_run+0x300>)
 8000430:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000432:	2b01      	cmp	r3, #1
 8000434:	d107      	bne.n	8000446 <fsm_automatic_run+0x182>
				pedeson=0;
 8000436:	4b64      	ldr	r3, [pc, #400]	; (80005c8 <fsm_automatic_run+0x304>)
 8000438:	2200      	movs	r2, #0
 800043a:	601a      	str	r2, [r3, #0]
				setPedesLeds(RESET, RESET, RESET);
 800043c:	2200      	movs	r2, #0
 800043e:	2100      	movs	r1, #0
 8000440:	2000      	movs	r0, #0
 8000442:	f000 fbab 	bl	8000b9c <setPedesLeds>
			}
			if(pedeson==1){
 8000446:	4b60      	ldr	r3, [pc, #384]	; (80005c8 <fsm_automatic_run+0x304>)
 8000448:	681b      	ldr	r3, [r3, #0]
 800044a:	2b01      	cmp	r3, #1
 800044c:	d104      	bne.n	8000458 <fsm_automatic_run+0x194>
				setPedesLeds(RESET, SET, RESET);
 800044e:	2200      	movs	r2, #0
 8000450:	2101      	movs	r1, #1
 8000452:	2000      	movs	r0, #0
 8000454:	f000 fba2 	bl	8000b9c <setPedesLeds>
			}
			if(timer_flag[0] == 1){
 8000458:	4b5a      	ldr	r3, [pc, #360]	; (80005c4 <fsm_automatic_run+0x300>)
 800045a:	681b      	ldr	r3, [r3, #0]
 800045c:	2b01      	cmp	r3, #1
 800045e:	d11a      	bne.n	8000496 <fsm_automatic_run+0x1d2>
				setPedesLeds(RESET,RESET,RESET);
 8000460:	2200      	movs	r2, #0
 8000462:	2100      	movs	r1, #0
 8000464:	2000      	movs	r0, #0
 8000466:	f000 fb99 	bl	8000b9c <setPedesLeds>
				setTimer(green_duration*100, 0);
 800046a:	4b55      	ldr	r3, [pc, #340]	; (80005c0 <fsm_automatic_run+0x2fc>)
 800046c:	681b      	ldr	r3, [r3, #0]
 800046e:	2264      	movs	r2, #100	; 0x64
 8000470:	fb02 f303 	mul.w	r3, r2, r3
 8000474:	2100      	movs	r1, #0
 8000476:	4618      	mov	r0, r3
 8000478:	f000 fdc0 	bl	8000ffc <setTimer>
				status = GREEN_RED;
 800047c:	4b4f      	ldr	r3, [pc, #316]	; (80005bc <fsm_automatic_run+0x2f8>)
 800047e:	2204      	movs	r2, #4
 8000480:	601a      	str	r2, [r3, #0]
				setHorizontalLeds(RESET,RESET,RESET); //D4-5 horizontal
 8000482:	2200      	movs	r2, #0
 8000484:	2100      	movs	r1, #0
 8000486:	2000      	movs	r0, #0
 8000488:	f000 faf6 	bl	8000a78 <setHorizontalLeds>
				setVerticalLeds(RESET,RESET, RESET);
 800048c:	2200      	movs	r2, #0
 800048e:	2100      	movs	r1, #0
 8000490:	2000      	movs	r0, #0
 8000492:	f000 fb37 	bl	8000b04 <setVerticalLeds>
			}
			if(timer_flag[1] == 1){
 8000496:	4b4b      	ldr	r3, [pc, #300]	; (80005c4 <fsm_automatic_run+0x300>)
 8000498:	685b      	ldr	r3, [r3, #4]
 800049a:	2b01      	cmp	r3, #1
 800049c:	d105      	bne.n	80004aa <fsm_automatic_run+0x1e6>
				countDown();
 800049e:	f000 fac9 	bl	8000a34 <countDown>
				setTimer(100, 1);
 80004a2:	2101      	movs	r1, #1
 80004a4:	2064      	movs	r0, #100	; 0x64
 80004a6:	f000 fda9 	bl	8000ffc <setTimer>
			}
			if(isButtonPressed(0) == 1){
 80004aa:	2000      	movs	r0, #0
 80004ac:	f7ff fe4e 	bl	800014c <isButtonPressed>
 80004b0:	4603      	mov	r3, r0
 80004b2:	2b01      	cmp	r3, #1
 80004b4:	f040 80f9 	bne.w	80006aa <fsm_automatic_run+0x3e6>
				setPedesLeds(RESET,SET,RESET);
 80004b8:	2200      	movs	r2, #0
 80004ba:	2101      	movs	r1, #1
 80004bc:	2000      	movs	r0, #0
 80004be:	f000 fb6d 	bl	8000b9c <setPedesLeds>
				pedeson=1;
 80004c2:	4b41      	ldr	r3, [pc, #260]	; (80005c8 <fsm_automatic_run+0x304>)
 80004c4:	2201      	movs	r2, #1
 80004c6:	601a      	str	r2, [r3, #0]
				int pedesduration = (red_duration+green_duration+yellow_duration)*100;
 80004c8:	4b41      	ldr	r3, [pc, #260]	; (80005d0 <fsm_automatic_run+0x30c>)
 80004ca:	681a      	ldr	r2, [r3, #0]
 80004cc:	4b3c      	ldr	r3, [pc, #240]	; (80005c0 <fsm_automatic_run+0x2fc>)
 80004ce:	681b      	ldr	r3, [r3, #0]
 80004d0:	441a      	add	r2, r3
 80004d2:	4b3e      	ldr	r3, [pc, #248]	; (80005cc <fsm_automatic_run+0x308>)
 80004d4:	681b      	ldr	r3, [r3, #0]
 80004d6:	4413      	add	r3, r2
 80004d8:	2264      	movs	r2, #100	; 0x64
 80004da:	fb02 f303 	mul.w	r3, r2, r3
 80004de:	607b      	str	r3, [r7, #4]
				setTimer(pedesduration,9);
 80004e0:	2109      	movs	r1, #9
 80004e2:	6878      	ldr	r0, [r7, #4]
 80004e4:	f000 fd8a 	bl	8000ffc <setTimer>
			}
			break;
 80004e8:	e0df      	b.n	80006aa <fsm_automatic_run+0x3e6>
		case GREEN_RED:
			setHorizontalLeds(RESET,SET,RESET);
 80004ea:	2200      	movs	r2, #0
 80004ec:	2101      	movs	r1, #1
 80004ee:	2000      	movs	r0, #0
 80004f0:	f000 fac2 	bl	8000a78 <setHorizontalLeds>
			setVerticalLeds(SET,RESET,RESET);
 80004f4:	2200      	movs	r2, #0
 80004f6:	2100      	movs	r1, #0
 80004f8:	2001      	movs	r0, #1
 80004fa:	f000 fb03 	bl	8000b04 <setVerticalLeds>
			if(timer_flag[9]==1){
 80004fe:	4b31      	ldr	r3, [pc, #196]	; (80005c4 <fsm_automatic_run+0x300>)
 8000500:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000502:	2b01      	cmp	r3, #1
 8000504:	d107      	bne.n	8000516 <fsm_automatic_run+0x252>
				pedeson=0;
 8000506:	4b30      	ldr	r3, [pc, #192]	; (80005c8 <fsm_automatic_run+0x304>)
 8000508:	2200      	movs	r2, #0
 800050a:	601a      	str	r2, [r3, #0]
				setPedesLeds(RESET, RESET, RESET);
 800050c:	2200      	movs	r2, #0
 800050e:	2100      	movs	r1, #0
 8000510:	2000      	movs	r0, #0
 8000512:	f000 fb43 	bl	8000b9c <setPedesLeds>
			}
			if(pedeson==1){
 8000516:	4b2c      	ldr	r3, [pc, #176]	; (80005c8 <fsm_automatic_run+0x304>)
 8000518:	681b      	ldr	r3, [r3, #0]
 800051a:	2b01      	cmp	r3, #1
 800051c:	d104      	bne.n	8000528 <fsm_automatic_run+0x264>
				setPedesLeds(SET, RESET, RESET);
 800051e:	2200      	movs	r2, #0
 8000520:	2100      	movs	r1, #0
 8000522:	2001      	movs	r0, #1
 8000524:	f000 fb3a 	bl	8000b9c <setPedesLeds>
			}
			if(timer_flag[0] == 1){
 8000528:	4b26      	ldr	r3, [pc, #152]	; (80005c4 <fsm_automatic_run+0x300>)
 800052a:	681b      	ldr	r3, [r3, #0]
 800052c:	2b01      	cmp	r3, #1
 800052e:	d11a      	bne.n	8000566 <fsm_automatic_run+0x2a2>
				setPedesLeds(RESET,RESET,RESET);
 8000530:	2200      	movs	r2, #0
 8000532:	2100      	movs	r1, #0
 8000534:	2000      	movs	r0, #0
 8000536:	f000 fb31 	bl	8000b9c <setPedesLeds>
				setTimer(yellow_duration*100, 0);
 800053a:	4b24      	ldr	r3, [pc, #144]	; (80005cc <fsm_automatic_run+0x308>)
 800053c:	681b      	ldr	r3, [r3, #0]
 800053e:	2264      	movs	r2, #100	; 0x64
 8000540:	fb02 f303 	mul.w	r3, r2, r3
 8000544:	2100      	movs	r1, #0
 8000546:	4618      	mov	r0, r3
 8000548:	f000 fd58 	bl	8000ffc <setTimer>
				status = YELLOW_RED;
 800054c:	4b1b      	ldr	r3, [pc, #108]	; (80005bc <fsm_automatic_run+0x2f8>)
 800054e:	2205      	movs	r2, #5
 8000550:	601a      	str	r2, [r3, #0]
				setHorizontalLeds(RESET,RESET,RESET); //D4-5 horizontal
 8000552:	2200      	movs	r2, #0
 8000554:	2100      	movs	r1, #0
 8000556:	2000      	movs	r0, #0
 8000558:	f000 fa8e 	bl	8000a78 <setHorizontalLeds>
				setVerticalLeds(RESET,RESET, RESET);
 800055c:	2200      	movs	r2, #0
 800055e:	2100      	movs	r1, #0
 8000560:	2000      	movs	r0, #0
 8000562:	f000 facf 	bl	8000b04 <setVerticalLeds>
			}
			if(timer_flag[1] == 1){
 8000566:	4b17      	ldr	r3, [pc, #92]	; (80005c4 <fsm_automatic_run+0x300>)
 8000568:	685b      	ldr	r3, [r3, #4]
 800056a:	2b01      	cmp	r3, #1
 800056c:	d105      	bne.n	800057a <fsm_automatic_run+0x2b6>
				countDown();
 800056e:	f000 fa61 	bl	8000a34 <countDown>
				setTimer(100, 1);
 8000572:	2101      	movs	r1, #1
 8000574:	2064      	movs	r0, #100	; 0x64
 8000576:	f000 fd41 	bl	8000ffc <setTimer>
			}
			if(isButtonPressed(0) == 1){
 800057a:	2000      	movs	r0, #0
 800057c:	f7ff fde6 	bl	800014c <isButtonPressed>
 8000580:	4603      	mov	r3, r0
 8000582:	2b01      	cmp	r3, #1
 8000584:	f040 8093 	bne.w	80006ae <fsm_automatic_run+0x3ea>
				setPedesLeds(SET,RESET,RESET);
 8000588:	2200      	movs	r2, #0
 800058a:	2100      	movs	r1, #0
 800058c:	2001      	movs	r0, #1
 800058e:	f000 fb05 	bl	8000b9c <setPedesLeds>
				pedeson=1;
 8000592:	4b0d      	ldr	r3, [pc, #52]	; (80005c8 <fsm_automatic_run+0x304>)
 8000594:	2201      	movs	r2, #1
 8000596:	601a      	str	r2, [r3, #0]
				int pedesduration = (red_duration+green_duration+yellow_duration)*100;
 8000598:	4b0d      	ldr	r3, [pc, #52]	; (80005d0 <fsm_automatic_run+0x30c>)
 800059a:	681a      	ldr	r2, [r3, #0]
 800059c:	4b08      	ldr	r3, [pc, #32]	; (80005c0 <fsm_automatic_run+0x2fc>)
 800059e:	681b      	ldr	r3, [r3, #0]
 80005a0:	441a      	add	r2, r3
 80005a2:	4b0a      	ldr	r3, [pc, #40]	; (80005cc <fsm_automatic_run+0x308>)
 80005a4:	681b      	ldr	r3, [r3, #0]
 80005a6:	4413      	add	r3, r2
 80005a8:	2264      	movs	r2, #100	; 0x64
 80005aa:	fb02 f303 	mul.w	r3, r2, r3
 80005ae:	60bb      	str	r3, [r7, #8]
				setTimer(pedesduration,9);
 80005b0:	2109      	movs	r1, #9
 80005b2:	68b8      	ldr	r0, [r7, #8]
 80005b4:	f000 fd22 	bl	8000ffc <setTimer>
			}
			break;
 80005b8:	e079      	b.n	80006ae <fsm_automatic_run+0x3ea>
 80005ba:	bf00      	nop
 80005bc:	20000114 	.word	0x20000114
 80005c0:	20000068 	.word	0x20000068
 80005c4:	20000148 	.word	0x20000148
 80005c8:	20000110 	.word	0x20000110
 80005cc:	2000006c 	.word	0x2000006c
 80005d0:	20000064 	.word	0x20000064
		case YELLOW_RED:
			setHorizontalLeds(RESET,RESET,SET);
 80005d4:	2201      	movs	r2, #1
 80005d6:	2100      	movs	r1, #0
 80005d8:	2000      	movs	r0, #0
 80005da:	f000 fa4d 	bl	8000a78 <setHorizontalLeds>
			setVerticalLeds(SET,RESET,RESET);
 80005de:	2200      	movs	r2, #0
 80005e0:	2100      	movs	r1, #0
 80005e2:	2001      	movs	r0, #1
 80005e4:	f000 fa8e 	bl	8000b04 <setVerticalLeds>
			if(timer_flag[9]==1){
 80005e8:	4b34      	ldr	r3, [pc, #208]	; (80006bc <fsm_automatic_run+0x3f8>)
 80005ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80005ec:	2b01      	cmp	r3, #1
 80005ee:	d107      	bne.n	8000600 <fsm_automatic_run+0x33c>
				pedeson=0;
 80005f0:	4b33      	ldr	r3, [pc, #204]	; (80006c0 <fsm_automatic_run+0x3fc>)
 80005f2:	2200      	movs	r2, #0
 80005f4:	601a      	str	r2, [r3, #0]
				setPedesLeds(RESET, RESET, RESET);
 80005f6:	2200      	movs	r2, #0
 80005f8:	2100      	movs	r1, #0
 80005fa:	2000      	movs	r0, #0
 80005fc:	f000 face 	bl	8000b9c <setPedesLeds>
			}
			if(pedeson==1){
 8000600:	4b2f      	ldr	r3, [pc, #188]	; (80006c0 <fsm_automatic_run+0x3fc>)
 8000602:	681b      	ldr	r3, [r3, #0]
 8000604:	2b01      	cmp	r3, #1
 8000606:	d104      	bne.n	8000612 <fsm_automatic_run+0x34e>
				setPedesLeds(SET, RESET, RESET);
 8000608:	2200      	movs	r2, #0
 800060a:	2100      	movs	r1, #0
 800060c:	2001      	movs	r0, #1
 800060e:	f000 fac5 	bl	8000b9c <setPedesLeds>
			}
			if(timer_flag[0] == 1){
 8000612:	4b2a      	ldr	r3, [pc, #168]	; (80006bc <fsm_automatic_run+0x3f8>)
 8000614:	681b      	ldr	r3, [r3, #0]
 8000616:	2b01      	cmp	r3, #1
 8000618:	d11a      	bne.n	8000650 <fsm_automatic_run+0x38c>
				setPedesLeds(RESET,RESET,RESET);
 800061a:	2200      	movs	r2, #0
 800061c:	2100      	movs	r1, #0
 800061e:	2000      	movs	r0, #0
 8000620:	f000 fabc 	bl	8000b9c <setPedesLeds>
				setTimer(green_duration*100, 0);
 8000624:	4b27      	ldr	r3, [pc, #156]	; (80006c4 <fsm_automatic_run+0x400>)
 8000626:	681b      	ldr	r3, [r3, #0]
 8000628:	2264      	movs	r2, #100	; 0x64
 800062a:	fb02 f303 	mul.w	r3, r2, r3
 800062e:	2100      	movs	r1, #0
 8000630:	4618      	mov	r0, r3
 8000632:	f000 fce3 	bl	8000ffc <setTimer>
				status = RED_GREEN;
 8000636:	4b24      	ldr	r3, [pc, #144]	; (80006c8 <fsm_automatic_run+0x404>)
 8000638:	2202      	movs	r2, #2
 800063a:	601a      	str	r2, [r3, #0]
				setHorizontalLeds(RESET,RESET,RESET); //D4-5 horizontal
 800063c:	2200      	movs	r2, #0
 800063e:	2100      	movs	r1, #0
 8000640:	2000      	movs	r0, #0
 8000642:	f000 fa19 	bl	8000a78 <setHorizontalLeds>
				setVerticalLeds(RESET,RESET, RESET);
 8000646:	2200      	movs	r2, #0
 8000648:	2100      	movs	r1, #0
 800064a:	2000      	movs	r0, #0
 800064c:	f000 fa5a 	bl	8000b04 <setVerticalLeds>
			}
			if(timer_flag[1] == 1){
 8000650:	4b1a      	ldr	r3, [pc, #104]	; (80006bc <fsm_automatic_run+0x3f8>)
 8000652:	685b      	ldr	r3, [r3, #4]
 8000654:	2b01      	cmp	r3, #1
 8000656:	d105      	bne.n	8000664 <fsm_automatic_run+0x3a0>
				countDown();
 8000658:	f000 f9ec 	bl	8000a34 <countDown>
				setTimer(100, 1);
 800065c:	2101      	movs	r1, #1
 800065e:	2064      	movs	r0, #100	; 0x64
 8000660:	f000 fccc 	bl	8000ffc <setTimer>
			}
			if(isButtonPressed(0) == 1){
 8000664:	2000      	movs	r0, #0
 8000666:	f7ff fd71 	bl	800014c <isButtonPressed>
 800066a:	4603      	mov	r3, r0
 800066c:	2b01      	cmp	r3, #1
 800066e:	d120      	bne.n	80006b2 <fsm_automatic_run+0x3ee>
				setPedesLeds(SET,RESET,RESET);
 8000670:	2200      	movs	r2, #0
 8000672:	2100      	movs	r1, #0
 8000674:	2001      	movs	r0, #1
 8000676:	f000 fa91 	bl	8000b9c <setPedesLeds>
				pedeson=1;
 800067a:	4b11      	ldr	r3, [pc, #68]	; (80006c0 <fsm_automatic_run+0x3fc>)
 800067c:	2201      	movs	r2, #1
 800067e:	601a      	str	r2, [r3, #0]
				int pedesduration = (red_duration+green_duration+yellow_duration)*100;
 8000680:	4b12      	ldr	r3, [pc, #72]	; (80006cc <fsm_automatic_run+0x408>)
 8000682:	681a      	ldr	r2, [r3, #0]
 8000684:	4b0f      	ldr	r3, [pc, #60]	; (80006c4 <fsm_automatic_run+0x400>)
 8000686:	681b      	ldr	r3, [r3, #0]
 8000688:	441a      	add	r2, r3
 800068a:	4b11      	ldr	r3, [pc, #68]	; (80006d0 <fsm_automatic_run+0x40c>)
 800068c:	681b      	ldr	r3, [r3, #0]
 800068e:	4413      	add	r3, r2
 8000690:	2264      	movs	r2, #100	; 0x64
 8000692:	fb02 f303 	mul.w	r3, r2, r3
 8000696:	60fb      	str	r3, [r7, #12]
				setTimer(pedesduration,9);
 8000698:	2109      	movs	r1, #9
 800069a:	68f8      	ldr	r0, [r7, #12]
 800069c:	f000 fcae 	bl	8000ffc <setTimer>
			}
			break;
 80006a0:	e007      	b.n	80006b2 <fsm_automatic_run+0x3ee>
		default:
			break;
 80006a2:	bf00      	nop
 80006a4:	e006      	b.n	80006b4 <fsm_automatic_run+0x3f0>
			break;
 80006a6:	bf00      	nop
 80006a8:	e004      	b.n	80006b4 <fsm_automatic_run+0x3f0>
			break;
 80006aa:	bf00      	nop
 80006ac:	e002      	b.n	80006b4 <fsm_automatic_run+0x3f0>
			break;
 80006ae:	bf00      	nop
 80006b0:	e000      	b.n	80006b4 <fsm_automatic_run+0x3f0>
			break;
 80006b2:	bf00      	nop
	}
};
 80006b4:	bf00      	nop
 80006b6:	3710      	adds	r7, #16
 80006b8:	46bd      	mov	sp, r7
 80006ba:	bd80      	pop	{r7, pc}
 80006bc:	20000148 	.word	0x20000148
 80006c0:	20000110 	.word	0x20000110
 80006c4:	20000068 	.word	0x20000068
 80006c8:	20000114 	.word	0x20000114
 80006cc:	20000064 	.word	0x20000064
 80006d0:	2000006c 	.word	0x2000006c

080006d4 <initializeDurationClones>:

int red_duration_clone;
int yellow_duration_clone;
int green_duration_clone;
int toggle = 1;
void initializeDurationClones(){
 80006d4:	b480      	push	{r7}
 80006d6:	af00      	add	r7, sp, #0
    red_duration_clone = red_duration;
 80006d8:	4b07      	ldr	r3, [pc, #28]	; (80006f8 <initializeDurationClones+0x24>)
 80006da:	681b      	ldr	r3, [r3, #0]
 80006dc:	4a07      	ldr	r2, [pc, #28]	; (80006fc <initializeDurationClones+0x28>)
 80006de:	6013      	str	r3, [r2, #0]
    yellow_duration_clone = yellow_duration;
 80006e0:	4b07      	ldr	r3, [pc, #28]	; (8000700 <initializeDurationClones+0x2c>)
 80006e2:	681b      	ldr	r3, [r3, #0]
 80006e4:	4a07      	ldr	r2, [pc, #28]	; (8000704 <initializeDurationClones+0x30>)
 80006e6:	6013      	str	r3, [r2, #0]
    green_duration_clone = green_duration;
 80006e8:	4b07      	ldr	r3, [pc, #28]	; (8000708 <initializeDurationClones+0x34>)
 80006ea:	681b      	ldr	r3, [r3, #0]
 80006ec:	4a07      	ldr	r2, [pc, #28]	; (800070c <initializeDurationClones+0x38>)
 80006ee:	6013      	str	r3, [r2, #0]
}
 80006f0:	bf00      	nop
 80006f2:	46bd      	mov	sp, r7
 80006f4:	bc80      	pop	{r7}
 80006f6:	4770      	bx	lr
 80006f8:	20000064 	.word	0x20000064
 80006fc:	2000017c 	.word	0x2000017c
 8000700:	2000006c 	.word	0x2000006c
 8000704:	20000184 	.word	0x20000184
 8000708:	20000068 	.word	0x20000068
 800070c:	20000180 	.word	0x20000180

08000710 <fsm_manual_run>:
void fsm_manual_run(){
 8000710:	b580      	push	{r7, lr}
 8000712:	af00      	add	r7, sp, #0

	switch (status) {
 8000714:	4bb4      	ldr	r3, [pc, #720]	; (80009e8 <fsm_manual_run+0x2d8>)
 8000716:	681b      	ldr	r3, [r3, #0]
 8000718:	2b0d      	cmp	r3, #13
 800071a:	f000 80f1 	beq.w	8000900 <fsm_manual_run+0x1f0>
 800071e:	2b0d      	cmp	r3, #13
 8000720:	f300 8157 	bgt.w	80009d2 <fsm_manual_run+0x2c2>
 8000724:	2b0b      	cmp	r3, #11
 8000726:	d002      	beq.n	800072e <fsm_manual_run+0x1e>
 8000728:	2b0c      	cmp	r3, #12
 800072a:	d075      	beq.n	8000818 <fsm_manual_run+0x108>
 800072c:	e151      	b.n	80009d2 <fsm_manual_run+0x2c2>
		case MAN_RED:
			if(timer_flag[3] == 1){
 800072e:	4baf      	ldr	r3, [pc, #700]	; (80009ec <fsm_manual_run+0x2dc>)
 8000730:	68db      	ldr	r3, [r3, #12]
 8000732:	2b01      	cmp	r3, #1
 8000734:	d123      	bne.n	800077e <fsm_manual_run+0x6e>
				if(toggle){
 8000736:	4bae      	ldr	r3, [pc, #696]	; (80009f0 <fsm_manual_run+0x2e0>)
 8000738:	681b      	ldr	r3, [r3, #0]
 800073a:	2b00      	cmp	r3, #0
 800073c:	d00a      	beq.n	8000754 <fsm_manual_run+0x44>
					setHorizontalLeds(SET,RESET,RESET);
 800073e:	2200      	movs	r2, #0
 8000740:	2100      	movs	r1, #0
 8000742:	2001      	movs	r0, #1
 8000744:	f000 f998 	bl	8000a78 <setHorizontalLeds>
					setVerticalLeds(SET,RESET,RESET);
 8000748:	2200      	movs	r2, #0
 800074a:	2100      	movs	r1, #0
 800074c:	2001      	movs	r0, #1
 800074e:	f000 f9d9 	bl	8000b04 <setVerticalLeds>
 8000752:	e009      	b.n	8000768 <fsm_manual_run+0x58>
				}else {
					setHorizontalLeds(RESET,RESET,RESET);
 8000754:	2200      	movs	r2, #0
 8000756:	2100      	movs	r1, #0
 8000758:	2000      	movs	r0, #0
 800075a:	f000 f98d 	bl	8000a78 <setHorizontalLeds>
					setVerticalLeds(RESET,RESET,RESET);
 800075e:	2200      	movs	r2, #0
 8000760:	2100      	movs	r1, #0
 8000762:	2000      	movs	r0, #0
 8000764:	f000 f9ce 	bl	8000b04 <setVerticalLeds>
				}
				toggle = 1 - toggle;
 8000768:	4ba1      	ldr	r3, [pc, #644]	; (80009f0 <fsm_manual_run+0x2e0>)
 800076a:	681b      	ldr	r3, [r3, #0]
 800076c:	f1c3 0301 	rsb	r3, r3, #1
 8000770:	4a9f      	ldr	r2, [pc, #636]	; (80009f0 <fsm_manual_run+0x2e0>)
 8000772:	6013      	str	r3, [r2, #0]
				setTimer(1000, 3);
 8000774:	2103      	movs	r1, #3
 8000776:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800077a:	f000 fc3f 	bl	8000ffc <setTimer>
			}
			if(isButtonPressed(1) == 1){
 800077e:	2001      	movs	r0, #1
 8000780:	f7ff fce4 	bl	800014c <isButtonPressed>
 8000784:	4603      	mov	r3, r0
 8000786:	2b01      	cmp	r3, #1
 8000788:	d117      	bne.n	80007ba <fsm_manual_run+0xaa>
				setHorizontalLeds(RESET,RESET,RESET);
 800078a:	2200      	movs	r2, #0
 800078c:	2100      	movs	r1, #0
 800078e:	2000      	movs	r0, #0
 8000790:	f000 f972 	bl	8000a78 <setHorizontalLeds>
				setVerticalLeds(RESET,RESET,RESET);
 8000794:	2200      	movs	r2, #0
 8000796:	2100      	movs	r1, #0
 8000798:	2000      	movs	r0, #0
 800079a:	f000 f9b3 	bl	8000b04 <setVerticalLeds>
				setTimer(1000, 3);
 800079e:	2103      	movs	r1, #3
 80007a0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80007a4:	f000 fc2a 	bl	8000ffc <setTimer>
				status = MAN_YELLOW;
 80007a8:	4b8f      	ldr	r3, [pc, #572]	; (80009e8 <fsm_manual_run+0x2d8>)
 80007aa:	220c      	movs	r2, #12
 80007ac:	601a      	str	r2, [r3, #0]
				printf("Current time: %d\r\n", yellow_duration_clone);
 80007ae:	4b91      	ldr	r3, [pc, #580]	; (80009f4 <fsm_manual_run+0x2e4>)
 80007b0:	681b      	ldr	r3, [r3, #0]
 80007b2:	4619      	mov	r1, r3
 80007b4:	4890      	ldr	r0, [pc, #576]	; (80009f8 <fsm_manual_run+0x2e8>)
 80007b6:	f002 fe4b 	bl	8003450 <iprintf>
			}
			if(isButtonPressed(2) == 1){
 80007ba:	2002      	movs	r0, #2
 80007bc:	f7ff fcc6 	bl	800014c <isButtonPressed>
 80007c0:	4603      	mov	r3, r0
 80007c2:	2b01      	cmp	r3, #1
 80007c4:	d112      	bne.n	80007ec <fsm_manual_run+0xdc>
				red_duration_clone++;
 80007c6:	4b8d      	ldr	r3, [pc, #564]	; (80009fc <fsm_manual_run+0x2ec>)
 80007c8:	681b      	ldr	r3, [r3, #0]
 80007ca:	3301      	adds	r3, #1
 80007cc:	4a8b      	ldr	r2, [pc, #556]	; (80009fc <fsm_manual_run+0x2ec>)
 80007ce:	6013      	str	r3, [r2, #0]
				if(red_duration_clone >= 99) red_duration_clone = red_duration;
 80007d0:	4b8a      	ldr	r3, [pc, #552]	; (80009fc <fsm_manual_run+0x2ec>)
 80007d2:	681b      	ldr	r3, [r3, #0]
 80007d4:	2b62      	cmp	r3, #98	; 0x62
 80007d6:	dd03      	ble.n	80007e0 <fsm_manual_run+0xd0>
 80007d8:	4b89      	ldr	r3, [pc, #548]	; (8000a00 <fsm_manual_run+0x2f0>)
 80007da:	681b      	ldr	r3, [r3, #0]
 80007dc:	4a87      	ldr	r2, [pc, #540]	; (80009fc <fsm_manual_run+0x2ec>)
 80007de:	6013      	str	r3, [r2, #0]
				printf("Current time: %d\r\n", red_duration_clone);
 80007e0:	4b86      	ldr	r3, [pc, #536]	; (80009fc <fsm_manual_run+0x2ec>)
 80007e2:	681b      	ldr	r3, [r3, #0]
 80007e4:	4619      	mov	r1, r3
 80007e6:	4884      	ldr	r0, [pc, #528]	; (80009f8 <fsm_manual_run+0x2e8>)
 80007e8:	f002 fe32 	bl	8003450 <iprintf>
			}
			if(isButtonPressed(3) == 1){
 80007ec:	2003      	movs	r0, #3
 80007ee:	f7ff fcad 	bl	800014c <isButtonPressed>
 80007f2:	4603      	mov	r3, r0
 80007f4:	2b01      	cmp	r3, #1
 80007f6:	f040 80ef 	bne.w	80009d8 <fsm_manual_run+0x2c8>
				red_duration =  red_duration_clone;
 80007fa:	4b80      	ldr	r3, [pc, #512]	; (80009fc <fsm_manual_run+0x2ec>)
 80007fc:	681b      	ldr	r3, [r3, #0]
 80007fe:	4a80      	ldr	r2, [pc, #512]	; (8000a00 <fsm_manual_run+0x2f0>)
 8000800:	6013      	str	r3, [r2, #0]
				green_duration = red_duration - yellow_duration;
 8000802:	4b7f      	ldr	r3, [pc, #508]	; (8000a00 <fsm_manual_run+0x2f0>)
 8000804:	681a      	ldr	r2, [r3, #0]
 8000806:	4b7f      	ldr	r3, [pc, #508]	; (8000a04 <fsm_manual_run+0x2f4>)
 8000808:	681b      	ldr	r3, [r3, #0]
 800080a:	1ad3      	subs	r3, r2, r3
 800080c:	4a7e      	ldr	r2, [pc, #504]	; (8000a08 <fsm_manual_run+0x2f8>)
 800080e:	6013      	str	r3, [r2, #0]
				status = INIT;
 8000810:	4b75      	ldr	r3, [pc, #468]	; (80009e8 <fsm_manual_run+0x2d8>)
 8000812:	2201      	movs	r2, #1
 8000814:	601a      	str	r2, [r3, #0]
			}
			break;
 8000816:	e0df      	b.n	80009d8 <fsm_manual_run+0x2c8>
		case MAN_YELLOW:
			if(timer_flag[3] == 1){
 8000818:	4b74      	ldr	r3, [pc, #464]	; (80009ec <fsm_manual_run+0x2dc>)
 800081a:	68db      	ldr	r3, [r3, #12]
 800081c:	2b01      	cmp	r3, #1
 800081e:	d123      	bne.n	8000868 <fsm_manual_run+0x158>
				if(toggle){
 8000820:	4b73      	ldr	r3, [pc, #460]	; (80009f0 <fsm_manual_run+0x2e0>)
 8000822:	681b      	ldr	r3, [r3, #0]
 8000824:	2b00      	cmp	r3, #0
 8000826:	d00a      	beq.n	800083e <fsm_manual_run+0x12e>
					setHorizontalLeds(RESET,RESET,SET);
 8000828:	2201      	movs	r2, #1
 800082a:	2100      	movs	r1, #0
 800082c:	2000      	movs	r0, #0
 800082e:	f000 f923 	bl	8000a78 <setHorizontalLeds>
					setVerticalLeds(RESET,RESET,SET);
 8000832:	2201      	movs	r2, #1
 8000834:	2100      	movs	r1, #0
 8000836:	2000      	movs	r0, #0
 8000838:	f000 f964 	bl	8000b04 <setVerticalLeds>
 800083c:	e009      	b.n	8000852 <fsm_manual_run+0x142>
				}else {
					setHorizontalLeds(RESET,RESET,RESET);
 800083e:	2200      	movs	r2, #0
 8000840:	2100      	movs	r1, #0
 8000842:	2000      	movs	r0, #0
 8000844:	f000 f918 	bl	8000a78 <setHorizontalLeds>
					setVerticalLeds(RESET,RESET,RESET);
 8000848:	2200      	movs	r2, #0
 800084a:	2100      	movs	r1, #0
 800084c:	2000      	movs	r0, #0
 800084e:	f000 f959 	bl	8000b04 <setVerticalLeds>
				}
				toggle = 1 - toggle;
 8000852:	4b67      	ldr	r3, [pc, #412]	; (80009f0 <fsm_manual_run+0x2e0>)
 8000854:	681b      	ldr	r3, [r3, #0]
 8000856:	f1c3 0301 	rsb	r3, r3, #1
 800085a:	4a65      	ldr	r2, [pc, #404]	; (80009f0 <fsm_manual_run+0x2e0>)
 800085c:	6013      	str	r3, [r2, #0]
				setTimer(1000, 3);
 800085e:	2103      	movs	r1, #3
 8000860:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000864:	f000 fbca 	bl	8000ffc <setTimer>
			}
			if(isButtonPressed(1) == 1){
 8000868:	2001      	movs	r0, #1
 800086a:	f7ff fc6f 	bl	800014c <isButtonPressed>
 800086e:	4603      	mov	r3, r0
 8000870:	2b01      	cmp	r3, #1
 8000872:	d117      	bne.n	80008a4 <fsm_manual_run+0x194>
				setHorizontalLeds(RESET,RESET,RESET);
 8000874:	2200      	movs	r2, #0
 8000876:	2100      	movs	r1, #0
 8000878:	2000      	movs	r0, #0
 800087a:	f000 f8fd 	bl	8000a78 <setHorizontalLeds>
				setVerticalLeds(RESET,RESET,RESET);
 800087e:	2200      	movs	r2, #0
 8000880:	2100      	movs	r1, #0
 8000882:	2000      	movs	r0, #0
 8000884:	f000 f93e 	bl	8000b04 <setVerticalLeds>
				setTimer(1000, 3);
 8000888:	2103      	movs	r1, #3
 800088a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800088e:	f000 fbb5 	bl	8000ffc <setTimer>
				status = MAN_GREEN;
 8000892:	4b55      	ldr	r3, [pc, #340]	; (80009e8 <fsm_manual_run+0x2d8>)
 8000894:	220d      	movs	r2, #13
 8000896:	601a      	str	r2, [r3, #0]
				printf("Current time: %d\r\n", green_duration_clone);
 8000898:	4b5c      	ldr	r3, [pc, #368]	; (8000a0c <fsm_manual_run+0x2fc>)
 800089a:	681b      	ldr	r3, [r3, #0]
 800089c:	4619      	mov	r1, r3
 800089e:	4856      	ldr	r0, [pc, #344]	; (80009f8 <fsm_manual_run+0x2e8>)
 80008a0:	f002 fdd6 	bl	8003450 <iprintf>
			}
			if(isButtonPressed(2) == 1){
 80008a4:	2002      	movs	r0, #2
 80008a6:	f7ff fc51 	bl	800014c <isButtonPressed>
 80008aa:	4603      	mov	r3, r0
 80008ac:	2b01      	cmp	r3, #1
 80008ae:	d112      	bne.n	80008d6 <fsm_manual_run+0x1c6>
				yellow_duration_clone++;
 80008b0:	4b50      	ldr	r3, [pc, #320]	; (80009f4 <fsm_manual_run+0x2e4>)
 80008b2:	681b      	ldr	r3, [r3, #0]
 80008b4:	3301      	adds	r3, #1
 80008b6:	4a4f      	ldr	r2, [pc, #316]	; (80009f4 <fsm_manual_run+0x2e4>)
 80008b8:	6013      	str	r3, [r2, #0]
				if(yellow_duration_clone >= 99) yellow_duration_clone = yellow_duration;
 80008ba:	4b4e      	ldr	r3, [pc, #312]	; (80009f4 <fsm_manual_run+0x2e4>)
 80008bc:	681b      	ldr	r3, [r3, #0]
 80008be:	2b62      	cmp	r3, #98	; 0x62
 80008c0:	dd03      	ble.n	80008ca <fsm_manual_run+0x1ba>
 80008c2:	4b50      	ldr	r3, [pc, #320]	; (8000a04 <fsm_manual_run+0x2f4>)
 80008c4:	681b      	ldr	r3, [r3, #0]
 80008c6:	4a4b      	ldr	r2, [pc, #300]	; (80009f4 <fsm_manual_run+0x2e4>)
 80008c8:	6013      	str	r3, [r2, #0]
				printf("Current time: %d\r\n", yellow_duration_clone);
 80008ca:	4b4a      	ldr	r3, [pc, #296]	; (80009f4 <fsm_manual_run+0x2e4>)
 80008cc:	681b      	ldr	r3, [r3, #0]
 80008ce:	4619      	mov	r1, r3
 80008d0:	4849      	ldr	r0, [pc, #292]	; (80009f8 <fsm_manual_run+0x2e8>)
 80008d2:	f002 fdbd 	bl	8003450 <iprintf>
			}
			if(isButtonPressed(3) == 1){
 80008d6:	2003      	movs	r0, #3
 80008d8:	f7ff fc38 	bl	800014c <isButtonPressed>
 80008dc:	4603      	mov	r3, r0
 80008de:	2b01      	cmp	r3, #1
 80008e0:	d17c      	bne.n	80009dc <fsm_manual_run+0x2cc>
				yellow_duration =  yellow_duration_clone;
 80008e2:	4b44      	ldr	r3, [pc, #272]	; (80009f4 <fsm_manual_run+0x2e4>)
 80008e4:	681b      	ldr	r3, [r3, #0]
 80008e6:	4a47      	ldr	r2, [pc, #284]	; (8000a04 <fsm_manual_run+0x2f4>)
 80008e8:	6013      	str	r3, [r2, #0]
				red_duration = green_duration + yellow_duration;
 80008ea:	4b47      	ldr	r3, [pc, #284]	; (8000a08 <fsm_manual_run+0x2f8>)
 80008ec:	681a      	ldr	r2, [r3, #0]
 80008ee:	4b45      	ldr	r3, [pc, #276]	; (8000a04 <fsm_manual_run+0x2f4>)
 80008f0:	681b      	ldr	r3, [r3, #0]
 80008f2:	4413      	add	r3, r2
 80008f4:	4a42      	ldr	r2, [pc, #264]	; (8000a00 <fsm_manual_run+0x2f0>)
 80008f6:	6013      	str	r3, [r2, #0]
				status = INIT;
 80008f8:	4b3b      	ldr	r3, [pc, #236]	; (80009e8 <fsm_manual_run+0x2d8>)
 80008fa:	2201      	movs	r2, #1
 80008fc:	601a      	str	r2, [r3, #0]
			}
			break;
 80008fe:	e06d      	b.n	80009dc <fsm_manual_run+0x2cc>
		case MAN_GREEN:
			if(timer_flag[3] == 1){
 8000900:	4b3a      	ldr	r3, [pc, #232]	; (80009ec <fsm_manual_run+0x2dc>)
 8000902:	68db      	ldr	r3, [r3, #12]
 8000904:	2b01      	cmp	r3, #1
 8000906:	d123      	bne.n	8000950 <fsm_manual_run+0x240>
				if(toggle){
 8000908:	4b39      	ldr	r3, [pc, #228]	; (80009f0 <fsm_manual_run+0x2e0>)
 800090a:	681b      	ldr	r3, [r3, #0]
 800090c:	2b00      	cmp	r3, #0
 800090e:	d00a      	beq.n	8000926 <fsm_manual_run+0x216>
					setHorizontalLeds(RESET,SET,RESET);
 8000910:	2200      	movs	r2, #0
 8000912:	2101      	movs	r1, #1
 8000914:	2000      	movs	r0, #0
 8000916:	f000 f8af 	bl	8000a78 <setHorizontalLeds>
					setVerticalLeds(RESET,SET,RESET);
 800091a:	2200      	movs	r2, #0
 800091c:	2101      	movs	r1, #1
 800091e:	2000      	movs	r0, #0
 8000920:	f000 f8f0 	bl	8000b04 <setVerticalLeds>
 8000924:	e009      	b.n	800093a <fsm_manual_run+0x22a>
				}else {
					setHorizontalLeds(RESET,RESET,RESET);
 8000926:	2200      	movs	r2, #0
 8000928:	2100      	movs	r1, #0
 800092a:	2000      	movs	r0, #0
 800092c:	f000 f8a4 	bl	8000a78 <setHorizontalLeds>
					setVerticalLeds(RESET,RESET,RESET);
 8000930:	2200      	movs	r2, #0
 8000932:	2100      	movs	r1, #0
 8000934:	2000      	movs	r0, #0
 8000936:	f000 f8e5 	bl	8000b04 <setVerticalLeds>
				}
				toggle = 1 - toggle;
 800093a:	4b2d      	ldr	r3, [pc, #180]	; (80009f0 <fsm_manual_run+0x2e0>)
 800093c:	681b      	ldr	r3, [r3, #0]
 800093e:	f1c3 0301 	rsb	r3, r3, #1
 8000942:	4a2b      	ldr	r2, [pc, #172]	; (80009f0 <fsm_manual_run+0x2e0>)
 8000944:	6013      	str	r3, [r2, #0]
				setTimer(1000, 3);
 8000946:	2103      	movs	r1, #3
 8000948:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800094c:	f000 fb56 	bl	8000ffc <setTimer>
			}
			if(isButtonPressed(1) == 1){
 8000950:	2001      	movs	r0, #1
 8000952:	f7ff fbfb 	bl	800014c <isButtonPressed>
 8000956:	4603      	mov	r3, r0
 8000958:	2b01      	cmp	r3, #1
 800095a:	d10c      	bne.n	8000976 <fsm_manual_run+0x266>
				setHorizontalLeds(RESET,RESET,RESET);
 800095c:	2200      	movs	r2, #0
 800095e:	2100      	movs	r1, #0
 8000960:	2000      	movs	r0, #0
 8000962:	f000 f889 	bl	8000a78 <setHorizontalLeds>
				setVerticalLeds(RESET,RESET,RESET);
 8000966:	2200      	movs	r2, #0
 8000968:	2100      	movs	r1, #0
 800096a:	2000      	movs	r0, #0
 800096c:	f000 f8ca 	bl	8000b04 <setVerticalLeds>
				status = INIT;
 8000970:	4b1d      	ldr	r3, [pc, #116]	; (80009e8 <fsm_manual_run+0x2d8>)
 8000972:	2201      	movs	r2, #1
 8000974:	601a      	str	r2, [r3, #0]
			}
			if(isButtonPressed(2) == 1){
 8000976:	2002      	movs	r0, #2
 8000978:	f7ff fbe8 	bl	800014c <isButtonPressed>
 800097c:	4603      	mov	r3, r0
 800097e:	2b01      	cmp	r3, #1
 8000980:	d112      	bne.n	80009a8 <fsm_manual_run+0x298>
				green_duration_clone++;
 8000982:	4b22      	ldr	r3, [pc, #136]	; (8000a0c <fsm_manual_run+0x2fc>)
 8000984:	681b      	ldr	r3, [r3, #0]
 8000986:	3301      	adds	r3, #1
 8000988:	4a20      	ldr	r2, [pc, #128]	; (8000a0c <fsm_manual_run+0x2fc>)
 800098a:	6013      	str	r3, [r2, #0]
				if(green_duration_clone >= 99) green_duration_clone = green_duration;
 800098c:	4b1f      	ldr	r3, [pc, #124]	; (8000a0c <fsm_manual_run+0x2fc>)
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	2b62      	cmp	r3, #98	; 0x62
 8000992:	dd03      	ble.n	800099c <fsm_manual_run+0x28c>
 8000994:	4b1c      	ldr	r3, [pc, #112]	; (8000a08 <fsm_manual_run+0x2f8>)
 8000996:	681b      	ldr	r3, [r3, #0]
 8000998:	4a1c      	ldr	r2, [pc, #112]	; (8000a0c <fsm_manual_run+0x2fc>)
 800099a:	6013      	str	r3, [r2, #0]
				printf("Current time: %d\r\n", green_duration_clone);
 800099c:	4b1b      	ldr	r3, [pc, #108]	; (8000a0c <fsm_manual_run+0x2fc>)
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	4619      	mov	r1, r3
 80009a2:	4815      	ldr	r0, [pc, #84]	; (80009f8 <fsm_manual_run+0x2e8>)
 80009a4:	f002 fd54 	bl	8003450 <iprintf>
			}
			if(isButtonPressed(3) == 1){
 80009a8:	2003      	movs	r0, #3
 80009aa:	f7ff fbcf 	bl	800014c <isButtonPressed>
 80009ae:	4603      	mov	r3, r0
 80009b0:	2b01      	cmp	r3, #1
 80009b2:	d115      	bne.n	80009e0 <fsm_manual_run+0x2d0>
				green_duration =  green_duration_clone;
 80009b4:	4b15      	ldr	r3, [pc, #84]	; (8000a0c <fsm_manual_run+0x2fc>)
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	4a13      	ldr	r2, [pc, #76]	; (8000a08 <fsm_manual_run+0x2f8>)
 80009ba:	6013      	str	r3, [r2, #0]
				red_duration = green_duration + yellow_duration;
 80009bc:	4b12      	ldr	r3, [pc, #72]	; (8000a08 <fsm_manual_run+0x2f8>)
 80009be:	681a      	ldr	r2, [r3, #0]
 80009c0:	4b10      	ldr	r3, [pc, #64]	; (8000a04 <fsm_manual_run+0x2f4>)
 80009c2:	681b      	ldr	r3, [r3, #0]
 80009c4:	4413      	add	r3, r2
 80009c6:	4a0e      	ldr	r2, [pc, #56]	; (8000a00 <fsm_manual_run+0x2f0>)
 80009c8:	6013      	str	r3, [r2, #0]
				status = INIT;
 80009ca:	4b07      	ldr	r3, [pc, #28]	; (80009e8 <fsm_manual_run+0x2d8>)
 80009cc:	2201      	movs	r2, #1
 80009ce:	601a      	str	r2, [r3, #0]
			}
			break;
 80009d0:	e006      	b.n	80009e0 <fsm_manual_run+0x2d0>
		default:
			initializeDurationClones();
 80009d2:	f7ff fe7f 	bl	80006d4 <initializeDurationClones>
			break;
 80009d6:	e004      	b.n	80009e2 <fsm_manual_run+0x2d2>
			break;
 80009d8:	bf00      	nop
 80009da:	e002      	b.n	80009e2 <fsm_manual_run+0x2d2>
			break;
 80009dc:	bf00      	nop
 80009de:	e000      	b.n	80009e2 <fsm_manual_run+0x2d2>
			break;
 80009e0:	bf00      	nop
	}
}
 80009e2:	bf00      	nop
 80009e4:	bd80      	pop	{r7, pc}
 80009e6:	bf00      	nop
 80009e8:	20000114 	.word	0x20000114
 80009ec:	20000148 	.word	0x20000148
 80009f0:	20000070 	.word	0x20000070
 80009f4:	20000184 	.word	0x20000184
 80009f8:	08004328 	.word	0x08004328
 80009fc:	2000017c 	.word	0x2000017c
 8000a00:	20000064 	.word	0x20000064
 8000a04:	2000006c 	.word	0x2000006c
 8000a08:	20000068 	.word	0x20000068
 8000a0c:	20000180 	.word	0x20000180

08000a10 <__io_putchar>:
#include "global.h"
int status = 0;
int horizontal_number = 0;
int vertical_number = 0;

int __io_putchar(int ch) {
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b082      	sub	sp, #8
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8000a18:	1d39      	adds	r1, r7, #4
 8000a1a:	f04f 33ff 	mov.w	r3, #4294967295
 8000a1e:	2201      	movs	r2, #1
 8000a20:	4803      	ldr	r0, [pc, #12]	; (8000a30 <__io_putchar+0x20>)
 8000a22:	f002 fb63 	bl	80030ec <HAL_UART_Transmit>
    return ch;
 8000a26:	687b      	ldr	r3, [r7, #4]
}
 8000a28:	4618      	mov	r0, r3
 8000a2a:	3708      	adds	r7, #8
 8000a2c:	46bd      	mov	sp, r7
 8000a2e:	bd80      	pop	{r7, pc}
 8000a30:	20000218 	.word	0x20000218

08000a34 <countDown>:

void countDown(){
 8000a34:	b580      	push	{r7, lr}
 8000a36:	af00      	add	r7, sp, #0
	horizontal_number--;
 8000a38:	4b0b      	ldr	r3, [pc, #44]	; (8000a68 <countDown+0x34>)
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	3b01      	subs	r3, #1
 8000a3e:	4a0a      	ldr	r2, [pc, #40]	; (8000a68 <countDown+0x34>)
 8000a40:	6013      	str	r3, [r2, #0]
	vertical_number--;
 8000a42:	4b0a      	ldr	r3, [pc, #40]	; (8000a6c <countDown+0x38>)
 8000a44:	681b      	ldr	r3, [r3, #0]
 8000a46:	3b01      	subs	r3, #1
 8000a48:	4a08      	ldr	r2, [pc, #32]	; (8000a6c <countDown+0x38>)
 8000a4a:	6013      	str	r3, [r2, #0]
	printf("Remaining horizontal second: %d\r\n", horizontal_number);
 8000a4c:	4b06      	ldr	r3, [pc, #24]	; (8000a68 <countDown+0x34>)
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	4619      	mov	r1, r3
 8000a52:	4807      	ldr	r0, [pc, #28]	; (8000a70 <countDown+0x3c>)
 8000a54:	f002 fcfc 	bl	8003450 <iprintf>
    printf("Remaining vertical second: %d\r\n", vertical_number);
 8000a58:	4b04      	ldr	r3, [pc, #16]	; (8000a6c <countDown+0x38>)
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	4619      	mov	r1, r3
 8000a5e:	4805      	ldr	r0, [pc, #20]	; (8000a74 <countDown+0x40>)
 8000a60:	f002 fcf6 	bl	8003450 <iprintf>
}
 8000a64:	bf00      	nop
 8000a66:	bd80      	pop	{r7, pc}
 8000a68:	20000118 	.word	0x20000118
 8000a6c:	2000011c 	.word	0x2000011c
 8000a70:	0800433c 	.word	0x0800433c
 8000a74:	08004360 	.word	0x08004360

08000a78 <setHorizontalLeds>:
	horizontal_number = horizontal;
	vertical_number = vertical;
	printf("Remaining horizontal second: %d\r\n", horizontal_number);
    printf("Remaining vertical second: %d\r\n", vertical_number);
}
void setHorizontalLeds(int red, int green, int yellow){
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b084      	sub	sp, #16
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	60f8      	str	r0, [r7, #12]
 8000a80:	60b9      	str	r1, [r7, #8]
 8000a82:	607a      	str	r2, [r7, #4]
	if(red == SET){
 8000a84:	68fb      	ldr	r3, [r7, #12]
 8000a86:	2b01      	cmp	r3, #1
 8000a88:	d109      	bne.n	8000a9e <setHorizontalLeds+0x26>
		HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, SET);
 8000a8a:	2201      	movs	r2, #1
 8000a8c:	2120      	movs	r1, #32
 8000a8e:	481c      	ldr	r0, [pc, #112]	; (8000b00 <setHorizontalLeds+0x88>)
 8000a90:	f000 ffe5 	bl	8001a5e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, RESET);
 8000a94:	2200      	movs	r2, #0
 8000a96:	2110      	movs	r1, #16
 8000a98:	4819      	ldr	r0, [pc, #100]	; (8000b00 <setHorizontalLeds+0x88>)
 8000a9a:	f000 ffe0 	bl	8001a5e <HAL_GPIO_WritePin>
	}
	if(green == SET){
 8000a9e:	68bb      	ldr	r3, [r7, #8]
 8000aa0:	2b01      	cmp	r3, #1
 8000aa2:	d109      	bne.n	8000ab8 <setHorizontalLeds+0x40>
		HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, RESET);
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	2120      	movs	r1, #32
 8000aa8:	4815      	ldr	r0, [pc, #84]	; (8000b00 <setHorizontalLeds+0x88>)
 8000aaa:	f000 ffd8 	bl	8001a5e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, SET);
 8000aae:	2201      	movs	r2, #1
 8000ab0:	2110      	movs	r1, #16
 8000ab2:	4813      	ldr	r0, [pc, #76]	; (8000b00 <setHorizontalLeds+0x88>)
 8000ab4:	f000 ffd3 	bl	8001a5e <HAL_GPIO_WritePin>
	}
	if(yellow == SET){
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	2b01      	cmp	r3, #1
 8000abc:	d109      	bne.n	8000ad2 <setHorizontalLeds+0x5a>
		HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, SET);
 8000abe:	2201      	movs	r2, #1
 8000ac0:	2120      	movs	r1, #32
 8000ac2:	480f      	ldr	r0, [pc, #60]	; (8000b00 <setHorizontalLeds+0x88>)
 8000ac4:	f000 ffcb 	bl	8001a5e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, SET);
 8000ac8:	2201      	movs	r2, #1
 8000aca:	2110      	movs	r1, #16
 8000acc:	480c      	ldr	r0, [pc, #48]	; (8000b00 <setHorizontalLeds+0x88>)
 8000ace:	f000 ffc6 	bl	8001a5e <HAL_GPIO_WritePin>
	}
	if(red==RESET && green==RESET && yellow==RESET){
 8000ad2:	68fb      	ldr	r3, [r7, #12]
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	d10f      	bne.n	8000af8 <setHorizontalLeds+0x80>
 8000ad8:	68bb      	ldr	r3, [r7, #8]
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d10c      	bne.n	8000af8 <setHorizontalLeds+0x80>
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	d109      	bne.n	8000af8 <setHorizontalLeds+0x80>
		HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, RESET);
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	2120      	movs	r1, #32
 8000ae8:	4805      	ldr	r0, [pc, #20]	; (8000b00 <setHorizontalLeds+0x88>)
 8000aea:	f000 ffb8 	bl	8001a5e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, RESET);
 8000aee:	2200      	movs	r2, #0
 8000af0:	2110      	movs	r1, #16
 8000af2:	4803      	ldr	r0, [pc, #12]	; (8000b00 <setHorizontalLeds+0x88>)
 8000af4:	f000 ffb3 	bl	8001a5e <HAL_GPIO_WritePin>
	}
}
 8000af8:	bf00      	nop
 8000afa:	3710      	adds	r7, #16
 8000afc:	46bd      	mov	sp, r7
 8000afe:	bd80      	pop	{r7, pc}
 8000b00:	40010c00 	.word	0x40010c00

08000b04 <setVerticalLeds>:
void setVerticalLeds(int red, int green, int yellow){
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b084      	sub	sp, #16
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	60f8      	str	r0, [r7, #12]
 8000b0c:	60b9      	str	r1, [r7, #8]
 8000b0e:	607a      	str	r2, [r7, #4]
	if(red == SET){
 8000b10:	68fb      	ldr	r3, [r7, #12]
 8000b12:	2b01      	cmp	r3, #1
 8000b14:	d10a      	bne.n	8000b2c <setVerticalLeds+0x28>
		HAL_GPIO_WritePin(D2_GPIO_Port, D2_Pin, SET);
 8000b16:	2201      	movs	r2, #1
 8000b18:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b1c:	481d      	ldr	r0, [pc, #116]	; (8000b94 <setVerticalLeds+0x90>)
 8000b1e:	f000 ff9e 	bl	8001a5e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, RESET);
 8000b22:	2200      	movs	r2, #0
 8000b24:	2108      	movs	r1, #8
 8000b26:	481c      	ldr	r0, [pc, #112]	; (8000b98 <setVerticalLeds+0x94>)
 8000b28:	f000 ff99 	bl	8001a5e <HAL_GPIO_WritePin>
	}
	if(green == SET){
 8000b2c:	68bb      	ldr	r3, [r7, #8]
 8000b2e:	2b01      	cmp	r3, #1
 8000b30:	d10a      	bne.n	8000b48 <setVerticalLeds+0x44>
		HAL_GPIO_WritePin(D2_GPIO_Port, D2_Pin, RESET);
 8000b32:	2200      	movs	r2, #0
 8000b34:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b38:	4816      	ldr	r0, [pc, #88]	; (8000b94 <setVerticalLeds+0x90>)
 8000b3a:	f000 ff90 	bl	8001a5e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, SET);
 8000b3e:	2201      	movs	r2, #1
 8000b40:	2108      	movs	r1, #8
 8000b42:	4815      	ldr	r0, [pc, #84]	; (8000b98 <setVerticalLeds+0x94>)
 8000b44:	f000 ff8b 	bl	8001a5e <HAL_GPIO_WritePin>
	}
	if(yellow == SET){
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	2b01      	cmp	r3, #1
 8000b4c:	d10a      	bne.n	8000b64 <setVerticalLeds+0x60>
		HAL_GPIO_WritePin(D2_GPIO_Port, D2_Pin, SET);
 8000b4e:	2201      	movs	r2, #1
 8000b50:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b54:	480f      	ldr	r0, [pc, #60]	; (8000b94 <setVerticalLeds+0x90>)
 8000b56:	f000 ff82 	bl	8001a5e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, SET);
 8000b5a:	2201      	movs	r2, #1
 8000b5c:	2108      	movs	r1, #8
 8000b5e:	480e      	ldr	r0, [pc, #56]	; (8000b98 <setVerticalLeds+0x94>)
 8000b60:	f000 ff7d 	bl	8001a5e <HAL_GPIO_WritePin>
	}
	if(red==RESET && green==RESET && yellow==RESET){
 8000b64:	68fb      	ldr	r3, [r7, #12]
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	d110      	bne.n	8000b8c <setVerticalLeds+0x88>
 8000b6a:	68bb      	ldr	r3, [r7, #8]
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	d10d      	bne.n	8000b8c <setVerticalLeds+0x88>
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d10a      	bne.n	8000b8c <setVerticalLeds+0x88>
		HAL_GPIO_WritePin(D2_GPIO_Port, D2_Pin, RESET);
 8000b76:	2200      	movs	r2, #0
 8000b78:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b7c:	4805      	ldr	r0, [pc, #20]	; (8000b94 <setVerticalLeds+0x90>)
 8000b7e:	f000 ff6e 	bl	8001a5e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, RESET);
 8000b82:	2200      	movs	r2, #0
 8000b84:	2108      	movs	r1, #8
 8000b86:	4804      	ldr	r0, [pc, #16]	; (8000b98 <setVerticalLeds+0x94>)
 8000b88:	f000 ff69 	bl	8001a5e <HAL_GPIO_WritePin>
	}
}
 8000b8c:	bf00      	nop
 8000b8e:	3710      	adds	r7, #16
 8000b90:	46bd      	mov	sp, r7
 8000b92:	bd80      	pop	{r7, pc}
 8000b94:	40010800 	.word	0x40010800
 8000b98:	40010c00 	.word	0x40010c00

08000b9c <setPedesLeds>:
void setPedesLeds(int red, int green, int mixed){
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b084      	sub	sp, #16
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	60f8      	str	r0, [r7, #12]
 8000ba4:	60b9      	str	r1, [r7, #8]
 8000ba6:	607a      	str	r2, [r7, #4]
	if(red == SET){
 8000ba8:	68fb      	ldr	r3, [r7, #12]
 8000baa:	2b01      	cmp	r3, #1
 8000bac:	d10b      	bne.n	8000bc6 <setPedesLeds+0x2a>
		HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, SET);
 8000bae:	2201      	movs	r2, #1
 8000bb0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000bb4:	481a      	ldr	r0, [pc, #104]	; (8000c20 <setPedesLeds+0x84>)
 8000bb6:	f000 ff52 	bl	8001a5e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D7_GPIO_Port, D7_Pin, RESET);
 8000bba:	2200      	movs	r2, #0
 8000bbc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000bc0:	4818      	ldr	r0, [pc, #96]	; (8000c24 <setPedesLeds+0x88>)
 8000bc2:	f000 ff4c 	bl	8001a5e <HAL_GPIO_WritePin>
	}
	if(green == SET){
 8000bc6:	68bb      	ldr	r3, [r7, #8]
 8000bc8:	2b01      	cmp	r3, #1
 8000bca:	d10b      	bne.n	8000be4 <setPedesLeds+0x48>
		HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, RESET);
 8000bcc:	2200      	movs	r2, #0
 8000bce:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000bd2:	4813      	ldr	r0, [pc, #76]	; (8000c20 <setPedesLeds+0x84>)
 8000bd4:	f000 ff43 	bl	8001a5e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D7_GPIO_Port, D7_Pin, SET);
 8000bd8:	2201      	movs	r2, #1
 8000bda:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000bde:	4811      	ldr	r0, [pc, #68]	; (8000c24 <setPedesLeds+0x88>)
 8000be0:	f000 ff3d 	bl	8001a5e <HAL_GPIO_WritePin>
	}
	if(mixed == SET){
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	2b01      	cmp	r3, #1
 8000be8:	d10a      	bne.n	8000c00 <setPedesLeds+0x64>
		HAL_GPIO_WritePin(D2_GPIO_Port, D2_Pin, SET);
 8000bea:	2201      	movs	r2, #1
 8000bec:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000bf0:	480c      	ldr	r0, [pc, #48]	; (8000c24 <setPedesLeds+0x88>)
 8000bf2:	f000 ff34 	bl	8001a5e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, SET);
 8000bf6:	2201      	movs	r2, #1
 8000bf8:	2108      	movs	r1, #8
 8000bfa:	4809      	ldr	r0, [pc, #36]	; (8000c20 <setPedesLeds+0x84>)
 8000bfc:	f000 ff2f 	bl	8001a5e <HAL_GPIO_WritePin>
	}
	HAL_GPIO_WritePin(D2_GPIO_Port, D2_Pin, RESET);
 8000c00:	2200      	movs	r2, #0
 8000c02:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000c06:	4807      	ldr	r0, [pc, #28]	; (8000c24 <setPedesLeds+0x88>)
 8000c08:	f000 ff29 	bl	8001a5e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, RESET);
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	2108      	movs	r1, #8
 8000c10:	4803      	ldr	r0, [pc, #12]	; (8000c20 <setPedesLeds+0x84>)
 8000c12:	f000 ff24 	bl	8001a5e <HAL_GPIO_WritePin>
}
 8000c16:	bf00      	nop
 8000c18:	3710      	adds	r7, #16
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	bd80      	pop	{r7, pc}
 8000c1e:	bf00      	nop
 8000c20:	40010c00 	.word	0x40010c00
 8000c24:	40010800 	.word	0x40010800

08000c28 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c2c:	f000 fc6a 	bl	8001504 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c30:	f000 f818 	bl	8000c64 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c34:	f000 f942 	bl	8000ebc <MX_GPIO_Init>
  MX_TIM2_Init();
 8000c38:	f000 f854 	bl	8000ce4 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000c3c:	f000 f89e 	bl	8000d7c <MX_TIM3_Init>
  MX_USART2_UART_Init();
 8000c40:	f000 f912 	bl	8000e68 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8000c44:	4805      	ldr	r0, [pc, #20]	; (8000c5c <main+0x34>)
 8000c46:	f001 fbb1 	bl	80023ac <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  status = INIT;
 8000c4a:	4b05      	ldr	r3, [pc, #20]	; (8000c60 <main+0x38>)
 8000c4c:	2201      	movs	r2, #1
 8000c4e:	601a      	str	r2, [r3, #0]
  while (1)
  {
	  fsm_automatic_run();
 8000c50:	f7ff fb38 	bl	80002c4 <fsm_automatic_run>
	  fsm_manual_run();
 8000c54:	f7ff fd5c 	bl	8000710 <fsm_manual_run>
	  fsm_automatic_run();
 8000c58:	e7fa      	b.n	8000c50 <main+0x28>
 8000c5a:	bf00      	nop
 8000c5c:	200001d0 	.word	0x200001d0
 8000c60:	20000114 	.word	0x20000114

08000c64 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b090      	sub	sp, #64	; 0x40
 8000c68:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c6a:	f107 0318 	add.w	r3, r7, #24
 8000c6e:	2228      	movs	r2, #40	; 0x28
 8000c70:	2100      	movs	r1, #0
 8000c72:	4618      	mov	r0, r3
 8000c74:	f002 fbe4 	bl	8003440 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c78:	1d3b      	adds	r3, r7, #4
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	601a      	str	r2, [r3, #0]
 8000c7e:	605a      	str	r2, [r3, #4]
 8000c80:	609a      	str	r2, [r3, #8]
 8000c82:	60da      	str	r2, [r3, #12]
 8000c84:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000c86:	2302      	movs	r3, #2
 8000c88:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c8a:	2301      	movs	r3, #1
 8000c8c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000c8e:	2310      	movs	r3, #16
 8000c90:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c92:	2302      	movs	r3, #2
 8000c94:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8000c96:	2300      	movs	r3, #0
 8000c98:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000c9a:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8000c9e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ca0:	f107 0318 	add.w	r3, r7, #24
 8000ca4:	4618      	mov	r0, r3
 8000ca6:	f000 fef3 	bl	8001a90 <HAL_RCC_OscConfig>
 8000caa:	4603      	mov	r3, r0
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	d001      	beq.n	8000cb4 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000cb0:	f000 f99e 	bl	8000ff0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000cb4:	230f      	movs	r3, #15
 8000cb6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000cb8:	2302      	movs	r3, #2
 8000cba:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV8;
 8000cbc:	23a0      	movs	r3, #160	; 0xa0
 8000cbe:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000cc8:	1d3b      	adds	r3, r7, #4
 8000cca:	2102      	movs	r1, #2
 8000ccc:	4618      	mov	r0, r3
 8000cce:	f001 f95f 	bl	8001f90 <HAL_RCC_ClockConfig>
 8000cd2:	4603      	mov	r3, r0
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d001      	beq.n	8000cdc <SystemClock_Config+0x78>
  {
    Error_Handler();
 8000cd8:	f000 f98a 	bl	8000ff0 <Error_Handler>
  }
}
 8000cdc:	bf00      	nop
 8000cde:	3740      	adds	r7, #64	; 0x40
 8000ce0:	46bd      	mov	sp, r7
 8000ce2:	bd80      	pop	{r7, pc}

08000ce4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b086      	sub	sp, #24
 8000ce8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000cea:	f107 0308 	add.w	r3, r7, #8
 8000cee:	2200      	movs	r2, #0
 8000cf0:	601a      	str	r2, [r3, #0]
 8000cf2:	605a      	str	r2, [r3, #4]
 8000cf4:	609a      	str	r2, [r3, #8]
 8000cf6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000cf8:	463b      	mov	r3, r7
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	601a      	str	r2, [r3, #0]
 8000cfe:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000d00:	4b1d      	ldr	r3, [pc, #116]	; (8000d78 <MX_TIM2_Init+0x94>)
 8000d02:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000d06:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8000d08:	4b1b      	ldr	r3, [pc, #108]	; (8000d78 <MX_TIM2_Init+0x94>)
 8000d0a:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8000d0e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d10:	4b19      	ldr	r3, [pc, #100]	; (8000d78 <MX_TIM2_Init+0x94>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 8000d16:	4b18      	ldr	r3, [pc, #96]	; (8000d78 <MX_TIM2_Init+0x94>)
 8000d18:	2209      	movs	r2, #9
 8000d1a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d1c:	4b16      	ldr	r3, [pc, #88]	; (8000d78 <MX_TIM2_Init+0x94>)
 8000d1e:	2200      	movs	r2, #0
 8000d20:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d22:	4b15      	ldr	r3, [pc, #84]	; (8000d78 <MX_TIM2_Init+0x94>)
 8000d24:	2200      	movs	r2, #0
 8000d26:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000d28:	4813      	ldr	r0, [pc, #76]	; (8000d78 <MX_TIM2_Init+0x94>)
 8000d2a:	f001 faef 	bl	800230c <HAL_TIM_Base_Init>
 8000d2e:	4603      	mov	r3, r0
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d001      	beq.n	8000d38 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000d34:	f000 f95c 	bl	8000ff0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d38:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d3c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000d3e:	f107 0308 	add.w	r3, r7, #8
 8000d42:	4619      	mov	r1, r3
 8000d44:	480c      	ldr	r0, [pc, #48]	; (8000d78 <MX_TIM2_Init+0x94>)
 8000d46:	f001 fda5 	bl	8002894 <HAL_TIM_ConfigClockSource>
 8000d4a:	4603      	mov	r3, r0
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d001      	beq.n	8000d54 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000d50:	f000 f94e 	bl	8000ff0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d54:	2300      	movs	r3, #0
 8000d56:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d58:	2300      	movs	r3, #0
 8000d5a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000d5c:	463b      	mov	r3, r7
 8000d5e:	4619      	mov	r1, r3
 8000d60:	4805      	ldr	r0, [pc, #20]	; (8000d78 <MX_TIM2_Init+0x94>)
 8000d62:	f002 f903 	bl	8002f6c <HAL_TIMEx_MasterConfigSynchronization>
 8000d66:	4603      	mov	r3, r0
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	d001      	beq.n	8000d70 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000d6c:	f000 f940 	bl	8000ff0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000d70:	bf00      	nop
 8000d72:	3718      	adds	r7, #24
 8000d74:	46bd      	mov	sp, r7
 8000d76:	bd80      	pop	{r7, pc}
 8000d78:	200001d0 	.word	0x200001d0

08000d7c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b08e      	sub	sp, #56	; 0x38
 8000d80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d82:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000d86:	2200      	movs	r2, #0
 8000d88:	601a      	str	r2, [r3, #0]
 8000d8a:	605a      	str	r2, [r3, #4]
 8000d8c:	609a      	str	r2, [r3, #8]
 8000d8e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d90:	f107 0320 	add.w	r3, r7, #32
 8000d94:	2200      	movs	r2, #0
 8000d96:	601a      	str	r2, [r3, #0]
 8000d98:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000d9a:	1d3b      	adds	r3, r7, #4
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	601a      	str	r2, [r3, #0]
 8000da0:	605a      	str	r2, [r3, #4]
 8000da2:	609a      	str	r2, [r3, #8]
 8000da4:	60da      	str	r2, [r3, #12]
 8000da6:	611a      	str	r2, [r3, #16]
 8000da8:	615a      	str	r2, [r3, #20]
 8000daa:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000dac:	4b2c      	ldr	r3, [pc, #176]	; (8000e60 <MX_TIM3_Init+0xe4>)
 8000dae:	4a2d      	ldr	r2, [pc, #180]	; (8000e64 <MX_TIM3_Init+0xe8>)
 8000db0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 239;
 8000db2:	4b2b      	ldr	r3, [pc, #172]	; (8000e60 <MX_TIM3_Init+0xe4>)
 8000db4:	22ef      	movs	r2, #239	; 0xef
 8000db6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000db8:	4b29      	ldr	r3, [pc, #164]	; (8000e60 <MX_TIM3_Init+0xe4>)
 8000dba:	2200      	movs	r2, #0
 8000dbc:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100;
 8000dbe:	4b28      	ldr	r3, [pc, #160]	; (8000e60 <MX_TIM3_Init+0xe4>)
 8000dc0:	2264      	movs	r2, #100	; 0x64
 8000dc2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000dc4:	4b26      	ldr	r3, [pc, #152]	; (8000e60 <MX_TIM3_Init+0xe4>)
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000dca:	4b25      	ldr	r3, [pc, #148]	; (8000e60 <MX_TIM3_Init+0xe4>)
 8000dcc:	2200      	movs	r2, #0
 8000dce:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000dd0:	4823      	ldr	r0, [pc, #140]	; (8000e60 <MX_TIM3_Init+0xe4>)
 8000dd2:	f001 fa9b 	bl	800230c <HAL_TIM_Base_Init>
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d001      	beq.n	8000de0 <MX_TIM3_Init+0x64>
  {
    Error_Handler();
 8000ddc:	f000 f908 	bl	8000ff0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000de0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000de4:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000de6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000dea:	4619      	mov	r1, r3
 8000dec:	481c      	ldr	r0, [pc, #112]	; (8000e60 <MX_TIM3_Init+0xe4>)
 8000dee:	f001 fd51 	bl	8002894 <HAL_TIM_ConfigClockSource>
 8000df2:	4603      	mov	r3, r0
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d001      	beq.n	8000dfc <MX_TIM3_Init+0x80>
  {
    Error_Handler();
 8000df8:	f000 f8fa 	bl	8000ff0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000dfc:	4818      	ldr	r0, [pc, #96]	; (8000e60 <MX_TIM3_Init+0xe4>)
 8000dfe:	f001 fb27 	bl	8002450 <HAL_TIM_PWM_Init>
 8000e02:	4603      	mov	r3, r0
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d001      	beq.n	8000e0c <MX_TIM3_Init+0x90>
  {
    Error_Handler();
 8000e08:	f000 f8f2 	bl	8000ff0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e10:	2300      	movs	r3, #0
 8000e12:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000e14:	f107 0320 	add.w	r3, r7, #32
 8000e18:	4619      	mov	r1, r3
 8000e1a:	4811      	ldr	r0, [pc, #68]	; (8000e60 <MX_TIM3_Init+0xe4>)
 8000e1c:	f002 f8a6 	bl	8002f6c <HAL_TIMEx_MasterConfigSynchronization>
 8000e20:	4603      	mov	r3, r0
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d001      	beq.n	8000e2a <MX_TIM3_Init+0xae>
  {
    Error_Handler();
 8000e26:	f000 f8e3 	bl	8000ff0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000e2a:	2360      	movs	r3, #96	; 0x60
 8000e2c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000e2e:	2300      	movs	r3, #0
 8000e30:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000e32:	2300      	movs	r3, #0
 8000e34:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000e36:	2300      	movs	r3, #0
 8000e38:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000e3a:	1d3b      	adds	r3, r7, #4
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	4619      	mov	r1, r3
 8000e40:	4807      	ldr	r0, [pc, #28]	; (8000e60 <MX_TIM3_Init+0xe4>)
 8000e42:	f001 fc65 	bl	8002710 <HAL_TIM_PWM_ConfigChannel>
 8000e46:	4603      	mov	r3, r0
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d001      	beq.n	8000e50 <MX_TIM3_Init+0xd4>
  {
    Error_Handler();
 8000e4c:	f000 f8d0 	bl	8000ff0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000e50:	4803      	ldr	r0, [pc, #12]	; (8000e60 <MX_TIM3_Init+0xe4>)
 8000e52:	f000 f97d 	bl	8001150 <HAL_TIM_MspPostInit>

}
 8000e56:	bf00      	nop
 8000e58:	3738      	adds	r7, #56	; 0x38
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	bd80      	pop	{r7, pc}
 8000e5e:	bf00      	nop
 8000e60:	20000188 	.word	0x20000188
 8000e64:	40000400 	.word	0x40000400

08000e68 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000e6c:	4b11      	ldr	r3, [pc, #68]	; (8000eb4 <MX_USART2_UART_Init+0x4c>)
 8000e6e:	4a12      	ldr	r2, [pc, #72]	; (8000eb8 <MX_USART2_UART_Init+0x50>)
 8000e70:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000e72:	4b10      	ldr	r3, [pc, #64]	; (8000eb4 <MX_USART2_UART_Init+0x4c>)
 8000e74:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000e78:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000e7a:	4b0e      	ldr	r3, [pc, #56]	; (8000eb4 <MX_USART2_UART_Init+0x4c>)
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000e80:	4b0c      	ldr	r3, [pc, #48]	; (8000eb4 <MX_USART2_UART_Init+0x4c>)
 8000e82:	2200      	movs	r2, #0
 8000e84:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000e86:	4b0b      	ldr	r3, [pc, #44]	; (8000eb4 <MX_USART2_UART_Init+0x4c>)
 8000e88:	2200      	movs	r2, #0
 8000e8a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000e8c:	4b09      	ldr	r3, [pc, #36]	; (8000eb4 <MX_USART2_UART_Init+0x4c>)
 8000e8e:	220c      	movs	r2, #12
 8000e90:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e92:	4b08      	ldr	r3, [pc, #32]	; (8000eb4 <MX_USART2_UART_Init+0x4c>)
 8000e94:	2200      	movs	r2, #0
 8000e96:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e98:	4b06      	ldr	r3, [pc, #24]	; (8000eb4 <MX_USART2_UART_Init+0x4c>)
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000e9e:	4805      	ldr	r0, [pc, #20]	; (8000eb4 <MX_USART2_UART_Init+0x4c>)
 8000ea0:	f002 f8d4 	bl	800304c <HAL_UART_Init>
 8000ea4:	4603      	mov	r3, r0
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d001      	beq.n	8000eae <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000eaa:	f000 f8a1 	bl	8000ff0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000eae:	bf00      	nop
 8000eb0:	bd80      	pop	{r7, pc}
 8000eb2:	bf00      	nop
 8000eb4:	20000218 	.word	0x20000218
 8000eb8:	40004400 	.word	0x40004400

08000ebc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b086      	sub	sp, #24
 8000ec0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ec2:	f107 0308 	add.w	r3, r7, #8
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	601a      	str	r2, [r3, #0]
 8000eca:	605a      	str	r2, [r3, #4]
 8000ecc:	609a      	str	r2, [r3, #8]
 8000ece:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ed0:	4b2e      	ldr	r3, [pc, #184]	; (8000f8c <MX_GPIO_Init+0xd0>)
 8000ed2:	699b      	ldr	r3, [r3, #24]
 8000ed4:	4a2d      	ldr	r2, [pc, #180]	; (8000f8c <MX_GPIO_Init+0xd0>)
 8000ed6:	f043 0304 	orr.w	r3, r3, #4
 8000eda:	6193      	str	r3, [r2, #24]
 8000edc:	4b2b      	ldr	r3, [pc, #172]	; (8000f8c <MX_GPIO_Init+0xd0>)
 8000ede:	699b      	ldr	r3, [r3, #24]
 8000ee0:	f003 0304 	and.w	r3, r3, #4
 8000ee4:	607b      	str	r3, [r7, #4]
 8000ee6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ee8:	4b28      	ldr	r3, [pc, #160]	; (8000f8c <MX_GPIO_Init+0xd0>)
 8000eea:	699b      	ldr	r3, [r3, #24]
 8000eec:	4a27      	ldr	r2, [pc, #156]	; (8000f8c <MX_GPIO_Init+0xd0>)
 8000eee:	f043 0308 	orr.w	r3, r3, #8
 8000ef2:	6193      	str	r3, [r2, #24]
 8000ef4:	4b25      	ldr	r3, [pc, #148]	; (8000f8c <MX_GPIO_Init+0xd0>)
 8000ef6:	699b      	ldr	r3, [r3, #24]
 8000ef8:	f003 0308 	and.w	r3, r3, #8
 8000efc:	603b      	str	r3, [r7, #0]
 8000efe:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, D6_Pin|D3_Pin|D5_Pin|D4_Pin, GPIO_PIN_RESET);
 8000f00:	2200      	movs	r2, #0
 8000f02:	f44f 6187 	mov.w	r1, #1080	; 0x438
 8000f06:	4822      	ldr	r0, [pc, #136]	; (8000f90 <MX_GPIO_Init+0xd4>)
 8000f08:	f000 fda9 	bl	8001a5e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, D7_Pin|D2_Pin, GPIO_PIN_RESET);
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	f44f 61a0 	mov.w	r1, #1280	; 0x500
 8000f12:	4820      	ldr	r0, [pc, #128]	; (8000f94 <MX_GPIO_Init+0xd8>)
 8000f14:	f000 fda3 	bl	8001a5e <HAL_GPIO_WritePin>

  /*Configure GPIO pins : A0_Pin A1_Pin A2_Pin */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin;
 8000f18:	2313      	movs	r3, #19
 8000f1a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f20:	2301      	movs	r3, #1
 8000f22:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f24:	f107 0308 	add.w	r3, r7, #8
 8000f28:	4619      	mov	r1, r3
 8000f2a:	481a      	ldr	r0, [pc, #104]	; (8000f94 <MX_GPIO_Init+0xd8>)
 8000f2c:	f000 fbfc 	bl	8001728 <HAL_GPIO_Init>

  /*Configure GPIO pin : A3_Pin */
  GPIO_InitStruct.Pin = A3_Pin;
 8000f30:	2301      	movs	r3, #1
 8000f32:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f34:	2300      	movs	r3, #0
 8000f36:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f38:	2301      	movs	r3, #1
 8000f3a:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(A3_GPIO_Port, &GPIO_InitStruct);
 8000f3c:	f107 0308 	add.w	r3, r7, #8
 8000f40:	4619      	mov	r1, r3
 8000f42:	4813      	ldr	r0, [pc, #76]	; (8000f90 <MX_GPIO_Init+0xd4>)
 8000f44:	f000 fbf0 	bl	8001728 <HAL_GPIO_Init>

  /*Configure GPIO pins : D6_Pin D3_Pin D5_Pin D4_Pin */
  GPIO_InitStruct.Pin = D6_Pin|D3_Pin|D5_Pin|D4_Pin;
 8000f48:	f44f 6387 	mov.w	r3, #1080	; 0x438
 8000f4c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f4e:	2301      	movs	r3, #1
 8000f50:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f52:	2300      	movs	r3, #0
 8000f54:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f56:	2302      	movs	r3, #2
 8000f58:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f5a:	f107 0308 	add.w	r3, r7, #8
 8000f5e:	4619      	mov	r1, r3
 8000f60:	480b      	ldr	r0, [pc, #44]	; (8000f90 <MX_GPIO_Init+0xd4>)
 8000f62:	f000 fbe1 	bl	8001728 <HAL_GPIO_Init>

  /*Configure GPIO pins : D7_Pin D2_Pin */
  GPIO_InitStruct.Pin = D7_Pin|D2_Pin;
 8000f66:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 8000f6a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f6c:	2301      	movs	r3, #1
 8000f6e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f70:	2300      	movs	r3, #0
 8000f72:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f74:	2302      	movs	r3, #2
 8000f76:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f78:	f107 0308 	add.w	r3, r7, #8
 8000f7c:	4619      	mov	r1, r3
 8000f7e:	4805      	ldr	r0, [pc, #20]	; (8000f94 <MX_GPIO_Init+0xd8>)
 8000f80:	f000 fbd2 	bl	8001728 <HAL_GPIO_Init>

}
 8000f84:	bf00      	nop
 8000f86:	3718      	adds	r7, #24
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	bd80      	pop	{r7, pc}
 8000f8c:	40021000 	.word	0x40021000
 8000f90:	40010c00 	.word	0x40010c00
 8000f94:	40010800 	.word	0x40010800

08000f98 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b082      	sub	sp, #8
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */
//////
  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	4a11      	ldr	r2, [pc, #68]	; (8000fec <HAL_TIM_PeriodElapsedCallback+0x54>)
 8000fa6:	4293      	cmp	r3, r2
 8000fa8:	d101      	bne.n	8000fae <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000faa:	f000 fac1 	bl	8001530 <HAL_IncTick>
  }
  if (htim->Instance == TIM2) {
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000fb6:	d114      	bne.n	8000fe2 <HAL_TIM_PeriodElapsedCallback+0x4a>
      timerRun(0); // led duration
 8000fb8:	2000      	movs	r0, #0
 8000fba:	f000 f837 	bl	800102c <timerRun>
      timerRun(1); //  7-segment counter 1s
 8000fbe:	2001      	movs	r0, #1
 8000fc0:	f000 f834 	bl	800102c <timerRun>
      timerRun(3); // blinking led
 8000fc4:	2003      	movs	r0, #3
 8000fc6:	f000 f831 	bl	800102c <timerRun>
      getKeyInput(0);
 8000fca:	2000      	movs	r0, #0
 8000fcc:	f7ff f8e8 	bl	80001a0 <getKeyInput>
      getKeyInput(1);
 8000fd0:	2001      	movs	r0, #1
 8000fd2:	f7ff f8e5 	bl	80001a0 <getKeyInput>
      getKeyInput(2);
 8000fd6:	2002      	movs	r0, #2
 8000fd8:	f7ff f8e2 	bl	80001a0 <getKeyInput>
      getKeyInput(3);
 8000fdc:	2003      	movs	r0, #3
 8000fde:	f7ff f8df 	bl	80001a0 <getKeyInput>
  }
  /* USER CODE BEGIN Callback 1 */
//////
  /* USER CODE END Callback 1 */
}
 8000fe2:	bf00      	nop
 8000fe4:	3708      	adds	r7, #8
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	bd80      	pop	{r7, pc}
 8000fea:	bf00      	nop
 8000fec:	40012c00 	.word	0x40012c00

08000ff0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ff4:	b672      	cpsid	i
}
 8000ff6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ff8:	e7fe      	b.n	8000ff8 <Error_Handler+0x8>
	...

08000ffc <setTimer>:
#include "software_timer.h"

int timer_counter[10] = {0};
int timer_flag[10] = {0};

void setTimer(int duration, int timerId){
 8000ffc:	b480      	push	{r7}
 8000ffe:	b083      	sub	sp, #12
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]
 8001004:	6039      	str	r1, [r7, #0]
	timer_counter[timerId] = duration;
 8001006:	4907      	ldr	r1, [pc, #28]	; (8001024 <setTimer+0x28>)
 8001008:	683b      	ldr	r3, [r7, #0]
 800100a:	687a      	ldr	r2, [r7, #4]
 800100c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	timer_flag[timerId] = 0;
 8001010:	4a05      	ldr	r2, [pc, #20]	; (8001028 <setTimer+0x2c>)
 8001012:	683b      	ldr	r3, [r7, #0]
 8001014:	2100      	movs	r1, #0
 8001016:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 800101a:	bf00      	nop
 800101c:	370c      	adds	r7, #12
 800101e:	46bd      	mov	sp, r7
 8001020:	bc80      	pop	{r7}
 8001022:	4770      	bx	lr
 8001024:	20000120 	.word	0x20000120
 8001028:	20000148 	.word	0x20000148

0800102c <timerRun>:
void timerRun(int timerId){
 800102c:	b480      	push	{r7}
 800102e:	b083      	sub	sp, #12
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]
	if(timer_counter[timerId] > 0){
 8001034:	4a0f      	ldr	r2, [pc, #60]	; (8001074 <timerRun+0x48>)
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800103c:	2b00      	cmp	r3, #0
 800103e:	dd13      	ble.n	8001068 <timerRun+0x3c>
		timer_counter[timerId]--;
 8001040:	4a0c      	ldr	r2, [pc, #48]	; (8001074 <timerRun+0x48>)
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001048:	1e5a      	subs	r2, r3, #1
 800104a:	490a      	ldr	r1, [pc, #40]	; (8001074 <timerRun+0x48>)
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		if(timer_counter[timerId] <= 0){
 8001052:	4a08      	ldr	r2, [pc, #32]	; (8001074 <timerRun+0x48>)
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800105a:	2b00      	cmp	r3, #0
 800105c:	dc04      	bgt.n	8001068 <timerRun+0x3c>
			timer_flag[timerId] = 1;
 800105e:	4a06      	ldr	r2, [pc, #24]	; (8001078 <timerRun+0x4c>)
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	2101      	movs	r1, #1
 8001064:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		}
	}
}
 8001068:	bf00      	nop
 800106a:	370c      	adds	r7, #12
 800106c:	46bd      	mov	sp, r7
 800106e:	bc80      	pop	{r7}
 8001070:	4770      	bx	lr
 8001072:	bf00      	nop
 8001074:	20000120 	.word	0x20000120
 8001078:	20000148 	.word	0x20000148

0800107c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800107c:	b480      	push	{r7}
 800107e:	b085      	sub	sp, #20
 8001080:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001082:	4b15      	ldr	r3, [pc, #84]	; (80010d8 <HAL_MspInit+0x5c>)
 8001084:	699b      	ldr	r3, [r3, #24]
 8001086:	4a14      	ldr	r2, [pc, #80]	; (80010d8 <HAL_MspInit+0x5c>)
 8001088:	f043 0301 	orr.w	r3, r3, #1
 800108c:	6193      	str	r3, [r2, #24]
 800108e:	4b12      	ldr	r3, [pc, #72]	; (80010d8 <HAL_MspInit+0x5c>)
 8001090:	699b      	ldr	r3, [r3, #24]
 8001092:	f003 0301 	and.w	r3, r3, #1
 8001096:	60bb      	str	r3, [r7, #8]
 8001098:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800109a:	4b0f      	ldr	r3, [pc, #60]	; (80010d8 <HAL_MspInit+0x5c>)
 800109c:	69db      	ldr	r3, [r3, #28]
 800109e:	4a0e      	ldr	r2, [pc, #56]	; (80010d8 <HAL_MspInit+0x5c>)
 80010a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010a4:	61d3      	str	r3, [r2, #28]
 80010a6:	4b0c      	ldr	r3, [pc, #48]	; (80010d8 <HAL_MspInit+0x5c>)
 80010a8:	69db      	ldr	r3, [r3, #28]
 80010aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010ae:	607b      	str	r3, [r7, #4]
 80010b0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80010b2:	4b0a      	ldr	r3, [pc, #40]	; (80010dc <HAL_MspInit+0x60>)
 80010b4:	685b      	ldr	r3, [r3, #4]
 80010b6:	60fb      	str	r3, [r7, #12]
 80010b8:	68fb      	ldr	r3, [r7, #12]
 80010ba:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80010be:	60fb      	str	r3, [r7, #12]
 80010c0:	68fb      	ldr	r3, [r7, #12]
 80010c2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80010c6:	60fb      	str	r3, [r7, #12]
 80010c8:	4a04      	ldr	r2, [pc, #16]	; (80010dc <HAL_MspInit+0x60>)
 80010ca:	68fb      	ldr	r3, [r7, #12]
 80010cc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010ce:	bf00      	nop
 80010d0:	3714      	adds	r7, #20
 80010d2:	46bd      	mov	sp, r7
 80010d4:	bc80      	pop	{r7}
 80010d6:	4770      	bx	lr
 80010d8:	40021000 	.word	0x40021000
 80010dc:	40010000 	.word	0x40010000

080010e0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b084      	sub	sp, #16
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80010f0:	d114      	bne.n	800111c <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80010f2:	4b15      	ldr	r3, [pc, #84]	; (8001148 <HAL_TIM_Base_MspInit+0x68>)
 80010f4:	69db      	ldr	r3, [r3, #28]
 80010f6:	4a14      	ldr	r2, [pc, #80]	; (8001148 <HAL_TIM_Base_MspInit+0x68>)
 80010f8:	f043 0301 	orr.w	r3, r3, #1
 80010fc:	61d3      	str	r3, [r2, #28]
 80010fe:	4b12      	ldr	r3, [pc, #72]	; (8001148 <HAL_TIM_Base_MspInit+0x68>)
 8001100:	69db      	ldr	r3, [r3, #28]
 8001102:	f003 0301 	and.w	r3, r3, #1
 8001106:	60fb      	str	r3, [r7, #12]
 8001108:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800110a:	2200      	movs	r2, #0
 800110c:	2100      	movs	r1, #0
 800110e:	201c      	movs	r0, #28
 8001110:	f000 fadf 	bl	80016d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001114:	201c      	movs	r0, #28
 8001116:	f000 faf8 	bl	800170a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800111a:	e010      	b.n	800113e <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM3)
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	4a0a      	ldr	r2, [pc, #40]	; (800114c <HAL_TIM_Base_MspInit+0x6c>)
 8001122:	4293      	cmp	r3, r2
 8001124:	d10b      	bne.n	800113e <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001126:	4b08      	ldr	r3, [pc, #32]	; (8001148 <HAL_TIM_Base_MspInit+0x68>)
 8001128:	69db      	ldr	r3, [r3, #28]
 800112a:	4a07      	ldr	r2, [pc, #28]	; (8001148 <HAL_TIM_Base_MspInit+0x68>)
 800112c:	f043 0302 	orr.w	r3, r3, #2
 8001130:	61d3      	str	r3, [r2, #28]
 8001132:	4b05      	ldr	r3, [pc, #20]	; (8001148 <HAL_TIM_Base_MspInit+0x68>)
 8001134:	69db      	ldr	r3, [r3, #28]
 8001136:	f003 0302 	and.w	r3, r3, #2
 800113a:	60bb      	str	r3, [r7, #8]
 800113c:	68bb      	ldr	r3, [r7, #8]
}
 800113e:	bf00      	nop
 8001140:	3710      	adds	r7, #16
 8001142:	46bd      	mov	sp, r7
 8001144:	bd80      	pop	{r7, pc}
 8001146:	bf00      	nop
 8001148:	40021000 	.word	0x40021000
 800114c:	40000400 	.word	0x40000400

08001150 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b088      	sub	sp, #32
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001158:	f107 0310 	add.w	r3, r7, #16
 800115c:	2200      	movs	r2, #0
 800115e:	601a      	str	r2, [r3, #0]
 8001160:	605a      	str	r2, [r3, #4]
 8001162:	609a      	str	r2, [r3, #8]
 8001164:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM3)
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	4a0f      	ldr	r2, [pc, #60]	; (80011a8 <HAL_TIM_MspPostInit+0x58>)
 800116c:	4293      	cmp	r3, r2
 800116e:	d117      	bne.n	80011a0 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001170:	4b0e      	ldr	r3, [pc, #56]	; (80011ac <HAL_TIM_MspPostInit+0x5c>)
 8001172:	699b      	ldr	r3, [r3, #24]
 8001174:	4a0d      	ldr	r2, [pc, #52]	; (80011ac <HAL_TIM_MspPostInit+0x5c>)
 8001176:	f043 0304 	orr.w	r3, r3, #4
 800117a:	6193      	str	r3, [r2, #24]
 800117c:	4b0b      	ldr	r3, [pc, #44]	; (80011ac <HAL_TIM_MspPostInit+0x5c>)
 800117e:	699b      	ldr	r3, [r3, #24]
 8001180:	f003 0304 	and.w	r3, r3, #4
 8001184:	60fb      	str	r3, [r7, #12]
 8001186:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001188:	2340      	movs	r3, #64	; 0x40
 800118a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800118c:	2302      	movs	r3, #2
 800118e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001190:	2302      	movs	r3, #2
 8001192:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001194:	f107 0310 	add.w	r3, r7, #16
 8001198:	4619      	mov	r1, r3
 800119a:	4805      	ldr	r0, [pc, #20]	; (80011b0 <HAL_TIM_MspPostInit+0x60>)
 800119c:	f000 fac4 	bl	8001728 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80011a0:	bf00      	nop
 80011a2:	3720      	adds	r7, #32
 80011a4:	46bd      	mov	sp, r7
 80011a6:	bd80      	pop	{r7, pc}
 80011a8:	40000400 	.word	0x40000400
 80011ac:	40021000 	.word	0x40021000
 80011b0:	40010800 	.word	0x40010800

080011b4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b088      	sub	sp, #32
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011bc:	f107 0310 	add.w	r3, r7, #16
 80011c0:	2200      	movs	r2, #0
 80011c2:	601a      	str	r2, [r3, #0]
 80011c4:	605a      	str	r2, [r3, #4]
 80011c6:	609a      	str	r2, [r3, #8]
 80011c8:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	4a1b      	ldr	r2, [pc, #108]	; (800123c <HAL_UART_MspInit+0x88>)
 80011d0:	4293      	cmp	r3, r2
 80011d2:	d12f      	bne.n	8001234 <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80011d4:	4b1a      	ldr	r3, [pc, #104]	; (8001240 <HAL_UART_MspInit+0x8c>)
 80011d6:	69db      	ldr	r3, [r3, #28]
 80011d8:	4a19      	ldr	r2, [pc, #100]	; (8001240 <HAL_UART_MspInit+0x8c>)
 80011da:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80011de:	61d3      	str	r3, [r2, #28]
 80011e0:	4b17      	ldr	r3, [pc, #92]	; (8001240 <HAL_UART_MspInit+0x8c>)
 80011e2:	69db      	ldr	r3, [r3, #28]
 80011e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011e8:	60fb      	str	r3, [r7, #12]
 80011ea:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011ec:	4b14      	ldr	r3, [pc, #80]	; (8001240 <HAL_UART_MspInit+0x8c>)
 80011ee:	699b      	ldr	r3, [r3, #24]
 80011f0:	4a13      	ldr	r2, [pc, #76]	; (8001240 <HAL_UART_MspInit+0x8c>)
 80011f2:	f043 0304 	orr.w	r3, r3, #4
 80011f6:	6193      	str	r3, [r2, #24]
 80011f8:	4b11      	ldr	r3, [pc, #68]	; (8001240 <HAL_UART_MspInit+0x8c>)
 80011fa:	699b      	ldr	r3, [r3, #24]
 80011fc:	f003 0304 	and.w	r3, r3, #4
 8001200:	60bb      	str	r3, [r7, #8]
 8001202:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001204:	2304      	movs	r3, #4
 8001206:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001208:	2302      	movs	r3, #2
 800120a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800120c:	2303      	movs	r3, #3
 800120e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001210:	f107 0310 	add.w	r3, r7, #16
 8001214:	4619      	mov	r1, r3
 8001216:	480b      	ldr	r0, [pc, #44]	; (8001244 <HAL_UART_MspInit+0x90>)
 8001218:	f000 fa86 	bl	8001728 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800121c:	2308      	movs	r3, #8
 800121e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001220:	2300      	movs	r3, #0
 8001222:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001224:	2300      	movs	r3, #0
 8001226:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001228:	f107 0310 	add.w	r3, r7, #16
 800122c:	4619      	mov	r1, r3
 800122e:	4805      	ldr	r0, [pc, #20]	; (8001244 <HAL_UART_MspInit+0x90>)
 8001230:	f000 fa7a 	bl	8001728 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001234:	bf00      	nop
 8001236:	3720      	adds	r7, #32
 8001238:	46bd      	mov	sp, r7
 800123a:	bd80      	pop	{r7, pc}
 800123c:	40004400 	.word	0x40004400
 8001240:	40021000 	.word	0x40021000
 8001244:	40010800 	.word	0x40010800

08001248 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b08c      	sub	sp, #48	; 0x30
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001250:	2300      	movs	r3, #0
 8001252:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001254:	2300      	movs	r3, #0
 8001256:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0);
 8001258:	2200      	movs	r2, #0
 800125a:	6879      	ldr	r1, [r7, #4]
 800125c:	2019      	movs	r0, #25
 800125e:	f000 fa38 	bl	80016d2 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8001262:	2019      	movs	r0, #25
 8001264:	f000 fa51 	bl	800170a <HAL_NVIC_EnableIRQ>

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001268:	4b1e      	ldr	r3, [pc, #120]	; (80012e4 <HAL_InitTick+0x9c>)
 800126a:	699b      	ldr	r3, [r3, #24]
 800126c:	4a1d      	ldr	r2, [pc, #116]	; (80012e4 <HAL_InitTick+0x9c>)
 800126e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001272:	6193      	str	r3, [r2, #24]
 8001274:	4b1b      	ldr	r3, [pc, #108]	; (80012e4 <HAL_InitTick+0x9c>)
 8001276:	699b      	ldr	r3, [r3, #24]
 8001278:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800127c:	60fb      	str	r3, [r7, #12]
 800127e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001280:	f107 0210 	add.w	r2, r7, #16
 8001284:	f107 0314 	add.w	r3, r7, #20
 8001288:	4611      	mov	r1, r2
 800128a:	4618      	mov	r0, r3
 800128c:	f000 fff0 	bl	8002270 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001290:	f000 ffda 	bl	8002248 <HAL_RCC_GetPCLK2Freq>
 8001294:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001296:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001298:	4a13      	ldr	r2, [pc, #76]	; (80012e8 <HAL_InitTick+0xa0>)
 800129a:	fba2 2303 	umull	r2, r3, r2, r3
 800129e:	0c9b      	lsrs	r3, r3, #18
 80012a0:	3b01      	subs	r3, #1
 80012a2:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80012a4:	4b11      	ldr	r3, [pc, #68]	; (80012ec <HAL_InitTick+0xa4>)
 80012a6:	4a12      	ldr	r2, [pc, #72]	; (80012f0 <HAL_InitTick+0xa8>)
 80012a8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80012aa:	4b10      	ldr	r3, [pc, #64]	; (80012ec <HAL_InitTick+0xa4>)
 80012ac:	f240 32e7 	movw	r2, #999	; 0x3e7
 80012b0:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80012b2:	4a0e      	ldr	r2, [pc, #56]	; (80012ec <HAL_InitTick+0xa4>)
 80012b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012b6:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80012b8:	4b0c      	ldr	r3, [pc, #48]	; (80012ec <HAL_InitTick+0xa4>)
 80012ba:	2200      	movs	r2, #0
 80012bc:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012be:	4b0b      	ldr	r3, [pc, #44]	; (80012ec <HAL_InitTick+0xa4>)
 80012c0:	2200      	movs	r2, #0
 80012c2:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 80012c4:	4809      	ldr	r0, [pc, #36]	; (80012ec <HAL_InitTick+0xa4>)
 80012c6:	f001 f821 	bl	800230c <HAL_TIM_Base_Init>
 80012ca:	4603      	mov	r3, r0
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d104      	bne.n	80012da <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 80012d0:	4806      	ldr	r0, [pc, #24]	; (80012ec <HAL_InitTick+0xa4>)
 80012d2:	f001 f86b 	bl	80023ac <HAL_TIM_Base_Start_IT>
 80012d6:	4603      	mov	r3, r0
 80012d8:	e000      	b.n	80012dc <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 80012da:	2301      	movs	r3, #1
}
 80012dc:	4618      	mov	r0, r3
 80012de:	3730      	adds	r7, #48	; 0x30
 80012e0:	46bd      	mov	sp, r7
 80012e2:	bd80      	pop	{r7, pc}
 80012e4:	40021000 	.word	0x40021000
 80012e8:	431bde83 	.word	0x431bde83
 80012ec:	20000260 	.word	0x20000260
 80012f0:	40012c00 	.word	0x40012c00

080012f4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012f4:	b480      	push	{r7}
 80012f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80012f8:	e7fe      	b.n	80012f8 <NMI_Handler+0x4>

080012fa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012fa:	b480      	push	{r7}
 80012fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012fe:	e7fe      	b.n	80012fe <HardFault_Handler+0x4>

08001300 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001300:	b480      	push	{r7}
 8001302:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001304:	e7fe      	b.n	8001304 <MemManage_Handler+0x4>

08001306 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001306:	b480      	push	{r7}
 8001308:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800130a:	e7fe      	b.n	800130a <BusFault_Handler+0x4>

0800130c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800130c:	b480      	push	{r7}
 800130e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001310:	e7fe      	b.n	8001310 <UsageFault_Handler+0x4>

08001312 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001312:	b480      	push	{r7}
 8001314:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001316:	bf00      	nop
 8001318:	46bd      	mov	sp, r7
 800131a:	bc80      	pop	{r7}
 800131c:	4770      	bx	lr

0800131e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800131e:	b480      	push	{r7}
 8001320:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001322:	bf00      	nop
 8001324:	46bd      	mov	sp, r7
 8001326:	bc80      	pop	{r7}
 8001328:	4770      	bx	lr

0800132a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800132a:	b480      	push	{r7}
 800132c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800132e:	bf00      	nop
 8001330:	46bd      	mov	sp, r7
 8001332:	bc80      	pop	{r7}
 8001334:	4770      	bx	lr

08001336 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001336:	b480      	push	{r7}
 8001338:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800133a:	bf00      	nop
 800133c:	46bd      	mov	sp, r7
 800133e:	bc80      	pop	{r7}
 8001340:	4770      	bx	lr
	...

08001344 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001348:	4802      	ldr	r0, [pc, #8]	; (8001354 <TIM1_UP_IRQHandler+0x10>)
 800134a:	f001 f8d9 	bl	8002500 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 800134e:	bf00      	nop
 8001350:	bd80      	pop	{r7, pc}
 8001352:	bf00      	nop
 8001354:	20000260 	.word	0x20000260

08001358 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800135c:	4802      	ldr	r0, [pc, #8]	; (8001368 <TIM2_IRQHandler+0x10>)
 800135e:	f001 f8cf 	bl	8002500 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001362:	bf00      	nop
 8001364:	bd80      	pop	{r7, pc}
 8001366:	bf00      	nop
 8001368:	200001d0 	.word	0x200001d0

0800136c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	b086      	sub	sp, #24
 8001370:	af00      	add	r7, sp, #0
 8001372:	60f8      	str	r0, [r7, #12]
 8001374:	60b9      	str	r1, [r7, #8]
 8001376:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001378:	2300      	movs	r3, #0
 800137a:	617b      	str	r3, [r7, #20]
 800137c:	e00a      	b.n	8001394 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800137e:	f3af 8000 	nop.w
 8001382:	4601      	mov	r1, r0
 8001384:	68bb      	ldr	r3, [r7, #8]
 8001386:	1c5a      	adds	r2, r3, #1
 8001388:	60ba      	str	r2, [r7, #8]
 800138a:	b2ca      	uxtb	r2, r1
 800138c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800138e:	697b      	ldr	r3, [r7, #20]
 8001390:	3301      	adds	r3, #1
 8001392:	617b      	str	r3, [r7, #20]
 8001394:	697a      	ldr	r2, [r7, #20]
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	429a      	cmp	r2, r3
 800139a:	dbf0      	blt.n	800137e <_read+0x12>
	}

return len;
 800139c:	687b      	ldr	r3, [r7, #4]
}
 800139e:	4618      	mov	r0, r3
 80013a0:	3718      	adds	r7, #24
 80013a2:	46bd      	mov	sp, r7
 80013a4:	bd80      	pop	{r7, pc}

080013a6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80013a6:	b580      	push	{r7, lr}
 80013a8:	b086      	sub	sp, #24
 80013aa:	af00      	add	r7, sp, #0
 80013ac:	60f8      	str	r0, [r7, #12]
 80013ae:	60b9      	str	r1, [r7, #8]
 80013b0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013b2:	2300      	movs	r3, #0
 80013b4:	617b      	str	r3, [r7, #20]
 80013b6:	e009      	b.n	80013cc <_write+0x26>
	{
		__io_putchar(*ptr++);
 80013b8:	68bb      	ldr	r3, [r7, #8]
 80013ba:	1c5a      	adds	r2, r3, #1
 80013bc:	60ba      	str	r2, [r7, #8]
 80013be:	781b      	ldrb	r3, [r3, #0]
 80013c0:	4618      	mov	r0, r3
 80013c2:	f7ff fb25 	bl	8000a10 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013c6:	697b      	ldr	r3, [r7, #20]
 80013c8:	3301      	adds	r3, #1
 80013ca:	617b      	str	r3, [r7, #20]
 80013cc:	697a      	ldr	r2, [r7, #20]
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	429a      	cmp	r2, r3
 80013d2:	dbf1      	blt.n	80013b8 <_write+0x12>
	}
	return len;
 80013d4:	687b      	ldr	r3, [r7, #4]
}
 80013d6:	4618      	mov	r0, r3
 80013d8:	3718      	adds	r7, #24
 80013da:	46bd      	mov	sp, r7
 80013dc:	bd80      	pop	{r7, pc}

080013de <_close>:

int _close(int file)
{
 80013de:	b480      	push	{r7}
 80013e0:	b083      	sub	sp, #12
 80013e2:	af00      	add	r7, sp, #0
 80013e4:	6078      	str	r0, [r7, #4]
	return -1;
 80013e6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80013ea:	4618      	mov	r0, r3
 80013ec:	370c      	adds	r7, #12
 80013ee:	46bd      	mov	sp, r7
 80013f0:	bc80      	pop	{r7}
 80013f2:	4770      	bx	lr

080013f4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80013f4:	b480      	push	{r7}
 80013f6:	b083      	sub	sp, #12
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]
 80013fc:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80013fe:	683b      	ldr	r3, [r7, #0]
 8001400:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001404:	605a      	str	r2, [r3, #4]
	return 0;
 8001406:	2300      	movs	r3, #0
}
 8001408:	4618      	mov	r0, r3
 800140a:	370c      	adds	r7, #12
 800140c:	46bd      	mov	sp, r7
 800140e:	bc80      	pop	{r7}
 8001410:	4770      	bx	lr

08001412 <_isatty>:

int _isatty(int file)
{
 8001412:	b480      	push	{r7}
 8001414:	b083      	sub	sp, #12
 8001416:	af00      	add	r7, sp, #0
 8001418:	6078      	str	r0, [r7, #4]
	return 1;
 800141a:	2301      	movs	r3, #1
}
 800141c:	4618      	mov	r0, r3
 800141e:	370c      	adds	r7, #12
 8001420:	46bd      	mov	sp, r7
 8001422:	bc80      	pop	{r7}
 8001424:	4770      	bx	lr

08001426 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001426:	b480      	push	{r7}
 8001428:	b085      	sub	sp, #20
 800142a:	af00      	add	r7, sp, #0
 800142c:	60f8      	str	r0, [r7, #12]
 800142e:	60b9      	str	r1, [r7, #8]
 8001430:	607a      	str	r2, [r7, #4]
	return 0;
 8001432:	2300      	movs	r3, #0
}
 8001434:	4618      	mov	r0, r3
 8001436:	3714      	adds	r7, #20
 8001438:	46bd      	mov	sp, r7
 800143a:	bc80      	pop	{r7}
 800143c:	4770      	bx	lr
	...

08001440 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	b086      	sub	sp, #24
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001448:	4a14      	ldr	r2, [pc, #80]	; (800149c <_sbrk+0x5c>)
 800144a:	4b15      	ldr	r3, [pc, #84]	; (80014a0 <_sbrk+0x60>)
 800144c:	1ad3      	subs	r3, r2, r3
 800144e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001450:	697b      	ldr	r3, [r7, #20]
 8001452:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001454:	4b13      	ldr	r3, [pc, #76]	; (80014a4 <_sbrk+0x64>)
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	2b00      	cmp	r3, #0
 800145a:	d102      	bne.n	8001462 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800145c:	4b11      	ldr	r3, [pc, #68]	; (80014a4 <_sbrk+0x64>)
 800145e:	4a12      	ldr	r2, [pc, #72]	; (80014a8 <_sbrk+0x68>)
 8001460:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001462:	4b10      	ldr	r3, [pc, #64]	; (80014a4 <_sbrk+0x64>)
 8001464:	681a      	ldr	r2, [r3, #0]
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	4413      	add	r3, r2
 800146a:	693a      	ldr	r2, [r7, #16]
 800146c:	429a      	cmp	r2, r3
 800146e:	d207      	bcs.n	8001480 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001470:	f001 ffbc 	bl	80033ec <__errno>
 8001474:	4603      	mov	r3, r0
 8001476:	220c      	movs	r2, #12
 8001478:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800147a:	f04f 33ff 	mov.w	r3, #4294967295
 800147e:	e009      	b.n	8001494 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001480:	4b08      	ldr	r3, [pc, #32]	; (80014a4 <_sbrk+0x64>)
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001486:	4b07      	ldr	r3, [pc, #28]	; (80014a4 <_sbrk+0x64>)
 8001488:	681a      	ldr	r2, [r3, #0]
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	4413      	add	r3, r2
 800148e:	4a05      	ldr	r2, [pc, #20]	; (80014a4 <_sbrk+0x64>)
 8001490:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001492:	68fb      	ldr	r3, [r7, #12]
}
 8001494:	4618      	mov	r0, r3
 8001496:	3718      	adds	r7, #24
 8001498:	46bd      	mov	sp, r7
 800149a:	bd80      	pop	{r7, pc}
 800149c:	20005000 	.word	0x20005000
 80014a0:	00000400 	.word	0x00000400
 80014a4:	20000170 	.word	0x20000170
 80014a8:	200002c0 	.word	0x200002c0

080014ac <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80014ac:	b480      	push	{r7}
 80014ae:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80014b0:	bf00      	nop
 80014b2:	46bd      	mov	sp, r7
 80014b4:	bc80      	pop	{r7}
 80014b6:	4770      	bx	lr

080014b8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80014b8:	f7ff fff8 	bl	80014ac <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80014bc:	480b      	ldr	r0, [pc, #44]	; (80014ec <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80014be:	490c      	ldr	r1, [pc, #48]	; (80014f0 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80014c0:	4a0c      	ldr	r2, [pc, #48]	; (80014f4 <LoopFillZerobss+0x16>)
  movs r3, #0
 80014c2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80014c4:	e002      	b.n	80014cc <LoopCopyDataInit>

080014c6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80014c6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80014c8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80014ca:	3304      	adds	r3, #4

080014cc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80014cc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80014ce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80014d0:	d3f9      	bcc.n	80014c6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80014d2:	4a09      	ldr	r2, [pc, #36]	; (80014f8 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80014d4:	4c09      	ldr	r4, [pc, #36]	; (80014fc <LoopFillZerobss+0x1e>)
  movs r3, #0
 80014d6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80014d8:	e001      	b.n	80014de <LoopFillZerobss>

080014da <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80014da:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80014dc:	3204      	adds	r2, #4

080014de <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80014de:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80014e0:	d3fb      	bcc.n	80014da <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80014e2:	f001 ff89 	bl	80033f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80014e6:	f7ff fb9f 	bl	8000c28 <main>
  bx lr
 80014ea:	4770      	bx	lr
  ldr r0, =_sdata
 80014ec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80014f0:	200000e4 	.word	0x200000e4
  ldr r2, =_sidata
 80014f4:	0800444c 	.word	0x0800444c
  ldr r2, =_sbss
 80014f8:	200000e4 	.word	0x200000e4
  ldr r4, =_ebss
 80014fc:	200002bc 	.word	0x200002bc

08001500 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001500:	e7fe      	b.n	8001500 <ADC1_2_IRQHandler>
	...

08001504 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001508:	4b08      	ldr	r3, [pc, #32]	; (800152c <HAL_Init+0x28>)
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	4a07      	ldr	r2, [pc, #28]	; (800152c <HAL_Init+0x28>)
 800150e:	f043 0310 	orr.w	r3, r3, #16
 8001512:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001514:	2003      	movs	r0, #3
 8001516:	f000 f8d1 	bl	80016bc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800151a:	200f      	movs	r0, #15
 800151c:	f7ff fe94 	bl	8001248 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001520:	f7ff fdac 	bl	800107c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001524:	2300      	movs	r3, #0
}
 8001526:	4618      	mov	r0, r3
 8001528:	bd80      	pop	{r7, pc}
 800152a:	bf00      	nop
 800152c:	40022000 	.word	0x40022000

08001530 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001530:	b480      	push	{r7}
 8001532:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001534:	4b05      	ldr	r3, [pc, #20]	; (800154c <HAL_IncTick+0x1c>)
 8001536:	781b      	ldrb	r3, [r3, #0]
 8001538:	461a      	mov	r2, r3
 800153a:	4b05      	ldr	r3, [pc, #20]	; (8001550 <HAL_IncTick+0x20>)
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	4413      	add	r3, r2
 8001540:	4a03      	ldr	r2, [pc, #12]	; (8001550 <HAL_IncTick+0x20>)
 8001542:	6013      	str	r3, [r2, #0]
}
 8001544:	bf00      	nop
 8001546:	46bd      	mov	sp, r7
 8001548:	bc80      	pop	{r7}
 800154a:	4770      	bx	lr
 800154c:	2000007c 	.word	0x2000007c
 8001550:	200002a8 	.word	0x200002a8

08001554 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001554:	b480      	push	{r7}
 8001556:	af00      	add	r7, sp, #0
  return uwTick;
 8001558:	4b02      	ldr	r3, [pc, #8]	; (8001564 <HAL_GetTick+0x10>)
 800155a:	681b      	ldr	r3, [r3, #0]
}
 800155c:	4618      	mov	r0, r3
 800155e:	46bd      	mov	sp, r7
 8001560:	bc80      	pop	{r7}
 8001562:	4770      	bx	lr
 8001564:	200002a8 	.word	0x200002a8

08001568 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001568:	b480      	push	{r7}
 800156a:	b085      	sub	sp, #20
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	f003 0307 	and.w	r3, r3, #7
 8001576:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001578:	4b0c      	ldr	r3, [pc, #48]	; (80015ac <__NVIC_SetPriorityGrouping+0x44>)
 800157a:	68db      	ldr	r3, [r3, #12]
 800157c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800157e:	68ba      	ldr	r2, [r7, #8]
 8001580:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001584:	4013      	ands	r3, r2
 8001586:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800158c:	68bb      	ldr	r3, [r7, #8]
 800158e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001590:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001594:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001598:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800159a:	4a04      	ldr	r2, [pc, #16]	; (80015ac <__NVIC_SetPriorityGrouping+0x44>)
 800159c:	68bb      	ldr	r3, [r7, #8]
 800159e:	60d3      	str	r3, [r2, #12]
}
 80015a0:	bf00      	nop
 80015a2:	3714      	adds	r7, #20
 80015a4:	46bd      	mov	sp, r7
 80015a6:	bc80      	pop	{r7}
 80015a8:	4770      	bx	lr
 80015aa:	bf00      	nop
 80015ac:	e000ed00 	.word	0xe000ed00

080015b0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80015b0:	b480      	push	{r7}
 80015b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80015b4:	4b04      	ldr	r3, [pc, #16]	; (80015c8 <__NVIC_GetPriorityGrouping+0x18>)
 80015b6:	68db      	ldr	r3, [r3, #12]
 80015b8:	0a1b      	lsrs	r3, r3, #8
 80015ba:	f003 0307 	and.w	r3, r3, #7
}
 80015be:	4618      	mov	r0, r3
 80015c0:	46bd      	mov	sp, r7
 80015c2:	bc80      	pop	{r7}
 80015c4:	4770      	bx	lr
 80015c6:	bf00      	nop
 80015c8:	e000ed00 	.word	0xe000ed00

080015cc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015cc:	b480      	push	{r7}
 80015ce:	b083      	sub	sp, #12
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	4603      	mov	r3, r0
 80015d4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015da:	2b00      	cmp	r3, #0
 80015dc:	db0b      	blt.n	80015f6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80015de:	79fb      	ldrb	r3, [r7, #7]
 80015e0:	f003 021f 	and.w	r2, r3, #31
 80015e4:	4906      	ldr	r1, [pc, #24]	; (8001600 <__NVIC_EnableIRQ+0x34>)
 80015e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015ea:	095b      	lsrs	r3, r3, #5
 80015ec:	2001      	movs	r0, #1
 80015ee:	fa00 f202 	lsl.w	r2, r0, r2
 80015f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80015f6:	bf00      	nop
 80015f8:	370c      	adds	r7, #12
 80015fa:	46bd      	mov	sp, r7
 80015fc:	bc80      	pop	{r7}
 80015fe:	4770      	bx	lr
 8001600:	e000e100 	.word	0xe000e100

08001604 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001604:	b480      	push	{r7}
 8001606:	b083      	sub	sp, #12
 8001608:	af00      	add	r7, sp, #0
 800160a:	4603      	mov	r3, r0
 800160c:	6039      	str	r1, [r7, #0]
 800160e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001610:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001614:	2b00      	cmp	r3, #0
 8001616:	db0a      	blt.n	800162e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001618:	683b      	ldr	r3, [r7, #0]
 800161a:	b2da      	uxtb	r2, r3
 800161c:	490c      	ldr	r1, [pc, #48]	; (8001650 <__NVIC_SetPriority+0x4c>)
 800161e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001622:	0112      	lsls	r2, r2, #4
 8001624:	b2d2      	uxtb	r2, r2
 8001626:	440b      	add	r3, r1
 8001628:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800162c:	e00a      	b.n	8001644 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800162e:	683b      	ldr	r3, [r7, #0]
 8001630:	b2da      	uxtb	r2, r3
 8001632:	4908      	ldr	r1, [pc, #32]	; (8001654 <__NVIC_SetPriority+0x50>)
 8001634:	79fb      	ldrb	r3, [r7, #7]
 8001636:	f003 030f 	and.w	r3, r3, #15
 800163a:	3b04      	subs	r3, #4
 800163c:	0112      	lsls	r2, r2, #4
 800163e:	b2d2      	uxtb	r2, r2
 8001640:	440b      	add	r3, r1
 8001642:	761a      	strb	r2, [r3, #24]
}
 8001644:	bf00      	nop
 8001646:	370c      	adds	r7, #12
 8001648:	46bd      	mov	sp, r7
 800164a:	bc80      	pop	{r7}
 800164c:	4770      	bx	lr
 800164e:	bf00      	nop
 8001650:	e000e100 	.word	0xe000e100
 8001654:	e000ed00 	.word	0xe000ed00

08001658 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001658:	b480      	push	{r7}
 800165a:	b089      	sub	sp, #36	; 0x24
 800165c:	af00      	add	r7, sp, #0
 800165e:	60f8      	str	r0, [r7, #12]
 8001660:	60b9      	str	r1, [r7, #8]
 8001662:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	f003 0307 	and.w	r3, r3, #7
 800166a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800166c:	69fb      	ldr	r3, [r7, #28]
 800166e:	f1c3 0307 	rsb	r3, r3, #7
 8001672:	2b04      	cmp	r3, #4
 8001674:	bf28      	it	cs
 8001676:	2304      	movcs	r3, #4
 8001678:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800167a:	69fb      	ldr	r3, [r7, #28]
 800167c:	3304      	adds	r3, #4
 800167e:	2b06      	cmp	r3, #6
 8001680:	d902      	bls.n	8001688 <NVIC_EncodePriority+0x30>
 8001682:	69fb      	ldr	r3, [r7, #28]
 8001684:	3b03      	subs	r3, #3
 8001686:	e000      	b.n	800168a <NVIC_EncodePriority+0x32>
 8001688:	2300      	movs	r3, #0
 800168a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800168c:	f04f 32ff 	mov.w	r2, #4294967295
 8001690:	69bb      	ldr	r3, [r7, #24]
 8001692:	fa02 f303 	lsl.w	r3, r2, r3
 8001696:	43da      	mvns	r2, r3
 8001698:	68bb      	ldr	r3, [r7, #8]
 800169a:	401a      	ands	r2, r3
 800169c:	697b      	ldr	r3, [r7, #20]
 800169e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80016a0:	f04f 31ff 	mov.w	r1, #4294967295
 80016a4:	697b      	ldr	r3, [r7, #20]
 80016a6:	fa01 f303 	lsl.w	r3, r1, r3
 80016aa:	43d9      	mvns	r1, r3
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016b0:	4313      	orrs	r3, r2
         );
}
 80016b2:	4618      	mov	r0, r3
 80016b4:	3724      	adds	r7, #36	; 0x24
 80016b6:	46bd      	mov	sp, r7
 80016b8:	bc80      	pop	{r7}
 80016ba:	4770      	bx	lr

080016bc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	b082      	sub	sp, #8
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80016c4:	6878      	ldr	r0, [r7, #4]
 80016c6:	f7ff ff4f 	bl	8001568 <__NVIC_SetPriorityGrouping>
}
 80016ca:	bf00      	nop
 80016cc:	3708      	adds	r7, #8
 80016ce:	46bd      	mov	sp, r7
 80016d0:	bd80      	pop	{r7, pc}

080016d2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80016d2:	b580      	push	{r7, lr}
 80016d4:	b086      	sub	sp, #24
 80016d6:	af00      	add	r7, sp, #0
 80016d8:	4603      	mov	r3, r0
 80016da:	60b9      	str	r1, [r7, #8]
 80016dc:	607a      	str	r2, [r7, #4]
 80016de:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80016e0:	2300      	movs	r3, #0
 80016e2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80016e4:	f7ff ff64 	bl	80015b0 <__NVIC_GetPriorityGrouping>
 80016e8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80016ea:	687a      	ldr	r2, [r7, #4]
 80016ec:	68b9      	ldr	r1, [r7, #8]
 80016ee:	6978      	ldr	r0, [r7, #20]
 80016f0:	f7ff ffb2 	bl	8001658 <NVIC_EncodePriority>
 80016f4:	4602      	mov	r2, r0
 80016f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016fa:	4611      	mov	r1, r2
 80016fc:	4618      	mov	r0, r3
 80016fe:	f7ff ff81 	bl	8001604 <__NVIC_SetPriority>
}
 8001702:	bf00      	nop
 8001704:	3718      	adds	r7, #24
 8001706:	46bd      	mov	sp, r7
 8001708:	bd80      	pop	{r7, pc}

0800170a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800170a:	b580      	push	{r7, lr}
 800170c:	b082      	sub	sp, #8
 800170e:	af00      	add	r7, sp, #0
 8001710:	4603      	mov	r3, r0
 8001712:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001714:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001718:	4618      	mov	r0, r3
 800171a:	f7ff ff57 	bl	80015cc <__NVIC_EnableIRQ>
}
 800171e:	bf00      	nop
 8001720:	3708      	adds	r7, #8
 8001722:	46bd      	mov	sp, r7
 8001724:	bd80      	pop	{r7, pc}
	...

08001728 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001728:	b480      	push	{r7}
 800172a:	b08b      	sub	sp, #44	; 0x2c
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
 8001730:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001732:	2300      	movs	r3, #0
 8001734:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001736:	2300      	movs	r3, #0
 8001738:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800173a:	e169      	b.n	8001a10 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800173c:	2201      	movs	r2, #1
 800173e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001740:	fa02 f303 	lsl.w	r3, r2, r3
 8001744:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001746:	683b      	ldr	r3, [r7, #0]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	69fa      	ldr	r2, [r7, #28]
 800174c:	4013      	ands	r3, r2
 800174e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001750:	69ba      	ldr	r2, [r7, #24]
 8001752:	69fb      	ldr	r3, [r7, #28]
 8001754:	429a      	cmp	r2, r3
 8001756:	f040 8158 	bne.w	8001a0a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800175a:	683b      	ldr	r3, [r7, #0]
 800175c:	685b      	ldr	r3, [r3, #4]
 800175e:	4a9a      	ldr	r2, [pc, #616]	; (80019c8 <HAL_GPIO_Init+0x2a0>)
 8001760:	4293      	cmp	r3, r2
 8001762:	d05e      	beq.n	8001822 <HAL_GPIO_Init+0xfa>
 8001764:	4a98      	ldr	r2, [pc, #608]	; (80019c8 <HAL_GPIO_Init+0x2a0>)
 8001766:	4293      	cmp	r3, r2
 8001768:	d875      	bhi.n	8001856 <HAL_GPIO_Init+0x12e>
 800176a:	4a98      	ldr	r2, [pc, #608]	; (80019cc <HAL_GPIO_Init+0x2a4>)
 800176c:	4293      	cmp	r3, r2
 800176e:	d058      	beq.n	8001822 <HAL_GPIO_Init+0xfa>
 8001770:	4a96      	ldr	r2, [pc, #600]	; (80019cc <HAL_GPIO_Init+0x2a4>)
 8001772:	4293      	cmp	r3, r2
 8001774:	d86f      	bhi.n	8001856 <HAL_GPIO_Init+0x12e>
 8001776:	4a96      	ldr	r2, [pc, #600]	; (80019d0 <HAL_GPIO_Init+0x2a8>)
 8001778:	4293      	cmp	r3, r2
 800177a:	d052      	beq.n	8001822 <HAL_GPIO_Init+0xfa>
 800177c:	4a94      	ldr	r2, [pc, #592]	; (80019d0 <HAL_GPIO_Init+0x2a8>)
 800177e:	4293      	cmp	r3, r2
 8001780:	d869      	bhi.n	8001856 <HAL_GPIO_Init+0x12e>
 8001782:	4a94      	ldr	r2, [pc, #592]	; (80019d4 <HAL_GPIO_Init+0x2ac>)
 8001784:	4293      	cmp	r3, r2
 8001786:	d04c      	beq.n	8001822 <HAL_GPIO_Init+0xfa>
 8001788:	4a92      	ldr	r2, [pc, #584]	; (80019d4 <HAL_GPIO_Init+0x2ac>)
 800178a:	4293      	cmp	r3, r2
 800178c:	d863      	bhi.n	8001856 <HAL_GPIO_Init+0x12e>
 800178e:	4a92      	ldr	r2, [pc, #584]	; (80019d8 <HAL_GPIO_Init+0x2b0>)
 8001790:	4293      	cmp	r3, r2
 8001792:	d046      	beq.n	8001822 <HAL_GPIO_Init+0xfa>
 8001794:	4a90      	ldr	r2, [pc, #576]	; (80019d8 <HAL_GPIO_Init+0x2b0>)
 8001796:	4293      	cmp	r3, r2
 8001798:	d85d      	bhi.n	8001856 <HAL_GPIO_Init+0x12e>
 800179a:	2b12      	cmp	r3, #18
 800179c:	d82a      	bhi.n	80017f4 <HAL_GPIO_Init+0xcc>
 800179e:	2b12      	cmp	r3, #18
 80017a0:	d859      	bhi.n	8001856 <HAL_GPIO_Init+0x12e>
 80017a2:	a201      	add	r2, pc, #4	; (adr r2, 80017a8 <HAL_GPIO_Init+0x80>)
 80017a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017a8:	08001823 	.word	0x08001823
 80017ac:	080017fd 	.word	0x080017fd
 80017b0:	0800180f 	.word	0x0800180f
 80017b4:	08001851 	.word	0x08001851
 80017b8:	08001857 	.word	0x08001857
 80017bc:	08001857 	.word	0x08001857
 80017c0:	08001857 	.word	0x08001857
 80017c4:	08001857 	.word	0x08001857
 80017c8:	08001857 	.word	0x08001857
 80017cc:	08001857 	.word	0x08001857
 80017d0:	08001857 	.word	0x08001857
 80017d4:	08001857 	.word	0x08001857
 80017d8:	08001857 	.word	0x08001857
 80017dc:	08001857 	.word	0x08001857
 80017e0:	08001857 	.word	0x08001857
 80017e4:	08001857 	.word	0x08001857
 80017e8:	08001857 	.word	0x08001857
 80017ec:	08001805 	.word	0x08001805
 80017f0:	08001819 	.word	0x08001819
 80017f4:	4a79      	ldr	r2, [pc, #484]	; (80019dc <HAL_GPIO_Init+0x2b4>)
 80017f6:	4293      	cmp	r3, r2
 80017f8:	d013      	beq.n	8001822 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80017fa:	e02c      	b.n	8001856 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80017fc:	683b      	ldr	r3, [r7, #0]
 80017fe:	68db      	ldr	r3, [r3, #12]
 8001800:	623b      	str	r3, [r7, #32]
          break;
 8001802:	e029      	b.n	8001858 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001804:	683b      	ldr	r3, [r7, #0]
 8001806:	68db      	ldr	r3, [r3, #12]
 8001808:	3304      	adds	r3, #4
 800180a:	623b      	str	r3, [r7, #32]
          break;
 800180c:	e024      	b.n	8001858 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800180e:	683b      	ldr	r3, [r7, #0]
 8001810:	68db      	ldr	r3, [r3, #12]
 8001812:	3308      	adds	r3, #8
 8001814:	623b      	str	r3, [r7, #32]
          break;
 8001816:	e01f      	b.n	8001858 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001818:	683b      	ldr	r3, [r7, #0]
 800181a:	68db      	ldr	r3, [r3, #12]
 800181c:	330c      	adds	r3, #12
 800181e:	623b      	str	r3, [r7, #32]
          break;
 8001820:	e01a      	b.n	8001858 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001822:	683b      	ldr	r3, [r7, #0]
 8001824:	689b      	ldr	r3, [r3, #8]
 8001826:	2b00      	cmp	r3, #0
 8001828:	d102      	bne.n	8001830 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800182a:	2304      	movs	r3, #4
 800182c:	623b      	str	r3, [r7, #32]
          break;
 800182e:	e013      	b.n	8001858 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001830:	683b      	ldr	r3, [r7, #0]
 8001832:	689b      	ldr	r3, [r3, #8]
 8001834:	2b01      	cmp	r3, #1
 8001836:	d105      	bne.n	8001844 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001838:	2308      	movs	r3, #8
 800183a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	69fa      	ldr	r2, [r7, #28]
 8001840:	611a      	str	r2, [r3, #16]
          break;
 8001842:	e009      	b.n	8001858 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001844:	2308      	movs	r3, #8
 8001846:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	69fa      	ldr	r2, [r7, #28]
 800184c:	615a      	str	r2, [r3, #20]
          break;
 800184e:	e003      	b.n	8001858 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001850:	2300      	movs	r3, #0
 8001852:	623b      	str	r3, [r7, #32]
          break;
 8001854:	e000      	b.n	8001858 <HAL_GPIO_Init+0x130>
          break;
 8001856:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001858:	69bb      	ldr	r3, [r7, #24]
 800185a:	2bff      	cmp	r3, #255	; 0xff
 800185c:	d801      	bhi.n	8001862 <HAL_GPIO_Init+0x13a>
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	e001      	b.n	8001866 <HAL_GPIO_Init+0x13e>
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	3304      	adds	r3, #4
 8001866:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001868:	69bb      	ldr	r3, [r7, #24]
 800186a:	2bff      	cmp	r3, #255	; 0xff
 800186c:	d802      	bhi.n	8001874 <HAL_GPIO_Init+0x14c>
 800186e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001870:	009b      	lsls	r3, r3, #2
 8001872:	e002      	b.n	800187a <HAL_GPIO_Init+0x152>
 8001874:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001876:	3b08      	subs	r3, #8
 8001878:	009b      	lsls	r3, r3, #2
 800187a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800187c:	697b      	ldr	r3, [r7, #20]
 800187e:	681a      	ldr	r2, [r3, #0]
 8001880:	210f      	movs	r1, #15
 8001882:	693b      	ldr	r3, [r7, #16]
 8001884:	fa01 f303 	lsl.w	r3, r1, r3
 8001888:	43db      	mvns	r3, r3
 800188a:	401a      	ands	r2, r3
 800188c:	6a39      	ldr	r1, [r7, #32]
 800188e:	693b      	ldr	r3, [r7, #16]
 8001890:	fa01 f303 	lsl.w	r3, r1, r3
 8001894:	431a      	orrs	r2, r3
 8001896:	697b      	ldr	r3, [r7, #20]
 8001898:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800189a:	683b      	ldr	r3, [r7, #0]
 800189c:	685b      	ldr	r3, [r3, #4]
 800189e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	f000 80b1 	beq.w	8001a0a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80018a8:	4b4d      	ldr	r3, [pc, #308]	; (80019e0 <HAL_GPIO_Init+0x2b8>)
 80018aa:	699b      	ldr	r3, [r3, #24]
 80018ac:	4a4c      	ldr	r2, [pc, #304]	; (80019e0 <HAL_GPIO_Init+0x2b8>)
 80018ae:	f043 0301 	orr.w	r3, r3, #1
 80018b2:	6193      	str	r3, [r2, #24]
 80018b4:	4b4a      	ldr	r3, [pc, #296]	; (80019e0 <HAL_GPIO_Init+0x2b8>)
 80018b6:	699b      	ldr	r3, [r3, #24]
 80018b8:	f003 0301 	and.w	r3, r3, #1
 80018bc:	60bb      	str	r3, [r7, #8]
 80018be:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80018c0:	4a48      	ldr	r2, [pc, #288]	; (80019e4 <HAL_GPIO_Init+0x2bc>)
 80018c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018c4:	089b      	lsrs	r3, r3, #2
 80018c6:	3302      	adds	r3, #2
 80018c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018cc:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80018ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018d0:	f003 0303 	and.w	r3, r3, #3
 80018d4:	009b      	lsls	r3, r3, #2
 80018d6:	220f      	movs	r2, #15
 80018d8:	fa02 f303 	lsl.w	r3, r2, r3
 80018dc:	43db      	mvns	r3, r3
 80018de:	68fa      	ldr	r2, [r7, #12]
 80018e0:	4013      	ands	r3, r2
 80018e2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	4a40      	ldr	r2, [pc, #256]	; (80019e8 <HAL_GPIO_Init+0x2c0>)
 80018e8:	4293      	cmp	r3, r2
 80018ea:	d013      	beq.n	8001914 <HAL_GPIO_Init+0x1ec>
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	4a3f      	ldr	r2, [pc, #252]	; (80019ec <HAL_GPIO_Init+0x2c4>)
 80018f0:	4293      	cmp	r3, r2
 80018f2:	d00d      	beq.n	8001910 <HAL_GPIO_Init+0x1e8>
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	4a3e      	ldr	r2, [pc, #248]	; (80019f0 <HAL_GPIO_Init+0x2c8>)
 80018f8:	4293      	cmp	r3, r2
 80018fa:	d007      	beq.n	800190c <HAL_GPIO_Init+0x1e4>
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	4a3d      	ldr	r2, [pc, #244]	; (80019f4 <HAL_GPIO_Init+0x2cc>)
 8001900:	4293      	cmp	r3, r2
 8001902:	d101      	bne.n	8001908 <HAL_GPIO_Init+0x1e0>
 8001904:	2303      	movs	r3, #3
 8001906:	e006      	b.n	8001916 <HAL_GPIO_Init+0x1ee>
 8001908:	2304      	movs	r3, #4
 800190a:	e004      	b.n	8001916 <HAL_GPIO_Init+0x1ee>
 800190c:	2302      	movs	r3, #2
 800190e:	e002      	b.n	8001916 <HAL_GPIO_Init+0x1ee>
 8001910:	2301      	movs	r3, #1
 8001912:	e000      	b.n	8001916 <HAL_GPIO_Init+0x1ee>
 8001914:	2300      	movs	r3, #0
 8001916:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001918:	f002 0203 	and.w	r2, r2, #3
 800191c:	0092      	lsls	r2, r2, #2
 800191e:	4093      	lsls	r3, r2
 8001920:	68fa      	ldr	r2, [r7, #12]
 8001922:	4313      	orrs	r3, r2
 8001924:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001926:	492f      	ldr	r1, [pc, #188]	; (80019e4 <HAL_GPIO_Init+0x2bc>)
 8001928:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800192a:	089b      	lsrs	r3, r3, #2
 800192c:	3302      	adds	r3, #2
 800192e:	68fa      	ldr	r2, [r7, #12]
 8001930:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001934:	683b      	ldr	r3, [r7, #0]
 8001936:	685b      	ldr	r3, [r3, #4]
 8001938:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800193c:	2b00      	cmp	r3, #0
 800193e:	d006      	beq.n	800194e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001940:	4b2d      	ldr	r3, [pc, #180]	; (80019f8 <HAL_GPIO_Init+0x2d0>)
 8001942:	689a      	ldr	r2, [r3, #8]
 8001944:	492c      	ldr	r1, [pc, #176]	; (80019f8 <HAL_GPIO_Init+0x2d0>)
 8001946:	69bb      	ldr	r3, [r7, #24]
 8001948:	4313      	orrs	r3, r2
 800194a:	608b      	str	r3, [r1, #8]
 800194c:	e006      	b.n	800195c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800194e:	4b2a      	ldr	r3, [pc, #168]	; (80019f8 <HAL_GPIO_Init+0x2d0>)
 8001950:	689a      	ldr	r2, [r3, #8]
 8001952:	69bb      	ldr	r3, [r7, #24]
 8001954:	43db      	mvns	r3, r3
 8001956:	4928      	ldr	r1, [pc, #160]	; (80019f8 <HAL_GPIO_Init+0x2d0>)
 8001958:	4013      	ands	r3, r2
 800195a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800195c:	683b      	ldr	r3, [r7, #0]
 800195e:	685b      	ldr	r3, [r3, #4]
 8001960:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001964:	2b00      	cmp	r3, #0
 8001966:	d006      	beq.n	8001976 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001968:	4b23      	ldr	r3, [pc, #140]	; (80019f8 <HAL_GPIO_Init+0x2d0>)
 800196a:	68da      	ldr	r2, [r3, #12]
 800196c:	4922      	ldr	r1, [pc, #136]	; (80019f8 <HAL_GPIO_Init+0x2d0>)
 800196e:	69bb      	ldr	r3, [r7, #24]
 8001970:	4313      	orrs	r3, r2
 8001972:	60cb      	str	r3, [r1, #12]
 8001974:	e006      	b.n	8001984 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001976:	4b20      	ldr	r3, [pc, #128]	; (80019f8 <HAL_GPIO_Init+0x2d0>)
 8001978:	68da      	ldr	r2, [r3, #12]
 800197a:	69bb      	ldr	r3, [r7, #24]
 800197c:	43db      	mvns	r3, r3
 800197e:	491e      	ldr	r1, [pc, #120]	; (80019f8 <HAL_GPIO_Init+0x2d0>)
 8001980:	4013      	ands	r3, r2
 8001982:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001984:	683b      	ldr	r3, [r7, #0]
 8001986:	685b      	ldr	r3, [r3, #4]
 8001988:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800198c:	2b00      	cmp	r3, #0
 800198e:	d006      	beq.n	800199e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001990:	4b19      	ldr	r3, [pc, #100]	; (80019f8 <HAL_GPIO_Init+0x2d0>)
 8001992:	685a      	ldr	r2, [r3, #4]
 8001994:	4918      	ldr	r1, [pc, #96]	; (80019f8 <HAL_GPIO_Init+0x2d0>)
 8001996:	69bb      	ldr	r3, [r7, #24]
 8001998:	4313      	orrs	r3, r2
 800199a:	604b      	str	r3, [r1, #4]
 800199c:	e006      	b.n	80019ac <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800199e:	4b16      	ldr	r3, [pc, #88]	; (80019f8 <HAL_GPIO_Init+0x2d0>)
 80019a0:	685a      	ldr	r2, [r3, #4]
 80019a2:	69bb      	ldr	r3, [r7, #24]
 80019a4:	43db      	mvns	r3, r3
 80019a6:	4914      	ldr	r1, [pc, #80]	; (80019f8 <HAL_GPIO_Init+0x2d0>)
 80019a8:	4013      	ands	r3, r2
 80019aa:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80019ac:	683b      	ldr	r3, [r7, #0]
 80019ae:	685b      	ldr	r3, [r3, #4]
 80019b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d021      	beq.n	80019fc <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80019b8:	4b0f      	ldr	r3, [pc, #60]	; (80019f8 <HAL_GPIO_Init+0x2d0>)
 80019ba:	681a      	ldr	r2, [r3, #0]
 80019bc:	490e      	ldr	r1, [pc, #56]	; (80019f8 <HAL_GPIO_Init+0x2d0>)
 80019be:	69bb      	ldr	r3, [r7, #24]
 80019c0:	4313      	orrs	r3, r2
 80019c2:	600b      	str	r3, [r1, #0]
 80019c4:	e021      	b.n	8001a0a <HAL_GPIO_Init+0x2e2>
 80019c6:	bf00      	nop
 80019c8:	10320000 	.word	0x10320000
 80019cc:	10310000 	.word	0x10310000
 80019d0:	10220000 	.word	0x10220000
 80019d4:	10210000 	.word	0x10210000
 80019d8:	10120000 	.word	0x10120000
 80019dc:	10110000 	.word	0x10110000
 80019e0:	40021000 	.word	0x40021000
 80019e4:	40010000 	.word	0x40010000
 80019e8:	40010800 	.word	0x40010800
 80019ec:	40010c00 	.word	0x40010c00
 80019f0:	40011000 	.word	0x40011000
 80019f4:	40011400 	.word	0x40011400
 80019f8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80019fc:	4b0b      	ldr	r3, [pc, #44]	; (8001a2c <HAL_GPIO_Init+0x304>)
 80019fe:	681a      	ldr	r2, [r3, #0]
 8001a00:	69bb      	ldr	r3, [r7, #24]
 8001a02:	43db      	mvns	r3, r3
 8001a04:	4909      	ldr	r1, [pc, #36]	; (8001a2c <HAL_GPIO_Init+0x304>)
 8001a06:	4013      	ands	r3, r2
 8001a08:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001a0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a0c:	3301      	adds	r3, #1
 8001a0e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a10:	683b      	ldr	r3, [r7, #0]
 8001a12:	681a      	ldr	r2, [r3, #0]
 8001a14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a16:	fa22 f303 	lsr.w	r3, r2, r3
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	f47f ae8e 	bne.w	800173c <HAL_GPIO_Init+0x14>
  }
}
 8001a20:	bf00      	nop
 8001a22:	bf00      	nop
 8001a24:	372c      	adds	r7, #44	; 0x2c
 8001a26:	46bd      	mov	sp, r7
 8001a28:	bc80      	pop	{r7}
 8001a2a:	4770      	bx	lr
 8001a2c:	40010400 	.word	0x40010400

08001a30 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001a30:	b480      	push	{r7}
 8001a32:	b085      	sub	sp, #20
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]
 8001a38:	460b      	mov	r3, r1
 8001a3a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	689a      	ldr	r2, [r3, #8]
 8001a40:	887b      	ldrh	r3, [r7, #2]
 8001a42:	4013      	ands	r3, r2
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d002      	beq.n	8001a4e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001a48:	2301      	movs	r3, #1
 8001a4a:	73fb      	strb	r3, [r7, #15]
 8001a4c:	e001      	b.n	8001a52 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001a4e:	2300      	movs	r3, #0
 8001a50:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001a52:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a54:	4618      	mov	r0, r3
 8001a56:	3714      	adds	r7, #20
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	bc80      	pop	{r7}
 8001a5c:	4770      	bx	lr

08001a5e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a5e:	b480      	push	{r7}
 8001a60:	b083      	sub	sp, #12
 8001a62:	af00      	add	r7, sp, #0
 8001a64:	6078      	str	r0, [r7, #4]
 8001a66:	460b      	mov	r3, r1
 8001a68:	807b      	strh	r3, [r7, #2]
 8001a6a:	4613      	mov	r3, r2
 8001a6c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001a6e:	787b      	ldrb	r3, [r7, #1]
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d003      	beq.n	8001a7c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001a74:	887a      	ldrh	r2, [r7, #2]
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001a7a:	e003      	b.n	8001a84 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001a7c:	887b      	ldrh	r3, [r7, #2]
 8001a7e:	041a      	lsls	r2, r3, #16
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	611a      	str	r2, [r3, #16]
}
 8001a84:	bf00      	nop
 8001a86:	370c      	adds	r7, #12
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	bc80      	pop	{r7}
 8001a8c:	4770      	bx	lr
	...

08001a90 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	b086      	sub	sp, #24
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d101      	bne.n	8001aa2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001a9e:	2301      	movs	r3, #1
 8001aa0:	e26c      	b.n	8001f7c <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	f003 0301 	and.w	r3, r3, #1
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	f000 8087 	beq.w	8001bbe <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001ab0:	4b92      	ldr	r3, [pc, #584]	; (8001cfc <HAL_RCC_OscConfig+0x26c>)
 8001ab2:	685b      	ldr	r3, [r3, #4]
 8001ab4:	f003 030c 	and.w	r3, r3, #12
 8001ab8:	2b04      	cmp	r3, #4
 8001aba:	d00c      	beq.n	8001ad6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001abc:	4b8f      	ldr	r3, [pc, #572]	; (8001cfc <HAL_RCC_OscConfig+0x26c>)
 8001abe:	685b      	ldr	r3, [r3, #4]
 8001ac0:	f003 030c 	and.w	r3, r3, #12
 8001ac4:	2b08      	cmp	r3, #8
 8001ac6:	d112      	bne.n	8001aee <HAL_RCC_OscConfig+0x5e>
 8001ac8:	4b8c      	ldr	r3, [pc, #560]	; (8001cfc <HAL_RCC_OscConfig+0x26c>)
 8001aca:	685b      	ldr	r3, [r3, #4]
 8001acc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ad0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ad4:	d10b      	bne.n	8001aee <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ad6:	4b89      	ldr	r3, [pc, #548]	; (8001cfc <HAL_RCC_OscConfig+0x26c>)
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d06c      	beq.n	8001bbc <HAL_RCC_OscConfig+0x12c>
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	685b      	ldr	r3, [r3, #4]
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d168      	bne.n	8001bbc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001aea:	2301      	movs	r3, #1
 8001aec:	e246      	b.n	8001f7c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	685b      	ldr	r3, [r3, #4]
 8001af2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001af6:	d106      	bne.n	8001b06 <HAL_RCC_OscConfig+0x76>
 8001af8:	4b80      	ldr	r3, [pc, #512]	; (8001cfc <HAL_RCC_OscConfig+0x26c>)
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	4a7f      	ldr	r2, [pc, #508]	; (8001cfc <HAL_RCC_OscConfig+0x26c>)
 8001afe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b02:	6013      	str	r3, [r2, #0]
 8001b04:	e02e      	b.n	8001b64 <HAL_RCC_OscConfig+0xd4>
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	685b      	ldr	r3, [r3, #4]
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d10c      	bne.n	8001b28 <HAL_RCC_OscConfig+0x98>
 8001b0e:	4b7b      	ldr	r3, [pc, #492]	; (8001cfc <HAL_RCC_OscConfig+0x26c>)
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	4a7a      	ldr	r2, [pc, #488]	; (8001cfc <HAL_RCC_OscConfig+0x26c>)
 8001b14:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b18:	6013      	str	r3, [r2, #0]
 8001b1a:	4b78      	ldr	r3, [pc, #480]	; (8001cfc <HAL_RCC_OscConfig+0x26c>)
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	4a77      	ldr	r2, [pc, #476]	; (8001cfc <HAL_RCC_OscConfig+0x26c>)
 8001b20:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b24:	6013      	str	r3, [r2, #0]
 8001b26:	e01d      	b.n	8001b64 <HAL_RCC_OscConfig+0xd4>
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	685b      	ldr	r3, [r3, #4]
 8001b2c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001b30:	d10c      	bne.n	8001b4c <HAL_RCC_OscConfig+0xbc>
 8001b32:	4b72      	ldr	r3, [pc, #456]	; (8001cfc <HAL_RCC_OscConfig+0x26c>)
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	4a71      	ldr	r2, [pc, #452]	; (8001cfc <HAL_RCC_OscConfig+0x26c>)
 8001b38:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b3c:	6013      	str	r3, [r2, #0]
 8001b3e:	4b6f      	ldr	r3, [pc, #444]	; (8001cfc <HAL_RCC_OscConfig+0x26c>)
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	4a6e      	ldr	r2, [pc, #440]	; (8001cfc <HAL_RCC_OscConfig+0x26c>)
 8001b44:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b48:	6013      	str	r3, [r2, #0]
 8001b4a:	e00b      	b.n	8001b64 <HAL_RCC_OscConfig+0xd4>
 8001b4c:	4b6b      	ldr	r3, [pc, #428]	; (8001cfc <HAL_RCC_OscConfig+0x26c>)
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	4a6a      	ldr	r2, [pc, #424]	; (8001cfc <HAL_RCC_OscConfig+0x26c>)
 8001b52:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b56:	6013      	str	r3, [r2, #0]
 8001b58:	4b68      	ldr	r3, [pc, #416]	; (8001cfc <HAL_RCC_OscConfig+0x26c>)
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	4a67      	ldr	r2, [pc, #412]	; (8001cfc <HAL_RCC_OscConfig+0x26c>)
 8001b5e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b62:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	685b      	ldr	r3, [r3, #4]
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d013      	beq.n	8001b94 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b6c:	f7ff fcf2 	bl	8001554 <HAL_GetTick>
 8001b70:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b72:	e008      	b.n	8001b86 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b74:	f7ff fcee 	bl	8001554 <HAL_GetTick>
 8001b78:	4602      	mov	r2, r0
 8001b7a:	693b      	ldr	r3, [r7, #16]
 8001b7c:	1ad3      	subs	r3, r2, r3
 8001b7e:	2b64      	cmp	r3, #100	; 0x64
 8001b80:	d901      	bls.n	8001b86 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001b82:	2303      	movs	r3, #3
 8001b84:	e1fa      	b.n	8001f7c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b86:	4b5d      	ldr	r3, [pc, #372]	; (8001cfc <HAL_RCC_OscConfig+0x26c>)
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d0f0      	beq.n	8001b74 <HAL_RCC_OscConfig+0xe4>
 8001b92:	e014      	b.n	8001bbe <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b94:	f7ff fcde 	bl	8001554 <HAL_GetTick>
 8001b98:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b9a:	e008      	b.n	8001bae <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b9c:	f7ff fcda 	bl	8001554 <HAL_GetTick>
 8001ba0:	4602      	mov	r2, r0
 8001ba2:	693b      	ldr	r3, [r7, #16]
 8001ba4:	1ad3      	subs	r3, r2, r3
 8001ba6:	2b64      	cmp	r3, #100	; 0x64
 8001ba8:	d901      	bls.n	8001bae <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001baa:	2303      	movs	r3, #3
 8001bac:	e1e6      	b.n	8001f7c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001bae:	4b53      	ldr	r3, [pc, #332]	; (8001cfc <HAL_RCC_OscConfig+0x26c>)
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d1f0      	bne.n	8001b9c <HAL_RCC_OscConfig+0x10c>
 8001bba:	e000      	b.n	8001bbe <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001bbc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	f003 0302 	and.w	r3, r3, #2
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d063      	beq.n	8001c92 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001bca:	4b4c      	ldr	r3, [pc, #304]	; (8001cfc <HAL_RCC_OscConfig+0x26c>)
 8001bcc:	685b      	ldr	r3, [r3, #4]
 8001bce:	f003 030c 	and.w	r3, r3, #12
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d00b      	beq.n	8001bee <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001bd6:	4b49      	ldr	r3, [pc, #292]	; (8001cfc <HAL_RCC_OscConfig+0x26c>)
 8001bd8:	685b      	ldr	r3, [r3, #4]
 8001bda:	f003 030c 	and.w	r3, r3, #12
 8001bde:	2b08      	cmp	r3, #8
 8001be0:	d11c      	bne.n	8001c1c <HAL_RCC_OscConfig+0x18c>
 8001be2:	4b46      	ldr	r3, [pc, #280]	; (8001cfc <HAL_RCC_OscConfig+0x26c>)
 8001be4:	685b      	ldr	r3, [r3, #4]
 8001be6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d116      	bne.n	8001c1c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001bee:	4b43      	ldr	r3, [pc, #268]	; (8001cfc <HAL_RCC_OscConfig+0x26c>)
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	f003 0302 	and.w	r3, r3, #2
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d005      	beq.n	8001c06 <HAL_RCC_OscConfig+0x176>
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	691b      	ldr	r3, [r3, #16]
 8001bfe:	2b01      	cmp	r3, #1
 8001c00:	d001      	beq.n	8001c06 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001c02:	2301      	movs	r3, #1
 8001c04:	e1ba      	b.n	8001f7c <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c06:	4b3d      	ldr	r3, [pc, #244]	; (8001cfc <HAL_RCC_OscConfig+0x26c>)
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	695b      	ldr	r3, [r3, #20]
 8001c12:	00db      	lsls	r3, r3, #3
 8001c14:	4939      	ldr	r1, [pc, #228]	; (8001cfc <HAL_RCC_OscConfig+0x26c>)
 8001c16:	4313      	orrs	r3, r2
 8001c18:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c1a:	e03a      	b.n	8001c92 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	691b      	ldr	r3, [r3, #16]
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d020      	beq.n	8001c66 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001c24:	4b36      	ldr	r3, [pc, #216]	; (8001d00 <HAL_RCC_OscConfig+0x270>)
 8001c26:	2201      	movs	r2, #1
 8001c28:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c2a:	f7ff fc93 	bl	8001554 <HAL_GetTick>
 8001c2e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c30:	e008      	b.n	8001c44 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c32:	f7ff fc8f 	bl	8001554 <HAL_GetTick>
 8001c36:	4602      	mov	r2, r0
 8001c38:	693b      	ldr	r3, [r7, #16]
 8001c3a:	1ad3      	subs	r3, r2, r3
 8001c3c:	2b02      	cmp	r3, #2
 8001c3e:	d901      	bls.n	8001c44 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001c40:	2303      	movs	r3, #3
 8001c42:	e19b      	b.n	8001f7c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c44:	4b2d      	ldr	r3, [pc, #180]	; (8001cfc <HAL_RCC_OscConfig+0x26c>)
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	f003 0302 	and.w	r3, r3, #2
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d0f0      	beq.n	8001c32 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c50:	4b2a      	ldr	r3, [pc, #168]	; (8001cfc <HAL_RCC_OscConfig+0x26c>)
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	695b      	ldr	r3, [r3, #20]
 8001c5c:	00db      	lsls	r3, r3, #3
 8001c5e:	4927      	ldr	r1, [pc, #156]	; (8001cfc <HAL_RCC_OscConfig+0x26c>)
 8001c60:	4313      	orrs	r3, r2
 8001c62:	600b      	str	r3, [r1, #0]
 8001c64:	e015      	b.n	8001c92 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c66:	4b26      	ldr	r3, [pc, #152]	; (8001d00 <HAL_RCC_OscConfig+0x270>)
 8001c68:	2200      	movs	r2, #0
 8001c6a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c6c:	f7ff fc72 	bl	8001554 <HAL_GetTick>
 8001c70:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c72:	e008      	b.n	8001c86 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c74:	f7ff fc6e 	bl	8001554 <HAL_GetTick>
 8001c78:	4602      	mov	r2, r0
 8001c7a:	693b      	ldr	r3, [r7, #16]
 8001c7c:	1ad3      	subs	r3, r2, r3
 8001c7e:	2b02      	cmp	r3, #2
 8001c80:	d901      	bls.n	8001c86 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001c82:	2303      	movs	r3, #3
 8001c84:	e17a      	b.n	8001f7c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c86:	4b1d      	ldr	r3, [pc, #116]	; (8001cfc <HAL_RCC_OscConfig+0x26c>)
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	f003 0302 	and.w	r3, r3, #2
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d1f0      	bne.n	8001c74 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	f003 0308 	and.w	r3, r3, #8
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d03a      	beq.n	8001d14 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	699b      	ldr	r3, [r3, #24]
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d019      	beq.n	8001cda <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001ca6:	4b17      	ldr	r3, [pc, #92]	; (8001d04 <HAL_RCC_OscConfig+0x274>)
 8001ca8:	2201      	movs	r2, #1
 8001caa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001cac:	f7ff fc52 	bl	8001554 <HAL_GetTick>
 8001cb0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001cb2:	e008      	b.n	8001cc6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001cb4:	f7ff fc4e 	bl	8001554 <HAL_GetTick>
 8001cb8:	4602      	mov	r2, r0
 8001cba:	693b      	ldr	r3, [r7, #16]
 8001cbc:	1ad3      	subs	r3, r2, r3
 8001cbe:	2b02      	cmp	r3, #2
 8001cc0:	d901      	bls.n	8001cc6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001cc2:	2303      	movs	r3, #3
 8001cc4:	e15a      	b.n	8001f7c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001cc6:	4b0d      	ldr	r3, [pc, #52]	; (8001cfc <HAL_RCC_OscConfig+0x26c>)
 8001cc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cca:	f003 0302 	and.w	r3, r3, #2
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d0f0      	beq.n	8001cb4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001cd2:	2001      	movs	r0, #1
 8001cd4:	f000 fafc 	bl	80022d0 <RCC_Delay>
 8001cd8:	e01c      	b.n	8001d14 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001cda:	4b0a      	ldr	r3, [pc, #40]	; (8001d04 <HAL_RCC_OscConfig+0x274>)
 8001cdc:	2200      	movs	r2, #0
 8001cde:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ce0:	f7ff fc38 	bl	8001554 <HAL_GetTick>
 8001ce4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ce6:	e00f      	b.n	8001d08 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ce8:	f7ff fc34 	bl	8001554 <HAL_GetTick>
 8001cec:	4602      	mov	r2, r0
 8001cee:	693b      	ldr	r3, [r7, #16]
 8001cf0:	1ad3      	subs	r3, r2, r3
 8001cf2:	2b02      	cmp	r3, #2
 8001cf4:	d908      	bls.n	8001d08 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001cf6:	2303      	movs	r3, #3
 8001cf8:	e140      	b.n	8001f7c <HAL_RCC_OscConfig+0x4ec>
 8001cfa:	bf00      	nop
 8001cfc:	40021000 	.word	0x40021000
 8001d00:	42420000 	.word	0x42420000
 8001d04:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d08:	4b9e      	ldr	r3, [pc, #632]	; (8001f84 <HAL_RCC_OscConfig+0x4f4>)
 8001d0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d0c:	f003 0302 	and.w	r3, r3, #2
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d1e9      	bne.n	8001ce8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	f003 0304 	and.w	r3, r3, #4
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	f000 80a6 	beq.w	8001e6e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d22:	2300      	movs	r3, #0
 8001d24:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d26:	4b97      	ldr	r3, [pc, #604]	; (8001f84 <HAL_RCC_OscConfig+0x4f4>)
 8001d28:	69db      	ldr	r3, [r3, #28]
 8001d2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d10d      	bne.n	8001d4e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d32:	4b94      	ldr	r3, [pc, #592]	; (8001f84 <HAL_RCC_OscConfig+0x4f4>)
 8001d34:	69db      	ldr	r3, [r3, #28]
 8001d36:	4a93      	ldr	r2, [pc, #588]	; (8001f84 <HAL_RCC_OscConfig+0x4f4>)
 8001d38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d3c:	61d3      	str	r3, [r2, #28]
 8001d3e:	4b91      	ldr	r3, [pc, #580]	; (8001f84 <HAL_RCC_OscConfig+0x4f4>)
 8001d40:	69db      	ldr	r3, [r3, #28]
 8001d42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d46:	60bb      	str	r3, [r7, #8]
 8001d48:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001d4a:	2301      	movs	r3, #1
 8001d4c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d4e:	4b8e      	ldr	r3, [pc, #568]	; (8001f88 <HAL_RCC_OscConfig+0x4f8>)
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d118      	bne.n	8001d8c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001d5a:	4b8b      	ldr	r3, [pc, #556]	; (8001f88 <HAL_RCC_OscConfig+0x4f8>)
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	4a8a      	ldr	r2, [pc, #552]	; (8001f88 <HAL_RCC_OscConfig+0x4f8>)
 8001d60:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d64:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d66:	f7ff fbf5 	bl	8001554 <HAL_GetTick>
 8001d6a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d6c:	e008      	b.n	8001d80 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d6e:	f7ff fbf1 	bl	8001554 <HAL_GetTick>
 8001d72:	4602      	mov	r2, r0
 8001d74:	693b      	ldr	r3, [r7, #16]
 8001d76:	1ad3      	subs	r3, r2, r3
 8001d78:	2b64      	cmp	r3, #100	; 0x64
 8001d7a:	d901      	bls.n	8001d80 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001d7c:	2303      	movs	r3, #3
 8001d7e:	e0fd      	b.n	8001f7c <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d80:	4b81      	ldr	r3, [pc, #516]	; (8001f88 <HAL_RCC_OscConfig+0x4f8>)
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d0f0      	beq.n	8001d6e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	68db      	ldr	r3, [r3, #12]
 8001d90:	2b01      	cmp	r3, #1
 8001d92:	d106      	bne.n	8001da2 <HAL_RCC_OscConfig+0x312>
 8001d94:	4b7b      	ldr	r3, [pc, #492]	; (8001f84 <HAL_RCC_OscConfig+0x4f4>)
 8001d96:	6a1b      	ldr	r3, [r3, #32]
 8001d98:	4a7a      	ldr	r2, [pc, #488]	; (8001f84 <HAL_RCC_OscConfig+0x4f4>)
 8001d9a:	f043 0301 	orr.w	r3, r3, #1
 8001d9e:	6213      	str	r3, [r2, #32]
 8001da0:	e02d      	b.n	8001dfe <HAL_RCC_OscConfig+0x36e>
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	68db      	ldr	r3, [r3, #12]
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d10c      	bne.n	8001dc4 <HAL_RCC_OscConfig+0x334>
 8001daa:	4b76      	ldr	r3, [pc, #472]	; (8001f84 <HAL_RCC_OscConfig+0x4f4>)
 8001dac:	6a1b      	ldr	r3, [r3, #32]
 8001dae:	4a75      	ldr	r2, [pc, #468]	; (8001f84 <HAL_RCC_OscConfig+0x4f4>)
 8001db0:	f023 0301 	bic.w	r3, r3, #1
 8001db4:	6213      	str	r3, [r2, #32]
 8001db6:	4b73      	ldr	r3, [pc, #460]	; (8001f84 <HAL_RCC_OscConfig+0x4f4>)
 8001db8:	6a1b      	ldr	r3, [r3, #32]
 8001dba:	4a72      	ldr	r2, [pc, #456]	; (8001f84 <HAL_RCC_OscConfig+0x4f4>)
 8001dbc:	f023 0304 	bic.w	r3, r3, #4
 8001dc0:	6213      	str	r3, [r2, #32]
 8001dc2:	e01c      	b.n	8001dfe <HAL_RCC_OscConfig+0x36e>
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	68db      	ldr	r3, [r3, #12]
 8001dc8:	2b05      	cmp	r3, #5
 8001dca:	d10c      	bne.n	8001de6 <HAL_RCC_OscConfig+0x356>
 8001dcc:	4b6d      	ldr	r3, [pc, #436]	; (8001f84 <HAL_RCC_OscConfig+0x4f4>)
 8001dce:	6a1b      	ldr	r3, [r3, #32]
 8001dd0:	4a6c      	ldr	r2, [pc, #432]	; (8001f84 <HAL_RCC_OscConfig+0x4f4>)
 8001dd2:	f043 0304 	orr.w	r3, r3, #4
 8001dd6:	6213      	str	r3, [r2, #32]
 8001dd8:	4b6a      	ldr	r3, [pc, #424]	; (8001f84 <HAL_RCC_OscConfig+0x4f4>)
 8001dda:	6a1b      	ldr	r3, [r3, #32]
 8001ddc:	4a69      	ldr	r2, [pc, #420]	; (8001f84 <HAL_RCC_OscConfig+0x4f4>)
 8001dde:	f043 0301 	orr.w	r3, r3, #1
 8001de2:	6213      	str	r3, [r2, #32]
 8001de4:	e00b      	b.n	8001dfe <HAL_RCC_OscConfig+0x36e>
 8001de6:	4b67      	ldr	r3, [pc, #412]	; (8001f84 <HAL_RCC_OscConfig+0x4f4>)
 8001de8:	6a1b      	ldr	r3, [r3, #32]
 8001dea:	4a66      	ldr	r2, [pc, #408]	; (8001f84 <HAL_RCC_OscConfig+0x4f4>)
 8001dec:	f023 0301 	bic.w	r3, r3, #1
 8001df0:	6213      	str	r3, [r2, #32]
 8001df2:	4b64      	ldr	r3, [pc, #400]	; (8001f84 <HAL_RCC_OscConfig+0x4f4>)
 8001df4:	6a1b      	ldr	r3, [r3, #32]
 8001df6:	4a63      	ldr	r2, [pc, #396]	; (8001f84 <HAL_RCC_OscConfig+0x4f4>)
 8001df8:	f023 0304 	bic.w	r3, r3, #4
 8001dfc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	68db      	ldr	r3, [r3, #12]
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d015      	beq.n	8001e32 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e06:	f7ff fba5 	bl	8001554 <HAL_GetTick>
 8001e0a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e0c:	e00a      	b.n	8001e24 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e0e:	f7ff fba1 	bl	8001554 <HAL_GetTick>
 8001e12:	4602      	mov	r2, r0
 8001e14:	693b      	ldr	r3, [r7, #16]
 8001e16:	1ad3      	subs	r3, r2, r3
 8001e18:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e1c:	4293      	cmp	r3, r2
 8001e1e:	d901      	bls.n	8001e24 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001e20:	2303      	movs	r3, #3
 8001e22:	e0ab      	b.n	8001f7c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e24:	4b57      	ldr	r3, [pc, #348]	; (8001f84 <HAL_RCC_OscConfig+0x4f4>)
 8001e26:	6a1b      	ldr	r3, [r3, #32]
 8001e28:	f003 0302 	and.w	r3, r3, #2
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d0ee      	beq.n	8001e0e <HAL_RCC_OscConfig+0x37e>
 8001e30:	e014      	b.n	8001e5c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e32:	f7ff fb8f 	bl	8001554 <HAL_GetTick>
 8001e36:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e38:	e00a      	b.n	8001e50 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e3a:	f7ff fb8b 	bl	8001554 <HAL_GetTick>
 8001e3e:	4602      	mov	r2, r0
 8001e40:	693b      	ldr	r3, [r7, #16]
 8001e42:	1ad3      	subs	r3, r2, r3
 8001e44:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e48:	4293      	cmp	r3, r2
 8001e4a:	d901      	bls.n	8001e50 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001e4c:	2303      	movs	r3, #3
 8001e4e:	e095      	b.n	8001f7c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e50:	4b4c      	ldr	r3, [pc, #304]	; (8001f84 <HAL_RCC_OscConfig+0x4f4>)
 8001e52:	6a1b      	ldr	r3, [r3, #32]
 8001e54:	f003 0302 	and.w	r3, r3, #2
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d1ee      	bne.n	8001e3a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001e5c:	7dfb      	ldrb	r3, [r7, #23]
 8001e5e:	2b01      	cmp	r3, #1
 8001e60:	d105      	bne.n	8001e6e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e62:	4b48      	ldr	r3, [pc, #288]	; (8001f84 <HAL_RCC_OscConfig+0x4f4>)
 8001e64:	69db      	ldr	r3, [r3, #28]
 8001e66:	4a47      	ldr	r2, [pc, #284]	; (8001f84 <HAL_RCC_OscConfig+0x4f4>)
 8001e68:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001e6c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	69db      	ldr	r3, [r3, #28]
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	f000 8081 	beq.w	8001f7a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001e78:	4b42      	ldr	r3, [pc, #264]	; (8001f84 <HAL_RCC_OscConfig+0x4f4>)
 8001e7a:	685b      	ldr	r3, [r3, #4]
 8001e7c:	f003 030c 	and.w	r3, r3, #12
 8001e80:	2b08      	cmp	r3, #8
 8001e82:	d061      	beq.n	8001f48 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	69db      	ldr	r3, [r3, #28]
 8001e88:	2b02      	cmp	r3, #2
 8001e8a:	d146      	bne.n	8001f1a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e8c:	4b3f      	ldr	r3, [pc, #252]	; (8001f8c <HAL_RCC_OscConfig+0x4fc>)
 8001e8e:	2200      	movs	r2, #0
 8001e90:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e92:	f7ff fb5f 	bl	8001554 <HAL_GetTick>
 8001e96:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e98:	e008      	b.n	8001eac <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e9a:	f7ff fb5b 	bl	8001554 <HAL_GetTick>
 8001e9e:	4602      	mov	r2, r0
 8001ea0:	693b      	ldr	r3, [r7, #16]
 8001ea2:	1ad3      	subs	r3, r2, r3
 8001ea4:	2b02      	cmp	r3, #2
 8001ea6:	d901      	bls.n	8001eac <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001ea8:	2303      	movs	r3, #3
 8001eaa:	e067      	b.n	8001f7c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001eac:	4b35      	ldr	r3, [pc, #212]	; (8001f84 <HAL_RCC_OscConfig+0x4f4>)
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d1f0      	bne.n	8001e9a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	6a1b      	ldr	r3, [r3, #32]
 8001ebc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ec0:	d108      	bne.n	8001ed4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001ec2:	4b30      	ldr	r3, [pc, #192]	; (8001f84 <HAL_RCC_OscConfig+0x4f4>)
 8001ec4:	685b      	ldr	r3, [r3, #4]
 8001ec6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	689b      	ldr	r3, [r3, #8]
 8001ece:	492d      	ldr	r1, [pc, #180]	; (8001f84 <HAL_RCC_OscConfig+0x4f4>)
 8001ed0:	4313      	orrs	r3, r2
 8001ed2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001ed4:	4b2b      	ldr	r3, [pc, #172]	; (8001f84 <HAL_RCC_OscConfig+0x4f4>)
 8001ed6:	685b      	ldr	r3, [r3, #4]
 8001ed8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	6a19      	ldr	r1, [r3, #32]
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ee4:	430b      	orrs	r3, r1
 8001ee6:	4927      	ldr	r1, [pc, #156]	; (8001f84 <HAL_RCC_OscConfig+0x4f4>)
 8001ee8:	4313      	orrs	r3, r2
 8001eea:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001eec:	4b27      	ldr	r3, [pc, #156]	; (8001f8c <HAL_RCC_OscConfig+0x4fc>)
 8001eee:	2201      	movs	r2, #1
 8001ef0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ef2:	f7ff fb2f 	bl	8001554 <HAL_GetTick>
 8001ef6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001ef8:	e008      	b.n	8001f0c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001efa:	f7ff fb2b 	bl	8001554 <HAL_GetTick>
 8001efe:	4602      	mov	r2, r0
 8001f00:	693b      	ldr	r3, [r7, #16]
 8001f02:	1ad3      	subs	r3, r2, r3
 8001f04:	2b02      	cmp	r3, #2
 8001f06:	d901      	bls.n	8001f0c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001f08:	2303      	movs	r3, #3
 8001f0a:	e037      	b.n	8001f7c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001f0c:	4b1d      	ldr	r3, [pc, #116]	; (8001f84 <HAL_RCC_OscConfig+0x4f4>)
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d0f0      	beq.n	8001efa <HAL_RCC_OscConfig+0x46a>
 8001f18:	e02f      	b.n	8001f7a <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f1a:	4b1c      	ldr	r3, [pc, #112]	; (8001f8c <HAL_RCC_OscConfig+0x4fc>)
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f20:	f7ff fb18 	bl	8001554 <HAL_GetTick>
 8001f24:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f26:	e008      	b.n	8001f3a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f28:	f7ff fb14 	bl	8001554 <HAL_GetTick>
 8001f2c:	4602      	mov	r2, r0
 8001f2e:	693b      	ldr	r3, [r7, #16]
 8001f30:	1ad3      	subs	r3, r2, r3
 8001f32:	2b02      	cmp	r3, #2
 8001f34:	d901      	bls.n	8001f3a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001f36:	2303      	movs	r3, #3
 8001f38:	e020      	b.n	8001f7c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f3a:	4b12      	ldr	r3, [pc, #72]	; (8001f84 <HAL_RCC_OscConfig+0x4f4>)
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d1f0      	bne.n	8001f28 <HAL_RCC_OscConfig+0x498>
 8001f46:	e018      	b.n	8001f7a <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	69db      	ldr	r3, [r3, #28]
 8001f4c:	2b01      	cmp	r3, #1
 8001f4e:	d101      	bne.n	8001f54 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001f50:	2301      	movs	r3, #1
 8001f52:	e013      	b.n	8001f7c <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001f54:	4b0b      	ldr	r3, [pc, #44]	; (8001f84 <HAL_RCC_OscConfig+0x4f4>)
 8001f56:	685b      	ldr	r3, [r3, #4]
 8001f58:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	6a1b      	ldr	r3, [r3, #32]
 8001f64:	429a      	cmp	r2, r3
 8001f66:	d106      	bne.n	8001f76 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f72:	429a      	cmp	r2, r3
 8001f74:	d001      	beq.n	8001f7a <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001f76:	2301      	movs	r3, #1
 8001f78:	e000      	b.n	8001f7c <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001f7a:	2300      	movs	r3, #0
}
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	3718      	adds	r7, #24
 8001f80:	46bd      	mov	sp, r7
 8001f82:	bd80      	pop	{r7, pc}
 8001f84:	40021000 	.word	0x40021000
 8001f88:	40007000 	.word	0x40007000
 8001f8c:	42420060 	.word	0x42420060

08001f90 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	b084      	sub	sp, #16
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]
 8001f98:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d101      	bne.n	8001fa4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001fa0:	2301      	movs	r3, #1
 8001fa2:	e0d0      	b.n	8002146 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001fa4:	4b6a      	ldr	r3, [pc, #424]	; (8002150 <HAL_RCC_ClockConfig+0x1c0>)
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	f003 0307 	and.w	r3, r3, #7
 8001fac:	683a      	ldr	r2, [r7, #0]
 8001fae:	429a      	cmp	r2, r3
 8001fb0:	d910      	bls.n	8001fd4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fb2:	4b67      	ldr	r3, [pc, #412]	; (8002150 <HAL_RCC_ClockConfig+0x1c0>)
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f023 0207 	bic.w	r2, r3, #7
 8001fba:	4965      	ldr	r1, [pc, #404]	; (8002150 <HAL_RCC_ClockConfig+0x1c0>)
 8001fbc:	683b      	ldr	r3, [r7, #0]
 8001fbe:	4313      	orrs	r3, r2
 8001fc0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fc2:	4b63      	ldr	r3, [pc, #396]	; (8002150 <HAL_RCC_ClockConfig+0x1c0>)
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	f003 0307 	and.w	r3, r3, #7
 8001fca:	683a      	ldr	r2, [r7, #0]
 8001fcc:	429a      	cmp	r2, r3
 8001fce:	d001      	beq.n	8001fd4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001fd0:	2301      	movs	r3, #1
 8001fd2:	e0b8      	b.n	8002146 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	f003 0302 	and.w	r3, r3, #2
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d020      	beq.n	8002022 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	f003 0304 	and.w	r3, r3, #4
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d005      	beq.n	8001ff8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001fec:	4b59      	ldr	r3, [pc, #356]	; (8002154 <HAL_RCC_ClockConfig+0x1c4>)
 8001fee:	685b      	ldr	r3, [r3, #4]
 8001ff0:	4a58      	ldr	r2, [pc, #352]	; (8002154 <HAL_RCC_ClockConfig+0x1c4>)
 8001ff2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001ff6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	f003 0308 	and.w	r3, r3, #8
 8002000:	2b00      	cmp	r3, #0
 8002002:	d005      	beq.n	8002010 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002004:	4b53      	ldr	r3, [pc, #332]	; (8002154 <HAL_RCC_ClockConfig+0x1c4>)
 8002006:	685b      	ldr	r3, [r3, #4]
 8002008:	4a52      	ldr	r2, [pc, #328]	; (8002154 <HAL_RCC_ClockConfig+0x1c4>)
 800200a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800200e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002010:	4b50      	ldr	r3, [pc, #320]	; (8002154 <HAL_RCC_ClockConfig+0x1c4>)
 8002012:	685b      	ldr	r3, [r3, #4]
 8002014:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	689b      	ldr	r3, [r3, #8]
 800201c:	494d      	ldr	r1, [pc, #308]	; (8002154 <HAL_RCC_ClockConfig+0x1c4>)
 800201e:	4313      	orrs	r3, r2
 8002020:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	f003 0301 	and.w	r3, r3, #1
 800202a:	2b00      	cmp	r3, #0
 800202c:	d040      	beq.n	80020b0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	685b      	ldr	r3, [r3, #4]
 8002032:	2b01      	cmp	r3, #1
 8002034:	d107      	bne.n	8002046 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002036:	4b47      	ldr	r3, [pc, #284]	; (8002154 <HAL_RCC_ClockConfig+0x1c4>)
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800203e:	2b00      	cmp	r3, #0
 8002040:	d115      	bne.n	800206e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002042:	2301      	movs	r3, #1
 8002044:	e07f      	b.n	8002146 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	685b      	ldr	r3, [r3, #4]
 800204a:	2b02      	cmp	r3, #2
 800204c:	d107      	bne.n	800205e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800204e:	4b41      	ldr	r3, [pc, #260]	; (8002154 <HAL_RCC_ClockConfig+0x1c4>)
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002056:	2b00      	cmp	r3, #0
 8002058:	d109      	bne.n	800206e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800205a:	2301      	movs	r3, #1
 800205c:	e073      	b.n	8002146 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800205e:	4b3d      	ldr	r3, [pc, #244]	; (8002154 <HAL_RCC_ClockConfig+0x1c4>)
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f003 0302 	and.w	r3, r3, #2
 8002066:	2b00      	cmp	r3, #0
 8002068:	d101      	bne.n	800206e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800206a:	2301      	movs	r3, #1
 800206c:	e06b      	b.n	8002146 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800206e:	4b39      	ldr	r3, [pc, #228]	; (8002154 <HAL_RCC_ClockConfig+0x1c4>)
 8002070:	685b      	ldr	r3, [r3, #4]
 8002072:	f023 0203 	bic.w	r2, r3, #3
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	685b      	ldr	r3, [r3, #4]
 800207a:	4936      	ldr	r1, [pc, #216]	; (8002154 <HAL_RCC_ClockConfig+0x1c4>)
 800207c:	4313      	orrs	r3, r2
 800207e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002080:	f7ff fa68 	bl	8001554 <HAL_GetTick>
 8002084:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002086:	e00a      	b.n	800209e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002088:	f7ff fa64 	bl	8001554 <HAL_GetTick>
 800208c:	4602      	mov	r2, r0
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	1ad3      	subs	r3, r2, r3
 8002092:	f241 3288 	movw	r2, #5000	; 0x1388
 8002096:	4293      	cmp	r3, r2
 8002098:	d901      	bls.n	800209e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800209a:	2303      	movs	r3, #3
 800209c:	e053      	b.n	8002146 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800209e:	4b2d      	ldr	r3, [pc, #180]	; (8002154 <HAL_RCC_ClockConfig+0x1c4>)
 80020a0:	685b      	ldr	r3, [r3, #4]
 80020a2:	f003 020c 	and.w	r2, r3, #12
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	685b      	ldr	r3, [r3, #4]
 80020aa:	009b      	lsls	r3, r3, #2
 80020ac:	429a      	cmp	r2, r3
 80020ae:	d1eb      	bne.n	8002088 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80020b0:	4b27      	ldr	r3, [pc, #156]	; (8002150 <HAL_RCC_ClockConfig+0x1c0>)
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	f003 0307 	and.w	r3, r3, #7
 80020b8:	683a      	ldr	r2, [r7, #0]
 80020ba:	429a      	cmp	r2, r3
 80020bc:	d210      	bcs.n	80020e0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020be:	4b24      	ldr	r3, [pc, #144]	; (8002150 <HAL_RCC_ClockConfig+0x1c0>)
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f023 0207 	bic.w	r2, r3, #7
 80020c6:	4922      	ldr	r1, [pc, #136]	; (8002150 <HAL_RCC_ClockConfig+0x1c0>)
 80020c8:	683b      	ldr	r3, [r7, #0]
 80020ca:	4313      	orrs	r3, r2
 80020cc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80020ce:	4b20      	ldr	r3, [pc, #128]	; (8002150 <HAL_RCC_ClockConfig+0x1c0>)
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f003 0307 	and.w	r3, r3, #7
 80020d6:	683a      	ldr	r2, [r7, #0]
 80020d8:	429a      	cmp	r2, r3
 80020da:	d001      	beq.n	80020e0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80020dc:	2301      	movs	r3, #1
 80020de:	e032      	b.n	8002146 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	f003 0304 	and.w	r3, r3, #4
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d008      	beq.n	80020fe <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80020ec:	4b19      	ldr	r3, [pc, #100]	; (8002154 <HAL_RCC_ClockConfig+0x1c4>)
 80020ee:	685b      	ldr	r3, [r3, #4]
 80020f0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	68db      	ldr	r3, [r3, #12]
 80020f8:	4916      	ldr	r1, [pc, #88]	; (8002154 <HAL_RCC_ClockConfig+0x1c4>)
 80020fa:	4313      	orrs	r3, r2
 80020fc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f003 0308 	and.w	r3, r3, #8
 8002106:	2b00      	cmp	r3, #0
 8002108:	d009      	beq.n	800211e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800210a:	4b12      	ldr	r3, [pc, #72]	; (8002154 <HAL_RCC_ClockConfig+0x1c4>)
 800210c:	685b      	ldr	r3, [r3, #4]
 800210e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	691b      	ldr	r3, [r3, #16]
 8002116:	00db      	lsls	r3, r3, #3
 8002118:	490e      	ldr	r1, [pc, #56]	; (8002154 <HAL_RCC_ClockConfig+0x1c4>)
 800211a:	4313      	orrs	r3, r2
 800211c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800211e:	f000 f821 	bl	8002164 <HAL_RCC_GetSysClockFreq>
 8002122:	4602      	mov	r2, r0
 8002124:	4b0b      	ldr	r3, [pc, #44]	; (8002154 <HAL_RCC_ClockConfig+0x1c4>)
 8002126:	685b      	ldr	r3, [r3, #4]
 8002128:	091b      	lsrs	r3, r3, #4
 800212a:	f003 030f 	and.w	r3, r3, #15
 800212e:	490a      	ldr	r1, [pc, #40]	; (8002158 <HAL_RCC_ClockConfig+0x1c8>)
 8002130:	5ccb      	ldrb	r3, [r1, r3]
 8002132:	fa22 f303 	lsr.w	r3, r2, r3
 8002136:	4a09      	ldr	r2, [pc, #36]	; (800215c <HAL_RCC_ClockConfig+0x1cc>)
 8002138:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800213a:	4b09      	ldr	r3, [pc, #36]	; (8002160 <HAL_RCC_ClockConfig+0x1d0>)
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	4618      	mov	r0, r3
 8002140:	f7ff f882 	bl	8001248 <HAL_InitTick>

  return HAL_OK;
 8002144:	2300      	movs	r3, #0
}
 8002146:	4618      	mov	r0, r3
 8002148:	3710      	adds	r7, #16
 800214a:	46bd      	mov	sp, r7
 800214c:	bd80      	pop	{r7, pc}
 800214e:	bf00      	nop
 8002150:	40022000 	.word	0x40022000
 8002154:	40021000 	.word	0x40021000
 8002158:	08004380 	.word	0x08004380
 800215c:	20000074 	.word	0x20000074
 8002160:	20000078 	.word	0x20000078

08002164 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002164:	b480      	push	{r7}
 8002166:	b087      	sub	sp, #28
 8002168:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800216a:	2300      	movs	r3, #0
 800216c:	60fb      	str	r3, [r7, #12]
 800216e:	2300      	movs	r3, #0
 8002170:	60bb      	str	r3, [r7, #8]
 8002172:	2300      	movs	r3, #0
 8002174:	617b      	str	r3, [r7, #20]
 8002176:	2300      	movs	r3, #0
 8002178:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800217a:	2300      	movs	r3, #0
 800217c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800217e:	4b1e      	ldr	r3, [pc, #120]	; (80021f8 <HAL_RCC_GetSysClockFreq+0x94>)
 8002180:	685b      	ldr	r3, [r3, #4]
 8002182:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	f003 030c 	and.w	r3, r3, #12
 800218a:	2b04      	cmp	r3, #4
 800218c:	d002      	beq.n	8002194 <HAL_RCC_GetSysClockFreq+0x30>
 800218e:	2b08      	cmp	r3, #8
 8002190:	d003      	beq.n	800219a <HAL_RCC_GetSysClockFreq+0x36>
 8002192:	e027      	b.n	80021e4 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002194:	4b19      	ldr	r3, [pc, #100]	; (80021fc <HAL_RCC_GetSysClockFreq+0x98>)
 8002196:	613b      	str	r3, [r7, #16]
      break;
 8002198:	e027      	b.n	80021ea <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	0c9b      	lsrs	r3, r3, #18
 800219e:	f003 030f 	and.w	r3, r3, #15
 80021a2:	4a17      	ldr	r2, [pc, #92]	; (8002200 <HAL_RCC_GetSysClockFreq+0x9c>)
 80021a4:	5cd3      	ldrb	r3, [r2, r3]
 80021a6:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d010      	beq.n	80021d4 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80021b2:	4b11      	ldr	r3, [pc, #68]	; (80021f8 <HAL_RCC_GetSysClockFreq+0x94>)
 80021b4:	685b      	ldr	r3, [r3, #4]
 80021b6:	0c5b      	lsrs	r3, r3, #17
 80021b8:	f003 0301 	and.w	r3, r3, #1
 80021bc:	4a11      	ldr	r2, [pc, #68]	; (8002204 <HAL_RCC_GetSysClockFreq+0xa0>)
 80021be:	5cd3      	ldrb	r3, [r2, r3]
 80021c0:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	4a0d      	ldr	r2, [pc, #52]	; (80021fc <HAL_RCC_GetSysClockFreq+0x98>)
 80021c6:	fb02 f203 	mul.w	r2, r2, r3
 80021ca:	68bb      	ldr	r3, [r7, #8]
 80021cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80021d0:	617b      	str	r3, [r7, #20]
 80021d2:	e004      	b.n	80021de <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	4a0c      	ldr	r2, [pc, #48]	; (8002208 <HAL_RCC_GetSysClockFreq+0xa4>)
 80021d8:	fb02 f303 	mul.w	r3, r2, r3
 80021dc:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80021de:	697b      	ldr	r3, [r7, #20]
 80021e0:	613b      	str	r3, [r7, #16]
      break;
 80021e2:	e002      	b.n	80021ea <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80021e4:	4b05      	ldr	r3, [pc, #20]	; (80021fc <HAL_RCC_GetSysClockFreq+0x98>)
 80021e6:	613b      	str	r3, [r7, #16]
      break;
 80021e8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80021ea:	693b      	ldr	r3, [r7, #16]
}
 80021ec:	4618      	mov	r0, r3
 80021ee:	371c      	adds	r7, #28
 80021f0:	46bd      	mov	sp, r7
 80021f2:	bc80      	pop	{r7}
 80021f4:	4770      	bx	lr
 80021f6:	bf00      	nop
 80021f8:	40021000 	.word	0x40021000
 80021fc:	007a1200 	.word	0x007a1200
 8002200:	08004398 	.word	0x08004398
 8002204:	080043a8 	.word	0x080043a8
 8002208:	003d0900 	.word	0x003d0900

0800220c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800220c:	b480      	push	{r7}
 800220e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002210:	4b02      	ldr	r3, [pc, #8]	; (800221c <HAL_RCC_GetHCLKFreq+0x10>)
 8002212:	681b      	ldr	r3, [r3, #0]
}
 8002214:	4618      	mov	r0, r3
 8002216:	46bd      	mov	sp, r7
 8002218:	bc80      	pop	{r7}
 800221a:	4770      	bx	lr
 800221c:	20000074 	.word	0x20000074

08002220 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002220:	b580      	push	{r7, lr}
 8002222:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002224:	f7ff fff2 	bl	800220c <HAL_RCC_GetHCLKFreq>
 8002228:	4602      	mov	r2, r0
 800222a:	4b05      	ldr	r3, [pc, #20]	; (8002240 <HAL_RCC_GetPCLK1Freq+0x20>)
 800222c:	685b      	ldr	r3, [r3, #4]
 800222e:	0a1b      	lsrs	r3, r3, #8
 8002230:	f003 0307 	and.w	r3, r3, #7
 8002234:	4903      	ldr	r1, [pc, #12]	; (8002244 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002236:	5ccb      	ldrb	r3, [r1, r3]
 8002238:	fa22 f303 	lsr.w	r3, r2, r3
}
 800223c:	4618      	mov	r0, r3
 800223e:	bd80      	pop	{r7, pc}
 8002240:	40021000 	.word	0x40021000
 8002244:	08004390 	.word	0x08004390

08002248 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800224c:	f7ff ffde 	bl	800220c <HAL_RCC_GetHCLKFreq>
 8002250:	4602      	mov	r2, r0
 8002252:	4b05      	ldr	r3, [pc, #20]	; (8002268 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002254:	685b      	ldr	r3, [r3, #4]
 8002256:	0adb      	lsrs	r3, r3, #11
 8002258:	f003 0307 	and.w	r3, r3, #7
 800225c:	4903      	ldr	r1, [pc, #12]	; (800226c <HAL_RCC_GetPCLK2Freq+0x24>)
 800225e:	5ccb      	ldrb	r3, [r1, r3]
 8002260:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002264:	4618      	mov	r0, r3
 8002266:	bd80      	pop	{r7, pc}
 8002268:	40021000 	.word	0x40021000
 800226c:	08004390 	.word	0x08004390

08002270 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002270:	b480      	push	{r7}
 8002272:	b083      	sub	sp, #12
 8002274:	af00      	add	r7, sp, #0
 8002276:	6078      	str	r0, [r7, #4]
 8002278:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	220f      	movs	r2, #15
 800227e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002280:	4b11      	ldr	r3, [pc, #68]	; (80022c8 <HAL_RCC_GetClockConfig+0x58>)
 8002282:	685b      	ldr	r3, [r3, #4]
 8002284:	f003 0203 	and.w	r2, r3, #3
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800228c:	4b0e      	ldr	r3, [pc, #56]	; (80022c8 <HAL_RCC_GetClockConfig+0x58>)
 800228e:	685b      	ldr	r3, [r3, #4]
 8002290:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002298:	4b0b      	ldr	r3, [pc, #44]	; (80022c8 <HAL_RCC_GetClockConfig+0x58>)
 800229a:	685b      	ldr	r3, [r3, #4]
 800229c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80022a4:	4b08      	ldr	r3, [pc, #32]	; (80022c8 <HAL_RCC_GetClockConfig+0x58>)
 80022a6:	685b      	ldr	r3, [r3, #4]
 80022a8:	08db      	lsrs	r3, r3, #3
 80022aa:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80022b2:	4b06      	ldr	r3, [pc, #24]	; (80022cc <HAL_RCC_GetClockConfig+0x5c>)
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f003 0207 	and.w	r2, r3, #7
 80022ba:	683b      	ldr	r3, [r7, #0]
 80022bc:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 80022be:	bf00      	nop
 80022c0:	370c      	adds	r7, #12
 80022c2:	46bd      	mov	sp, r7
 80022c4:	bc80      	pop	{r7}
 80022c6:	4770      	bx	lr
 80022c8:	40021000 	.word	0x40021000
 80022cc:	40022000 	.word	0x40022000

080022d0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80022d0:	b480      	push	{r7}
 80022d2:	b085      	sub	sp, #20
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80022d8:	4b0a      	ldr	r3, [pc, #40]	; (8002304 <RCC_Delay+0x34>)
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	4a0a      	ldr	r2, [pc, #40]	; (8002308 <RCC_Delay+0x38>)
 80022de:	fba2 2303 	umull	r2, r3, r2, r3
 80022e2:	0a5b      	lsrs	r3, r3, #9
 80022e4:	687a      	ldr	r2, [r7, #4]
 80022e6:	fb02 f303 	mul.w	r3, r2, r3
 80022ea:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80022ec:	bf00      	nop
  }
  while (Delay --);
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	1e5a      	subs	r2, r3, #1
 80022f2:	60fa      	str	r2, [r7, #12]
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d1f9      	bne.n	80022ec <RCC_Delay+0x1c>
}
 80022f8:	bf00      	nop
 80022fa:	bf00      	nop
 80022fc:	3714      	adds	r7, #20
 80022fe:	46bd      	mov	sp, r7
 8002300:	bc80      	pop	{r7}
 8002302:	4770      	bx	lr
 8002304:	20000074 	.word	0x20000074
 8002308:	10624dd3 	.word	0x10624dd3

0800230c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800230c:	b580      	push	{r7, lr}
 800230e:	b082      	sub	sp, #8
 8002310:	af00      	add	r7, sp, #0
 8002312:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	2b00      	cmp	r3, #0
 8002318:	d101      	bne.n	800231e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800231a:	2301      	movs	r3, #1
 800231c:	e041      	b.n	80023a2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002324:	b2db      	uxtb	r3, r3
 8002326:	2b00      	cmp	r3, #0
 8002328:	d106      	bne.n	8002338 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	2200      	movs	r2, #0
 800232e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002332:	6878      	ldr	r0, [r7, #4]
 8002334:	f7fe fed4 	bl	80010e0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	2202      	movs	r2, #2
 800233c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681a      	ldr	r2, [r3, #0]
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	3304      	adds	r3, #4
 8002348:	4619      	mov	r1, r3
 800234a:	4610      	mov	r0, r2
 800234c:	f000 fb8e 	bl	8002a6c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	2201      	movs	r2, #1
 8002354:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	2201      	movs	r2, #1
 800235c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	2201      	movs	r2, #1
 8002364:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	2201      	movs	r2, #1
 800236c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	2201      	movs	r2, #1
 8002374:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	2201      	movs	r2, #1
 800237c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	2201      	movs	r2, #1
 8002384:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	2201      	movs	r2, #1
 800238c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	2201      	movs	r2, #1
 8002394:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	2201      	movs	r2, #1
 800239c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80023a0:	2300      	movs	r3, #0
}
 80023a2:	4618      	mov	r0, r3
 80023a4:	3708      	adds	r7, #8
 80023a6:	46bd      	mov	sp, r7
 80023a8:	bd80      	pop	{r7, pc}
	...

080023ac <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80023ac:	b480      	push	{r7}
 80023ae:	b085      	sub	sp, #20
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80023ba:	b2db      	uxtb	r3, r3
 80023bc:	2b01      	cmp	r3, #1
 80023be:	d001      	beq.n	80023c4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80023c0:	2301      	movs	r3, #1
 80023c2:	e03a      	b.n	800243a <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	2202      	movs	r2, #2
 80023c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	68da      	ldr	r2, [r3, #12]
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f042 0201 	orr.w	r2, r2, #1
 80023da:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	4a18      	ldr	r2, [pc, #96]	; (8002444 <HAL_TIM_Base_Start_IT+0x98>)
 80023e2:	4293      	cmp	r3, r2
 80023e4:	d00e      	beq.n	8002404 <HAL_TIM_Base_Start_IT+0x58>
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80023ee:	d009      	beq.n	8002404 <HAL_TIM_Base_Start_IT+0x58>
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	4a14      	ldr	r2, [pc, #80]	; (8002448 <HAL_TIM_Base_Start_IT+0x9c>)
 80023f6:	4293      	cmp	r3, r2
 80023f8:	d004      	beq.n	8002404 <HAL_TIM_Base_Start_IT+0x58>
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	4a13      	ldr	r2, [pc, #76]	; (800244c <HAL_TIM_Base_Start_IT+0xa0>)
 8002400:	4293      	cmp	r3, r2
 8002402:	d111      	bne.n	8002428 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	689b      	ldr	r3, [r3, #8]
 800240a:	f003 0307 	and.w	r3, r3, #7
 800240e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	2b06      	cmp	r3, #6
 8002414:	d010      	beq.n	8002438 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	681a      	ldr	r2, [r3, #0]
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f042 0201 	orr.w	r2, r2, #1
 8002424:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002426:	e007      	b.n	8002438 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	681a      	ldr	r2, [r3, #0]
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f042 0201 	orr.w	r2, r2, #1
 8002436:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002438:	2300      	movs	r3, #0
}
 800243a:	4618      	mov	r0, r3
 800243c:	3714      	adds	r7, #20
 800243e:	46bd      	mov	sp, r7
 8002440:	bc80      	pop	{r7}
 8002442:	4770      	bx	lr
 8002444:	40012c00 	.word	0x40012c00
 8002448:	40000400 	.word	0x40000400
 800244c:	40000800 	.word	0x40000800

08002450 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002450:	b580      	push	{r7, lr}
 8002452:	b082      	sub	sp, #8
 8002454:	af00      	add	r7, sp, #0
 8002456:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	2b00      	cmp	r3, #0
 800245c:	d101      	bne.n	8002462 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800245e:	2301      	movs	r3, #1
 8002460:	e041      	b.n	80024e6 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002468:	b2db      	uxtb	r3, r3
 800246a:	2b00      	cmp	r3, #0
 800246c:	d106      	bne.n	800247c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	2200      	movs	r2, #0
 8002472:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002476:	6878      	ldr	r0, [r7, #4]
 8002478:	f000 f839 	bl	80024ee <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	2202      	movs	r2, #2
 8002480:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681a      	ldr	r2, [r3, #0]
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	3304      	adds	r3, #4
 800248c:	4619      	mov	r1, r3
 800248e:	4610      	mov	r0, r2
 8002490:	f000 faec 	bl	8002a6c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	2201      	movs	r2, #1
 8002498:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	2201      	movs	r2, #1
 80024a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	2201      	movs	r2, #1
 80024a8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	2201      	movs	r2, #1
 80024b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	2201      	movs	r2, #1
 80024b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	2201      	movs	r2, #1
 80024c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	2201      	movs	r2, #1
 80024c8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	2201      	movs	r2, #1
 80024d0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	2201      	movs	r2, #1
 80024d8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	2201      	movs	r2, #1
 80024e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80024e4:	2300      	movs	r3, #0
}
 80024e6:	4618      	mov	r0, r3
 80024e8:	3708      	adds	r7, #8
 80024ea:	46bd      	mov	sp, r7
 80024ec:	bd80      	pop	{r7, pc}

080024ee <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80024ee:	b480      	push	{r7}
 80024f0:	b083      	sub	sp, #12
 80024f2:	af00      	add	r7, sp, #0
 80024f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80024f6:	bf00      	nop
 80024f8:	370c      	adds	r7, #12
 80024fa:	46bd      	mov	sp, r7
 80024fc:	bc80      	pop	{r7}
 80024fe:	4770      	bx	lr

08002500 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002500:	b580      	push	{r7, lr}
 8002502:	b082      	sub	sp, #8
 8002504:	af00      	add	r7, sp, #0
 8002506:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	691b      	ldr	r3, [r3, #16]
 800250e:	f003 0302 	and.w	r3, r3, #2
 8002512:	2b02      	cmp	r3, #2
 8002514:	d122      	bne.n	800255c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	68db      	ldr	r3, [r3, #12]
 800251c:	f003 0302 	and.w	r3, r3, #2
 8002520:	2b02      	cmp	r3, #2
 8002522:	d11b      	bne.n	800255c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f06f 0202 	mvn.w	r2, #2
 800252c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	2201      	movs	r2, #1
 8002532:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	699b      	ldr	r3, [r3, #24]
 800253a:	f003 0303 	and.w	r3, r3, #3
 800253e:	2b00      	cmp	r3, #0
 8002540:	d003      	beq.n	800254a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002542:	6878      	ldr	r0, [r7, #4]
 8002544:	f000 fa76 	bl	8002a34 <HAL_TIM_IC_CaptureCallback>
 8002548:	e005      	b.n	8002556 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800254a:	6878      	ldr	r0, [r7, #4]
 800254c:	f000 fa69 	bl	8002a22 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002550:	6878      	ldr	r0, [r7, #4]
 8002552:	f000 fa78 	bl	8002a46 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	2200      	movs	r2, #0
 800255a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	691b      	ldr	r3, [r3, #16]
 8002562:	f003 0304 	and.w	r3, r3, #4
 8002566:	2b04      	cmp	r3, #4
 8002568:	d122      	bne.n	80025b0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	68db      	ldr	r3, [r3, #12]
 8002570:	f003 0304 	and.w	r3, r3, #4
 8002574:	2b04      	cmp	r3, #4
 8002576:	d11b      	bne.n	80025b0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	f06f 0204 	mvn.w	r2, #4
 8002580:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	2202      	movs	r2, #2
 8002586:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	699b      	ldr	r3, [r3, #24]
 800258e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002592:	2b00      	cmp	r3, #0
 8002594:	d003      	beq.n	800259e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002596:	6878      	ldr	r0, [r7, #4]
 8002598:	f000 fa4c 	bl	8002a34 <HAL_TIM_IC_CaptureCallback>
 800259c:	e005      	b.n	80025aa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800259e:	6878      	ldr	r0, [r7, #4]
 80025a0:	f000 fa3f 	bl	8002a22 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80025a4:	6878      	ldr	r0, [r7, #4]
 80025a6:	f000 fa4e 	bl	8002a46 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	2200      	movs	r2, #0
 80025ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	691b      	ldr	r3, [r3, #16]
 80025b6:	f003 0308 	and.w	r3, r3, #8
 80025ba:	2b08      	cmp	r3, #8
 80025bc:	d122      	bne.n	8002604 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	68db      	ldr	r3, [r3, #12]
 80025c4:	f003 0308 	and.w	r3, r3, #8
 80025c8:	2b08      	cmp	r3, #8
 80025ca:	d11b      	bne.n	8002604 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f06f 0208 	mvn.w	r2, #8
 80025d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	2204      	movs	r2, #4
 80025da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	69db      	ldr	r3, [r3, #28]
 80025e2:	f003 0303 	and.w	r3, r3, #3
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d003      	beq.n	80025f2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80025ea:	6878      	ldr	r0, [r7, #4]
 80025ec:	f000 fa22 	bl	8002a34 <HAL_TIM_IC_CaptureCallback>
 80025f0:	e005      	b.n	80025fe <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80025f2:	6878      	ldr	r0, [r7, #4]
 80025f4:	f000 fa15 	bl	8002a22 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80025f8:	6878      	ldr	r0, [r7, #4]
 80025fa:	f000 fa24 	bl	8002a46 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	2200      	movs	r2, #0
 8002602:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	691b      	ldr	r3, [r3, #16]
 800260a:	f003 0310 	and.w	r3, r3, #16
 800260e:	2b10      	cmp	r3, #16
 8002610:	d122      	bne.n	8002658 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	68db      	ldr	r3, [r3, #12]
 8002618:	f003 0310 	and.w	r3, r3, #16
 800261c:	2b10      	cmp	r3, #16
 800261e:	d11b      	bne.n	8002658 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f06f 0210 	mvn.w	r2, #16
 8002628:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	2208      	movs	r2, #8
 800262e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	69db      	ldr	r3, [r3, #28]
 8002636:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800263a:	2b00      	cmp	r3, #0
 800263c:	d003      	beq.n	8002646 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800263e:	6878      	ldr	r0, [r7, #4]
 8002640:	f000 f9f8 	bl	8002a34 <HAL_TIM_IC_CaptureCallback>
 8002644:	e005      	b.n	8002652 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002646:	6878      	ldr	r0, [r7, #4]
 8002648:	f000 f9eb 	bl	8002a22 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800264c:	6878      	ldr	r0, [r7, #4]
 800264e:	f000 f9fa 	bl	8002a46 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	2200      	movs	r2, #0
 8002656:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	691b      	ldr	r3, [r3, #16]
 800265e:	f003 0301 	and.w	r3, r3, #1
 8002662:	2b01      	cmp	r3, #1
 8002664:	d10e      	bne.n	8002684 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	68db      	ldr	r3, [r3, #12]
 800266c:	f003 0301 	and.w	r3, r3, #1
 8002670:	2b01      	cmp	r3, #1
 8002672:	d107      	bne.n	8002684 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f06f 0201 	mvn.w	r2, #1
 800267c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800267e:	6878      	ldr	r0, [r7, #4]
 8002680:	f7fe fc8a 	bl	8000f98 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	691b      	ldr	r3, [r3, #16]
 800268a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800268e:	2b80      	cmp	r3, #128	; 0x80
 8002690:	d10e      	bne.n	80026b0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	68db      	ldr	r3, [r3, #12]
 8002698:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800269c:	2b80      	cmp	r3, #128	; 0x80
 800269e:	d107      	bne.n	80026b0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80026a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80026aa:	6878      	ldr	r0, [r7, #4]
 80026ac:	f000 fcc5 	bl	800303a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	691b      	ldr	r3, [r3, #16]
 80026b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026ba:	2b40      	cmp	r3, #64	; 0x40
 80026bc:	d10e      	bne.n	80026dc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	68db      	ldr	r3, [r3, #12]
 80026c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026c8:	2b40      	cmp	r3, #64	; 0x40
 80026ca:	d107      	bne.n	80026dc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80026d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80026d6:	6878      	ldr	r0, [r7, #4]
 80026d8:	f000 f9be 	bl	8002a58 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	691b      	ldr	r3, [r3, #16]
 80026e2:	f003 0320 	and.w	r3, r3, #32
 80026e6:	2b20      	cmp	r3, #32
 80026e8:	d10e      	bne.n	8002708 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	68db      	ldr	r3, [r3, #12]
 80026f0:	f003 0320 	and.w	r3, r3, #32
 80026f4:	2b20      	cmp	r3, #32
 80026f6:	d107      	bne.n	8002708 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f06f 0220 	mvn.w	r2, #32
 8002700:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002702:	6878      	ldr	r0, [r7, #4]
 8002704:	f000 fc90 	bl	8003028 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002708:	bf00      	nop
 800270a:	3708      	adds	r7, #8
 800270c:	46bd      	mov	sp, r7
 800270e:	bd80      	pop	{r7, pc}

08002710 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002710:	b580      	push	{r7, lr}
 8002712:	b086      	sub	sp, #24
 8002714:	af00      	add	r7, sp, #0
 8002716:	60f8      	str	r0, [r7, #12]
 8002718:	60b9      	str	r1, [r7, #8]
 800271a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800271c:	2300      	movs	r3, #0
 800271e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002726:	2b01      	cmp	r3, #1
 8002728:	d101      	bne.n	800272e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800272a:	2302      	movs	r3, #2
 800272c:	e0ae      	b.n	800288c <HAL_TIM_PWM_ConfigChannel+0x17c>
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	2201      	movs	r2, #1
 8002732:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	2b0c      	cmp	r3, #12
 800273a:	f200 809f 	bhi.w	800287c <HAL_TIM_PWM_ConfigChannel+0x16c>
 800273e:	a201      	add	r2, pc, #4	; (adr r2, 8002744 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002740:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002744:	08002779 	.word	0x08002779
 8002748:	0800287d 	.word	0x0800287d
 800274c:	0800287d 	.word	0x0800287d
 8002750:	0800287d 	.word	0x0800287d
 8002754:	080027b9 	.word	0x080027b9
 8002758:	0800287d 	.word	0x0800287d
 800275c:	0800287d 	.word	0x0800287d
 8002760:	0800287d 	.word	0x0800287d
 8002764:	080027fb 	.word	0x080027fb
 8002768:	0800287d 	.word	0x0800287d
 800276c:	0800287d 	.word	0x0800287d
 8002770:	0800287d 	.word	0x0800287d
 8002774:	0800283b 	.word	0x0800283b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	68b9      	ldr	r1, [r7, #8]
 800277e:	4618      	mov	r0, r3
 8002780:	f000 f9d6 	bl	8002b30 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	699a      	ldr	r2, [r3, #24]
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f042 0208 	orr.w	r2, r2, #8
 8002792:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	699a      	ldr	r2, [r3, #24]
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f022 0204 	bic.w	r2, r2, #4
 80027a2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	6999      	ldr	r1, [r3, #24]
 80027aa:	68bb      	ldr	r3, [r7, #8]
 80027ac:	691a      	ldr	r2, [r3, #16]
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	430a      	orrs	r2, r1
 80027b4:	619a      	str	r2, [r3, #24]
      break;
 80027b6:	e064      	b.n	8002882 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	68b9      	ldr	r1, [r7, #8]
 80027be:	4618      	mov	r0, r3
 80027c0:	f000 fa1c 	bl	8002bfc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	699a      	ldr	r2, [r3, #24]
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80027d2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	699a      	ldr	r2, [r3, #24]
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80027e2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	6999      	ldr	r1, [r3, #24]
 80027ea:	68bb      	ldr	r3, [r7, #8]
 80027ec:	691b      	ldr	r3, [r3, #16]
 80027ee:	021a      	lsls	r2, r3, #8
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	430a      	orrs	r2, r1
 80027f6:	619a      	str	r2, [r3, #24]
      break;
 80027f8:	e043      	b.n	8002882 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	68b9      	ldr	r1, [r7, #8]
 8002800:	4618      	mov	r0, r3
 8002802:	f000 fa65 	bl	8002cd0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	69da      	ldr	r2, [r3, #28]
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f042 0208 	orr.w	r2, r2, #8
 8002814:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	69da      	ldr	r2, [r3, #28]
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f022 0204 	bic.w	r2, r2, #4
 8002824:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	69d9      	ldr	r1, [r3, #28]
 800282c:	68bb      	ldr	r3, [r7, #8]
 800282e:	691a      	ldr	r2, [r3, #16]
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	430a      	orrs	r2, r1
 8002836:	61da      	str	r2, [r3, #28]
      break;
 8002838:	e023      	b.n	8002882 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	68b9      	ldr	r1, [r7, #8]
 8002840:	4618      	mov	r0, r3
 8002842:	f000 faaf 	bl	8002da4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	69da      	ldr	r2, [r3, #28]
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002854:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	69da      	ldr	r2, [r3, #28]
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002864:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	69d9      	ldr	r1, [r3, #28]
 800286c:	68bb      	ldr	r3, [r7, #8]
 800286e:	691b      	ldr	r3, [r3, #16]
 8002870:	021a      	lsls	r2, r3, #8
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	430a      	orrs	r2, r1
 8002878:	61da      	str	r2, [r3, #28]
      break;
 800287a:	e002      	b.n	8002882 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800287c:	2301      	movs	r3, #1
 800287e:	75fb      	strb	r3, [r7, #23]
      break;
 8002880:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	2200      	movs	r2, #0
 8002886:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800288a:	7dfb      	ldrb	r3, [r7, #23]
}
 800288c:	4618      	mov	r0, r3
 800288e:	3718      	adds	r7, #24
 8002890:	46bd      	mov	sp, r7
 8002892:	bd80      	pop	{r7, pc}

08002894 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002894:	b580      	push	{r7, lr}
 8002896:	b084      	sub	sp, #16
 8002898:	af00      	add	r7, sp, #0
 800289a:	6078      	str	r0, [r7, #4]
 800289c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800289e:	2300      	movs	r3, #0
 80028a0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80028a8:	2b01      	cmp	r3, #1
 80028aa:	d101      	bne.n	80028b0 <HAL_TIM_ConfigClockSource+0x1c>
 80028ac:	2302      	movs	r3, #2
 80028ae:	e0b4      	b.n	8002a1a <HAL_TIM_ConfigClockSource+0x186>
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	2201      	movs	r2, #1
 80028b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	2202      	movs	r2, #2
 80028bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	689b      	ldr	r3, [r3, #8]
 80028c6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80028c8:	68bb      	ldr	r3, [r7, #8]
 80028ca:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80028ce:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80028d0:	68bb      	ldr	r3, [r7, #8]
 80028d2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80028d6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	68ba      	ldr	r2, [r7, #8]
 80028de:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80028e0:	683b      	ldr	r3, [r7, #0]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80028e8:	d03e      	beq.n	8002968 <HAL_TIM_ConfigClockSource+0xd4>
 80028ea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80028ee:	f200 8087 	bhi.w	8002a00 <HAL_TIM_ConfigClockSource+0x16c>
 80028f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80028f6:	f000 8086 	beq.w	8002a06 <HAL_TIM_ConfigClockSource+0x172>
 80028fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80028fe:	d87f      	bhi.n	8002a00 <HAL_TIM_ConfigClockSource+0x16c>
 8002900:	2b70      	cmp	r3, #112	; 0x70
 8002902:	d01a      	beq.n	800293a <HAL_TIM_ConfigClockSource+0xa6>
 8002904:	2b70      	cmp	r3, #112	; 0x70
 8002906:	d87b      	bhi.n	8002a00 <HAL_TIM_ConfigClockSource+0x16c>
 8002908:	2b60      	cmp	r3, #96	; 0x60
 800290a:	d050      	beq.n	80029ae <HAL_TIM_ConfigClockSource+0x11a>
 800290c:	2b60      	cmp	r3, #96	; 0x60
 800290e:	d877      	bhi.n	8002a00 <HAL_TIM_ConfigClockSource+0x16c>
 8002910:	2b50      	cmp	r3, #80	; 0x50
 8002912:	d03c      	beq.n	800298e <HAL_TIM_ConfigClockSource+0xfa>
 8002914:	2b50      	cmp	r3, #80	; 0x50
 8002916:	d873      	bhi.n	8002a00 <HAL_TIM_ConfigClockSource+0x16c>
 8002918:	2b40      	cmp	r3, #64	; 0x40
 800291a:	d058      	beq.n	80029ce <HAL_TIM_ConfigClockSource+0x13a>
 800291c:	2b40      	cmp	r3, #64	; 0x40
 800291e:	d86f      	bhi.n	8002a00 <HAL_TIM_ConfigClockSource+0x16c>
 8002920:	2b30      	cmp	r3, #48	; 0x30
 8002922:	d064      	beq.n	80029ee <HAL_TIM_ConfigClockSource+0x15a>
 8002924:	2b30      	cmp	r3, #48	; 0x30
 8002926:	d86b      	bhi.n	8002a00 <HAL_TIM_ConfigClockSource+0x16c>
 8002928:	2b20      	cmp	r3, #32
 800292a:	d060      	beq.n	80029ee <HAL_TIM_ConfigClockSource+0x15a>
 800292c:	2b20      	cmp	r3, #32
 800292e:	d867      	bhi.n	8002a00 <HAL_TIM_ConfigClockSource+0x16c>
 8002930:	2b00      	cmp	r3, #0
 8002932:	d05c      	beq.n	80029ee <HAL_TIM_ConfigClockSource+0x15a>
 8002934:	2b10      	cmp	r3, #16
 8002936:	d05a      	beq.n	80029ee <HAL_TIM_ConfigClockSource+0x15a>
 8002938:	e062      	b.n	8002a00 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	6818      	ldr	r0, [r3, #0]
 800293e:	683b      	ldr	r3, [r7, #0]
 8002940:	6899      	ldr	r1, [r3, #8]
 8002942:	683b      	ldr	r3, [r7, #0]
 8002944:	685a      	ldr	r2, [r3, #4]
 8002946:	683b      	ldr	r3, [r7, #0]
 8002948:	68db      	ldr	r3, [r3, #12]
 800294a:	f000 faf0 	bl	8002f2e <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	689b      	ldr	r3, [r3, #8]
 8002954:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002956:	68bb      	ldr	r3, [r7, #8]
 8002958:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800295c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	68ba      	ldr	r2, [r7, #8]
 8002964:	609a      	str	r2, [r3, #8]
      break;
 8002966:	e04f      	b.n	8002a08 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	6818      	ldr	r0, [r3, #0]
 800296c:	683b      	ldr	r3, [r7, #0]
 800296e:	6899      	ldr	r1, [r3, #8]
 8002970:	683b      	ldr	r3, [r7, #0]
 8002972:	685a      	ldr	r2, [r3, #4]
 8002974:	683b      	ldr	r3, [r7, #0]
 8002976:	68db      	ldr	r3, [r3, #12]
 8002978:	f000 fad9 	bl	8002f2e <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	689a      	ldr	r2, [r3, #8]
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800298a:	609a      	str	r2, [r3, #8]
      break;
 800298c:	e03c      	b.n	8002a08 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	6818      	ldr	r0, [r3, #0]
 8002992:	683b      	ldr	r3, [r7, #0]
 8002994:	6859      	ldr	r1, [r3, #4]
 8002996:	683b      	ldr	r3, [r7, #0]
 8002998:	68db      	ldr	r3, [r3, #12]
 800299a:	461a      	mov	r2, r3
 800299c:	f000 fa50 	bl	8002e40 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	2150      	movs	r1, #80	; 0x50
 80029a6:	4618      	mov	r0, r3
 80029a8:	f000 faa7 	bl	8002efa <TIM_ITRx_SetConfig>
      break;
 80029ac:	e02c      	b.n	8002a08 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	6818      	ldr	r0, [r3, #0]
 80029b2:	683b      	ldr	r3, [r7, #0]
 80029b4:	6859      	ldr	r1, [r3, #4]
 80029b6:	683b      	ldr	r3, [r7, #0]
 80029b8:	68db      	ldr	r3, [r3, #12]
 80029ba:	461a      	mov	r2, r3
 80029bc:	f000 fa6e 	bl	8002e9c <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	2160      	movs	r1, #96	; 0x60
 80029c6:	4618      	mov	r0, r3
 80029c8:	f000 fa97 	bl	8002efa <TIM_ITRx_SetConfig>
      break;
 80029cc:	e01c      	b.n	8002a08 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	6818      	ldr	r0, [r3, #0]
 80029d2:	683b      	ldr	r3, [r7, #0]
 80029d4:	6859      	ldr	r1, [r3, #4]
 80029d6:	683b      	ldr	r3, [r7, #0]
 80029d8:	68db      	ldr	r3, [r3, #12]
 80029da:	461a      	mov	r2, r3
 80029dc:	f000 fa30 	bl	8002e40 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	2140      	movs	r1, #64	; 0x40
 80029e6:	4618      	mov	r0, r3
 80029e8:	f000 fa87 	bl	8002efa <TIM_ITRx_SetConfig>
      break;
 80029ec:	e00c      	b.n	8002a08 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681a      	ldr	r2, [r3, #0]
 80029f2:	683b      	ldr	r3, [r7, #0]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	4619      	mov	r1, r3
 80029f8:	4610      	mov	r0, r2
 80029fa:	f000 fa7e 	bl	8002efa <TIM_ITRx_SetConfig>
      break;
 80029fe:	e003      	b.n	8002a08 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002a00:	2301      	movs	r3, #1
 8002a02:	73fb      	strb	r3, [r7, #15]
      break;
 8002a04:	e000      	b.n	8002a08 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002a06:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	2201      	movs	r2, #1
 8002a0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	2200      	movs	r2, #0
 8002a14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002a18:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	3710      	adds	r7, #16
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	bd80      	pop	{r7, pc}

08002a22 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002a22:	b480      	push	{r7}
 8002a24:	b083      	sub	sp, #12
 8002a26:	af00      	add	r7, sp, #0
 8002a28:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002a2a:	bf00      	nop
 8002a2c:	370c      	adds	r7, #12
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	bc80      	pop	{r7}
 8002a32:	4770      	bx	lr

08002a34 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002a34:	b480      	push	{r7}
 8002a36:	b083      	sub	sp, #12
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002a3c:	bf00      	nop
 8002a3e:	370c      	adds	r7, #12
 8002a40:	46bd      	mov	sp, r7
 8002a42:	bc80      	pop	{r7}
 8002a44:	4770      	bx	lr

08002a46 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002a46:	b480      	push	{r7}
 8002a48:	b083      	sub	sp, #12
 8002a4a:	af00      	add	r7, sp, #0
 8002a4c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002a4e:	bf00      	nop
 8002a50:	370c      	adds	r7, #12
 8002a52:	46bd      	mov	sp, r7
 8002a54:	bc80      	pop	{r7}
 8002a56:	4770      	bx	lr

08002a58 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002a58:	b480      	push	{r7}
 8002a5a:	b083      	sub	sp, #12
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002a60:	bf00      	nop
 8002a62:	370c      	adds	r7, #12
 8002a64:	46bd      	mov	sp, r7
 8002a66:	bc80      	pop	{r7}
 8002a68:	4770      	bx	lr
	...

08002a6c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002a6c:	b480      	push	{r7}
 8002a6e:	b085      	sub	sp, #20
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	6078      	str	r0, [r7, #4]
 8002a74:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	4a29      	ldr	r2, [pc, #164]	; (8002b24 <TIM_Base_SetConfig+0xb8>)
 8002a80:	4293      	cmp	r3, r2
 8002a82:	d00b      	beq.n	8002a9c <TIM_Base_SetConfig+0x30>
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a8a:	d007      	beq.n	8002a9c <TIM_Base_SetConfig+0x30>
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	4a26      	ldr	r2, [pc, #152]	; (8002b28 <TIM_Base_SetConfig+0xbc>)
 8002a90:	4293      	cmp	r3, r2
 8002a92:	d003      	beq.n	8002a9c <TIM_Base_SetConfig+0x30>
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	4a25      	ldr	r2, [pc, #148]	; (8002b2c <TIM_Base_SetConfig+0xc0>)
 8002a98:	4293      	cmp	r3, r2
 8002a9a:	d108      	bne.n	8002aae <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002aa2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002aa4:	683b      	ldr	r3, [r7, #0]
 8002aa6:	685b      	ldr	r3, [r3, #4]
 8002aa8:	68fa      	ldr	r2, [r7, #12]
 8002aaa:	4313      	orrs	r3, r2
 8002aac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	4a1c      	ldr	r2, [pc, #112]	; (8002b24 <TIM_Base_SetConfig+0xb8>)
 8002ab2:	4293      	cmp	r3, r2
 8002ab4:	d00b      	beq.n	8002ace <TIM_Base_SetConfig+0x62>
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002abc:	d007      	beq.n	8002ace <TIM_Base_SetConfig+0x62>
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	4a19      	ldr	r2, [pc, #100]	; (8002b28 <TIM_Base_SetConfig+0xbc>)
 8002ac2:	4293      	cmp	r3, r2
 8002ac4:	d003      	beq.n	8002ace <TIM_Base_SetConfig+0x62>
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	4a18      	ldr	r2, [pc, #96]	; (8002b2c <TIM_Base_SetConfig+0xc0>)
 8002aca:	4293      	cmp	r3, r2
 8002acc:	d108      	bne.n	8002ae0 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002ad4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002ad6:	683b      	ldr	r3, [r7, #0]
 8002ad8:	68db      	ldr	r3, [r3, #12]
 8002ada:	68fa      	ldr	r2, [r7, #12]
 8002adc:	4313      	orrs	r3, r2
 8002ade:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002ae6:	683b      	ldr	r3, [r7, #0]
 8002ae8:	695b      	ldr	r3, [r3, #20]
 8002aea:	4313      	orrs	r3, r2
 8002aec:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	68fa      	ldr	r2, [r7, #12]
 8002af2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002af4:	683b      	ldr	r3, [r7, #0]
 8002af6:	689a      	ldr	r2, [r3, #8]
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002afc:	683b      	ldr	r3, [r7, #0]
 8002afe:	681a      	ldr	r2, [r3, #0]
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	4a07      	ldr	r2, [pc, #28]	; (8002b24 <TIM_Base_SetConfig+0xb8>)
 8002b08:	4293      	cmp	r3, r2
 8002b0a:	d103      	bne.n	8002b14 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002b0c:	683b      	ldr	r3, [r7, #0]
 8002b0e:	691a      	ldr	r2, [r3, #16]
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	2201      	movs	r2, #1
 8002b18:	615a      	str	r2, [r3, #20]
}
 8002b1a:	bf00      	nop
 8002b1c:	3714      	adds	r7, #20
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	bc80      	pop	{r7}
 8002b22:	4770      	bx	lr
 8002b24:	40012c00 	.word	0x40012c00
 8002b28:	40000400 	.word	0x40000400
 8002b2c:	40000800 	.word	0x40000800

08002b30 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002b30:	b480      	push	{r7}
 8002b32:	b087      	sub	sp, #28
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	6078      	str	r0, [r7, #4]
 8002b38:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	6a1b      	ldr	r3, [r3, #32]
 8002b3e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	6a1b      	ldr	r3, [r3, #32]
 8002b44:	f023 0201 	bic.w	r2, r3, #1
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	685b      	ldr	r3, [r3, #4]
 8002b50:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	699b      	ldr	r3, [r3, #24]
 8002b56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b5e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	f023 0303 	bic.w	r3, r3, #3
 8002b66:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002b68:	683b      	ldr	r3, [r7, #0]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	68fa      	ldr	r2, [r7, #12]
 8002b6e:	4313      	orrs	r3, r2
 8002b70:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002b72:	697b      	ldr	r3, [r7, #20]
 8002b74:	f023 0302 	bic.w	r3, r3, #2
 8002b78:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002b7a:	683b      	ldr	r3, [r7, #0]
 8002b7c:	689b      	ldr	r3, [r3, #8]
 8002b7e:	697a      	ldr	r2, [r7, #20]
 8002b80:	4313      	orrs	r3, r2
 8002b82:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	4a1c      	ldr	r2, [pc, #112]	; (8002bf8 <TIM_OC1_SetConfig+0xc8>)
 8002b88:	4293      	cmp	r3, r2
 8002b8a:	d10c      	bne.n	8002ba6 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002b8c:	697b      	ldr	r3, [r7, #20]
 8002b8e:	f023 0308 	bic.w	r3, r3, #8
 8002b92:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002b94:	683b      	ldr	r3, [r7, #0]
 8002b96:	68db      	ldr	r3, [r3, #12]
 8002b98:	697a      	ldr	r2, [r7, #20]
 8002b9a:	4313      	orrs	r3, r2
 8002b9c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002b9e:	697b      	ldr	r3, [r7, #20]
 8002ba0:	f023 0304 	bic.w	r3, r3, #4
 8002ba4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	4a13      	ldr	r2, [pc, #76]	; (8002bf8 <TIM_OC1_SetConfig+0xc8>)
 8002baa:	4293      	cmp	r3, r2
 8002bac:	d111      	bne.n	8002bd2 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002bae:	693b      	ldr	r3, [r7, #16]
 8002bb0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002bb4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002bb6:	693b      	ldr	r3, [r7, #16]
 8002bb8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002bbc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002bbe:	683b      	ldr	r3, [r7, #0]
 8002bc0:	695b      	ldr	r3, [r3, #20]
 8002bc2:	693a      	ldr	r2, [r7, #16]
 8002bc4:	4313      	orrs	r3, r2
 8002bc6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002bc8:	683b      	ldr	r3, [r7, #0]
 8002bca:	699b      	ldr	r3, [r3, #24]
 8002bcc:	693a      	ldr	r2, [r7, #16]
 8002bce:	4313      	orrs	r3, r2
 8002bd0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	693a      	ldr	r2, [r7, #16]
 8002bd6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	68fa      	ldr	r2, [r7, #12]
 8002bdc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002bde:	683b      	ldr	r3, [r7, #0]
 8002be0:	685a      	ldr	r2, [r3, #4]
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	697a      	ldr	r2, [r7, #20]
 8002bea:	621a      	str	r2, [r3, #32]
}
 8002bec:	bf00      	nop
 8002bee:	371c      	adds	r7, #28
 8002bf0:	46bd      	mov	sp, r7
 8002bf2:	bc80      	pop	{r7}
 8002bf4:	4770      	bx	lr
 8002bf6:	bf00      	nop
 8002bf8:	40012c00 	.word	0x40012c00

08002bfc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002bfc:	b480      	push	{r7}
 8002bfe:	b087      	sub	sp, #28
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	6078      	str	r0, [r7, #4]
 8002c04:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	6a1b      	ldr	r3, [r3, #32]
 8002c0a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	6a1b      	ldr	r3, [r3, #32]
 8002c10:	f023 0210 	bic.w	r2, r3, #16
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	685b      	ldr	r3, [r3, #4]
 8002c1c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	699b      	ldr	r3, [r3, #24]
 8002c22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002c2a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c32:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002c34:	683b      	ldr	r3, [r7, #0]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	021b      	lsls	r3, r3, #8
 8002c3a:	68fa      	ldr	r2, [r7, #12]
 8002c3c:	4313      	orrs	r3, r2
 8002c3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002c40:	697b      	ldr	r3, [r7, #20]
 8002c42:	f023 0320 	bic.w	r3, r3, #32
 8002c46:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002c48:	683b      	ldr	r3, [r7, #0]
 8002c4a:	689b      	ldr	r3, [r3, #8]
 8002c4c:	011b      	lsls	r3, r3, #4
 8002c4e:	697a      	ldr	r2, [r7, #20]
 8002c50:	4313      	orrs	r3, r2
 8002c52:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	4a1d      	ldr	r2, [pc, #116]	; (8002ccc <TIM_OC2_SetConfig+0xd0>)
 8002c58:	4293      	cmp	r3, r2
 8002c5a:	d10d      	bne.n	8002c78 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002c5c:	697b      	ldr	r3, [r7, #20]
 8002c5e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002c62:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002c64:	683b      	ldr	r3, [r7, #0]
 8002c66:	68db      	ldr	r3, [r3, #12]
 8002c68:	011b      	lsls	r3, r3, #4
 8002c6a:	697a      	ldr	r2, [r7, #20]
 8002c6c:	4313      	orrs	r3, r2
 8002c6e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002c70:	697b      	ldr	r3, [r7, #20]
 8002c72:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002c76:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	4a14      	ldr	r2, [pc, #80]	; (8002ccc <TIM_OC2_SetConfig+0xd0>)
 8002c7c:	4293      	cmp	r3, r2
 8002c7e:	d113      	bne.n	8002ca8 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002c80:	693b      	ldr	r3, [r7, #16]
 8002c82:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002c86:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002c88:	693b      	ldr	r3, [r7, #16]
 8002c8a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002c8e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002c90:	683b      	ldr	r3, [r7, #0]
 8002c92:	695b      	ldr	r3, [r3, #20]
 8002c94:	009b      	lsls	r3, r3, #2
 8002c96:	693a      	ldr	r2, [r7, #16]
 8002c98:	4313      	orrs	r3, r2
 8002c9a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002c9c:	683b      	ldr	r3, [r7, #0]
 8002c9e:	699b      	ldr	r3, [r3, #24]
 8002ca0:	009b      	lsls	r3, r3, #2
 8002ca2:	693a      	ldr	r2, [r7, #16]
 8002ca4:	4313      	orrs	r3, r2
 8002ca6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	693a      	ldr	r2, [r7, #16]
 8002cac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	68fa      	ldr	r2, [r7, #12]
 8002cb2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002cb4:	683b      	ldr	r3, [r7, #0]
 8002cb6:	685a      	ldr	r2, [r3, #4]
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	697a      	ldr	r2, [r7, #20]
 8002cc0:	621a      	str	r2, [r3, #32]
}
 8002cc2:	bf00      	nop
 8002cc4:	371c      	adds	r7, #28
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	bc80      	pop	{r7}
 8002cca:	4770      	bx	lr
 8002ccc:	40012c00 	.word	0x40012c00

08002cd0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002cd0:	b480      	push	{r7}
 8002cd2:	b087      	sub	sp, #28
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	6078      	str	r0, [r7, #4]
 8002cd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	6a1b      	ldr	r3, [r3, #32]
 8002cde:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	6a1b      	ldr	r3, [r3, #32]
 8002ce4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	685b      	ldr	r3, [r3, #4]
 8002cf0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	69db      	ldr	r3, [r3, #28]
 8002cf6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002cfe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	f023 0303 	bic.w	r3, r3, #3
 8002d06:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002d08:	683b      	ldr	r3, [r7, #0]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	68fa      	ldr	r2, [r7, #12]
 8002d0e:	4313      	orrs	r3, r2
 8002d10:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002d12:	697b      	ldr	r3, [r7, #20]
 8002d14:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002d18:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002d1a:	683b      	ldr	r3, [r7, #0]
 8002d1c:	689b      	ldr	r3, [r3, #8]
 8002d1e:	021b      	lsls	r3, r3, #8
 8002d20:	697a      	ldr	r2, [r7, #20]
 8002d22:	4313      	orrs	r3, r2
 8002d24:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	4a1d      	ldr	r2, [pc, #116]	; (8002da0 <TIM_OC3_SetConfig+0xd0>)
 8002d2a:	4293      	cmp	r3, r2
 8002d2c:	d10d      	bne.n	8002d4a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002d2e:	697b      	ldr	r3, [r7, #20]
 8002d30:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002d34:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002d36:	683b      	ldr	r3, [r7, #0]
 8002d38:	68db      	ldr	r3, [r3, #12]
 8002d3a:	021b      	lsls	r3, r3, #8
 8002d3c:	697a      	ldr	r2, [r7, #20]
 8002d3e:	4313      	orrs	r3, r2
 8002d40:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002d42:	697b      	ldr	r3, [r7, #20]
 8002d44:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002d48:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	4a14      	ldr	r2, [pc, #80]	; (8002da0 <TIM_OC3_SetConfig+0xd0>)
 8002d4e:	4293      	cmp	r3, r2
 8002d50:	d113      	bne.n	8002d7a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002d52:	693b      	ldr	r3, [r7, #16]
 8002d54:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002d58:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002d5a:	693b      	ldr	r3, [r7, #16]
 8002d5c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002d60:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002d62:	683b      	ldr	r3, [r7, #0]
 8002d64:	695b      	ldr	r3, [r3, #20]
 8002d66:	011b      	lsls	r3, r3, #4
 8002d68:	693a      	ldr	r2, [r7, #16]
 8002d6a:	4313      	orrs	r3, r2
 8002d6c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002d6e:	683b      	ldr	r3, [r7, #0]
 8002d70:	699b      	ldr	r3, [r3, #24]
 8002d72:	011b      	lsls	r3, r3, #4
 8002d74:	693a      	ldr	r2, [r7, #16]
 8002d76:	4313      	orrs	r3, r2
 8002d78:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	693a      	ldr	r2, [r7, #16]
 8002d7e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	68fa      	ldr	r2, [r7, #12]
 8002d84:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002d86:	683b      	ldr	r3, [r7, #0]
 8002d88:	685a      	ldr	r2, [r3, #4]
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	697a      	ldr	r2, [r7, #20]
 8002d92:	621a      	str	r2, [r3, #32]
}
 8002d94:	bf00      	nop
 8002d96:	371c      	adds	r7, #28
 8002d98:	46bd      	mov	sp, r7
 8002d9a:	bc80      	pop	{r7}
 8002d9c:	4770      	bx	lr
 8002d9e:	bf00      	nop
 8002da0:	40012c00 	.word	0x40012c00

08002da4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002da4:	b480      	push	{r7}
 8002da6:	b087      	sub	sp, #28
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	6078      	str	r0, [r7, #4]
 8002dac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	6a1b      	ldr	r3, [r3, #32]
 8002db2:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	6a1b      	ldr	r3, [r3, #32]
 8002db8:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	685b      	ldr	r3, [r3, #4]
 8002dc4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	69db      	ldr	r3, [r3, #28]
 8002dca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002dd2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002dda:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002ddc:	683b      	ldr	r3, [r7, #0]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	021b      	lsls	r3, r3, #8
 8002de2:	68fa      	ldr	r2, [r7, #12]
 8002de4:	4313      	orrs	r3, r2
 8002de6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002de8:	693b      	ldr	r3, [r7, #16]
 8002dea:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002dee:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002df0:	683b      	ldr	r3, [r7, #0]
 8002df2:	689b      	ldr	r3, [r3, #8]
 8002df4:	031b      	lsls	r3, r3, #12
 8002df6:	693a      	ldr	r2, [r7, #16]
 8002df8:	4313      	orrs	r3, r2
 8002dfa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	4a0f      	ldr	r2, [pc, #60]	; (8002e3c <TIM_OC4_SetConfig+0x98>)
 8002e00:	4293      	cmp	r3, r2
 8002e02:	d109      	bne.n	8002e18 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002e04:	697b      	ldr	r3, [r7, #20]
 8002e06:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002e0a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002e0c:	683b      	ldr	r3, [r7, #0]
 8002e0e:	695b      	ldr	r3, [r3, #20]
 8002e10:	019b      	lsls	r3, r3, #6
 8002e12:	697a      	ldr	r2, [r7, #20]
 8002e14:	4313      	orrs	r3, r2
 8002e16:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	697a      	ldr	r2, [r7, #20]
 8002e1c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	68fa      	ldr	r2, [r7, #12]
 8002e22:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002e24:	683b      	ldr	r3, [r7, #0]
 8002e26:	685a      	ldr	r2, [r3, #4]
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	693a      	ldr	r2, [r7, #16]
 8002e30:	621a      	str	r2, [r3, #32]
}
 8002e32:	bf00      	nop
 8002e34:	371c      	adds	r7, #28
 8002e36:	46bd      	mov	sp, r7
 8002e38:	bc80      	pop	{r7}
 8002e3a:	4770      	bx	lr
 8002e3c:	40012c00 	.word	0x40012c00

08002e40 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002e40:	b480      	push	{r7}
 8002e42:	b087      	sub	sp, #28
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	60f8      	str	r0, [r7, #12]
 8002e48:	60b9      	str	r1, [r7, #8]
 8002e4a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	6a1b      	ldr	r3, [r3, #32]
 8002e50:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	6a1b      	ldr	r3, [r3, #32]
 8002e56:	f023 0201 	bic.w	r2, r3, #1
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	699b      	ldr	r3, [r3, #24]
 8002e62:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002e64:	693b      	ldr	r3, [r7, #16]
 8002e66:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002e6a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	011b      	lsls	r3, r3, #4
 8002e70:	693a      	ldr	r2, [r7, #16]
 8002e72:	4313      	orrs	r3, r2
 8002e74:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002e76:	697b      	ldr	r3, [r7, #20]
 8002e78:	f023 030a 	bic.w	r3, r3, #10
 8002e7c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002e7e:	697a      	ldr	r2, [r7, #20]
 8002e80:	68bb      	ldr	r3, [r7, #8]
 8002e82:	4313      	orrs	r3, r2
 8002e84:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	693a      	ldr	r2, [r7, #16]
 8002e8a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	697a      	ldr	r2, [r7, #20]
 8002e90:	621a      	str	r2, [r3, #32]
}
 8002e92:	bf00      	nop
 8002e94:	371c      	adds	r7, #28
 8002e96:	46bd      	mov	sp, r7
 8002e98:	bc80      	pop	{r7}
 8002e9a:	4770      	bx	lr

08002e9c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002e9c:	b480      	push	{r7}
 8002e9e:	b087      	sub	sp, #28
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	60f8      	str	r0, [r7, #12]
 8002ea4:	60b9      	str	r1, [r7, #8]
 8002ea6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	6a1b      	ldr	r3, [r3, #32]
 8002eac:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	6a1b      	ldr	r3, [r3, #32]
 8002eb2:	f023 0210 	bic.w	r2, r3, #16
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	699b      	ldr	r3, [r3, #24]
 8002ebe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002ec0:	693b      	ldr	r3, [r7, #16]
 8002ec2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002ec6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	031b      	lsls	r3, r3, #12
 8002ecc:	693a      	ldr	r2, [r7, #16]
 8002ece:	4313      	orrs	r3, r2
 8002ed0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002ed2:	697b      	ldr	r3, [r7, #20]
 8002ed4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002ed8:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002eda:	68bb      	ldr	r3, [r7, #8]
 8002edc:	011b      	lsls	r3, r3, #4
 8002ede:	697a      	ldr	r2, [r7, #20]
 8002ee0:	4313      	orrs	r3, r2
 8002ee2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	693a      	ldr	r2, [r7, #16]
 8002ee8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	697a      	ldr	r2, [r7, #20]
 8002eee:	621a      	str	r2, [r3, #32]
}
 8002ef0:	bf00      	nop
 8002ef2:	371c      	adds	r7, #28
 8002ef4:	46bd      	mov	sp, r7
 8002ef6:	bc80      	pop	{r7}
 8002ef8:	4770      	bx	lr

08002efa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002efa:	b480      	push	{r7}
 8002efc:	b085      	sub	sp, #20
 8002efe:	af00      	add	r7, sp, #0
 8002f00:	6078      	str	r0, [r7, #4]
 8002f02:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	689b      	ldr	r3, [r3, #8]
 8002f08:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f10:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002f12:	683a      	ldr	r2, [r7, #0]
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	4313      	orrs	r3, r2
 8002f18:	f043 0307 	orr.w	r3, r3, #7
 8002f1c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	68fa      	ldr	r2, [r7, #12]
 8002f22:	609a      	str	r2, [r3, #8]
}
 8002f24:	bf00      	nop
 8002f26:	3714      	adds	r7, #20
 8002f28:	46bd      	mov	sp, r7
 8002f2a:	bc80      	pop	{r7}
 8002f2c:	4770      	bx	lr

08002f2e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002f2e:	b480      	push	{r7}
 8002f30:	b087      	sub	sp, #28
 8002f32:	af00      	add	r7, sp, #0
 8002f34:	60f8      	str	r0, [r7, #12]
 8002f36:	60b9      	str	r1, [r7, #8]
 8002f38:	607a      	str	r2, [r7, #4]
 8002f3a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	689b      	ldr	r3, [r3, #8]
 8002f40:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002f42:	697b      	ldr	r3, [r7, #20]
 8002f44:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002f48:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002f4a:	683b      	ldr	r3, [r7, #0]
 8002f4c:	021a      	lsls	r2, r3, #8
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	431a      	orrs	r2, r3
 8002f52:	68bb      	ldr	r3, [r7, #8]
 8002f54:	4313      	orrs	r3, r2
 8002f56:	697a      	ldr	r2, [r7, #20]
 8002f58:	4313      	orrs	r3, r2
 8002f5a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	697a      	ldr	r2, [r7, #20]
 8002f60:	609a      	str	r2, [r3, #8]
}
 8002f62:	bf00      	nop
 8002f64:	371c      	adds	r7, #28
 8002f66:	46bd      	mov	sp, r7
 8002f68:	bc80      	pop	{r7}
 8002f6a:	4770      	bx	lr

08002f6c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002f6c:	b480      	push	{r7}
 8002f6e:	b085      	sub	sp, #20
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	6078      	str	r0, [r7, #4]
 8002f74:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f7c:	2b01      	cmp	r3, #1
 8002f7e:	d101      	bne.n	8002f84 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002f80:	2302      	movs	r3, #2
 8002f82:	e046      	b.n	8003012 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	2201      	movs	r2, #1
 8002f88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	2202      	movs	r2, #2
 8002f90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	685b      	ldr	r3, [r3, #4]
 8002f9a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	689b      	ldr	r3, [r3, #8]
 8002fa2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002faa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002fac:	683b      	ldr	r3, [r7, #0]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	68fa      	ldr	r2, [r7, #12]
 8002fb2:	4313      	orrs	r3, r2
 8002fb4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	68fa      	ldr	r2, [r7, #12]
 8002fbc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	4a16      	ldr	r2, [pc, #88]	; (800301c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8002fc4:	4293      	cmp	r3, r2
 8002fc6:	d00e      	beq.n	8002fe6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002fd0:	d009      	beq.n	8002fe6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	4a12      	ldr	r2, [pc, #72]	; (8003020 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002fd8:	4293      	cmp	r3, r2
 8002fda:	d004      	beq.n	8002fe6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	4a10      	ldr	r2, [pc, #64]	; (8003024 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002fe2:	4293      	cmp	r3, r2
 8002fe4:	d10c      	bne.n	8003000 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002fe6:	68bb      	ldr	r3, [r7, #8]
 8002fe8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002fec:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002fee:	683b      	ldr	r3, [r7, #0]
 8002ff0:	685b      	ldr	r3, [r3, #4]
 8002ff2:	68ba      	ldr	r2, [r7, #8]
 8002ff4:	4313      	orrs	r3, r2
 8002ff6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	68ba      	ldr	r2, [r7, #8]
 8002ffe:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	2201      	movs	r2, #1
 8003004:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	2200      	movs	r2, #0
 800300c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003010:	2300      	movs	r3, #0
}
 8003012:	4618      	mov	r0, r3
 8003014:	3714      	adds	r7, #20
 8003016:	46bd      	mov	sp, r7
 8003018:	bc80      	pop	{r7}
 800301a:	4770      	bx	lr
 800301c:	40012c00 	.word	0x40012c00
 8003020:	40000400 	.word	0x40000400
 8003024:	40000800 	.word	0x40000800

08003028 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003028:	b480      	push	{r7}
 800302a:	b083      	sub	sp, #12
 800302c:	af00      	add	r7, sp, #0
 800302e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003030:	bf00      	nop
 8003032:	370c      	adds	r7, #12
 8003034:	46bd      	mov	sp, r7
 8003036:	bc80      	pop	{r7}
 8003038:	4770      	bx	lr

0800303a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800303a:	b480      	push	{r7}
 800303c:	b083      	sub	sp, #12
 800303e:	af00      	add	r7, sp, #0
 8003040:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003042:	bf00      	nop
 8003044:	370c      	adds	r7, #12
 8003046:	46bd      	mov	sp, r7
 8003048:	bc80      	pop	{r7}
 800304a:	4770      	bx	lr

0800304c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800304c:	b580      	push	{r7, lr}
 800304e:	b082      	sub	sp, #8
 8003050:	af00      	add	r7, sp, #0
 8003052:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	2b00      	cmp	r3, #0
 8003058:	d101      	bne.n	800305e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800305a:	2301      	movs	r3, #1
 800305c:	e042      	b.n	80030e4 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003064:	b2db      	uxtb	r3, r3
 8003066:	2b00      	cmp	r3, #0
 8003068:	d106      	bne.n	8003078 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	2200      	movs	r2, #0
 800306e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003072:	6878      	ldr	r0, [r7, #4]
 8003074:	f7fe f89e 	bl	80011b4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	2224      	movs	r2, #36	; 0x24
 800307c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	68da      	ldr	r2, [r3, #12]
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800308e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003090:	6878      	ldr	r0, [r7, #4]
 8003092:	f000 f91d 	bl	80032d0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	691a      	ldr	r2, [r3, #16]
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80030a4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	695a      	ldr	r2, [r3, #20]
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80030b4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	68da      	ldr	r2, [r3, #12]
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80030c4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	2200      	movs	r2, #0
 80030ca:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	2220      	movs	r2, #32
 80030d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	2220      	movs	r2, #32
 80030d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	2200      	movs	r2, #0
 80030e0:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80030e2:	2300      	movs	r3, #0
}
 80030e4:	4618      	mov	r0, r3
 80030e6:	3708      	adds	r7, #8
 80030e8:	46bd      	mov	sp, r7
 80030ea:	bd80      	pop	{r7, pc}

080030ec <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80030ec:	b580      	push	{r7, lr}
 80030ee:	b08a      	sub	sp, #40	; 0x28
 80030f0:	af02      	add	r7, sp, #8
 80030f2:	60f8      	str	r0, [r7, #12]
 80030f4:	60b9      	str	r1, [r7, #8]
 80030f6:	603b      	str	r3, [r7, #0]
 80030f8:	4613      	mov	r3, r2
 80030fa:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80030fc:	2300      	movs	r3, #0
 80030fe:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003106:	b2db      	uxtb	r3, r3
 8003108:	2b20      	cmp	r3, #32
 800310a:	d16d      	bne.n	80031e8 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 800310c:	68bb      	ldr	r3, [r7, #8]
 800310e:	2b00      	cmp	r3, #0
 8003110:	d002      	beq.n	8003118 <HAL_UART_Transmit+0x2c>
 8003112:	88fb      	ldrh	r3, [r7, #6]
 8003114:	2b00      	cmp	r3, #0
 8003116:	d101      	bne.n	800311c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003118:	2301      	movs	r3, #1
 800311a:	e066      	b.n	80031ea <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	2200      	movs	r2, #0
 8003120:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	2221      	movs	r2, #33	; 0x21
 8003126:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800312a:	f7fe fa13 	bl	8001554 <HAL_GetTick>
 800312e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	88fa      	ldrh	r2, [r7, #6]
 8003134:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	88fa      	ldrh	r2, [r7, #6]
 800313a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	689b      	ldr	r3, [r3, #8]
 8003140:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003144:	d108      	bne.n	8003158 <HAL_UART_Transmit+0x6c>
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	691b      	ldr	r3, [r3, #16]
 800314a:	2b00      	cmp	r3, #0
 800314c:	d104      	bne.n	8003158 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800314e:	2300      	movs	r3, #0
 8003150:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003152:	68bb      	ldr	r3, [r7, #8]
 8003154:	61bb      	str	r3, [r7, #24]
 8003156:	e003      	b.n	8003160 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003158:	68bb      	ldr	r3, [r7, #8]
 800315a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800315c:	2300      	movs	r3, #0
 800315e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003160:	e02a      	b.n	80031b8 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003162:	683b      	ldr	r3, [r7, #0]
 8003164:	9300      	str	r3, [sp, #0]
 8003166:	697b      	ldr	r3, [r7, #20]
 8003168:	2200      	movs	r2, #0
 800316a:	2180      	movs	r1, #128	; 0x80
 800316c:	68f8      	ldr	r0, [r7, #12]
 800316e:	f000 f840 	bl	80031f2 <UART_WaitOnFlagUntilTimeout>
 8003172:	4603      	mov	r3, r0
 8003174:	2b00      	cmp	r3, #0
 8003176:	d001      	beq.n	800317c <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8003178:	2303      	movs	r3, #3
 800317a:	e036      	b.n	80031ea <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 800317c:	69fb      	ldr	r3, [r7, #28]
 800317e:	2b00      	cmp	r3, #0
 8003180:	d10b      	bne.n	800319a <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003182:	69bb      	ldr	r3, [r7, #24]
 8003184:	881b      	ldrh	r3, [r3, #0]
 8003186:	461a      	mov	r2, r3
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003190:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003192:	69bb      	ldr	r3, [r7, #24]
 8003194:	3302      	adds	r3, #2
 8003196:	61bb      	str	r3, [r7, #24]
 8003198:	e007      	b.n	80031aa <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800319a:	69fb      	ldr	r3, [r7, #28]
 800319c:	781a      	ldrb	r2, [r3, #0]
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80031a4:	69fb      	ldr	r3, [r7, #28]
 80031a6:	3301      	adds	r3, #1
 80031a8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80031ae:	b29b      	uxth	r3, r3
 80031b0:	3b01      	subs	r3, #1
 80031b2:	b29a      	uxth	r2, r3
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80031bc:	b29b      	uxth	r3, r3
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d1cf      	bne.n	8003162 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80031c2:	683b      	ldr	r3, [r7, #0]
 80031c4:	9300      	str	r3, [sp, #0]
 80031c6:	697b      	ldr	r3, [r7, #20]
 80031c8:	2200      	movs	r2, #0
 80031ca:	2140      	movs	r1, #64	; 0x40
 80031cc:	68f8      	ldr	r0, [r7, #12]
 80031ce:	f000 f810 	bl	80031f2 <UART_WaitOnFlagUntilTimeout>
 80031d2:	4603      	mov	r3, r0
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d001      	beq.n	80031dc <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 80031d8:	2303      	movs	r3, #3
 80031da:	e006      	b.n	80031ea <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	2220      	movs	r2, #32
 80031e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 80031e4:	2300      	movs	r3, #0
 80031e6:	e000      	b.n	80031ea <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 80031e8:	2302      	movs	r3, #2
  }
}
 80031ea:	4618      	mov	r0, r3
 80031ec:	3720      	adds	r7, #32
 80031ee:	46bd      	mov	sp, r7
 80031f0:	bd80      	pop	{r7, pc}

080031f2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80031f2:	b580      	push	{r7, lr}
 80031f4:	b090      	sub	sp, #64	; 0x40
 80031f6:	af00      	add	r7, sp, #0
 80031f8:	60f8      	str	r0, [r7, #12]
 80031fa:	60b9      	str	r1, [r7, #8]
 80031fc:	603b      	str	r3, [r7, #0]
 80031fe:	4613      	mov	r3, r2
 8003200:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003202:	e050      	b.n	80032a6 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003204:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003206:	f1b3 3fff 	cmp.w	r3, #4294967295
 800320a:	d04c      	beq.n	80032a6 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800320c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800320e:	2b00      	cmp	r3, #0
 8003210:	d007      	beq.n	8003222 <UART_WaitOnFlagUntilTimeout+0x30>
 8003212:	f7fe f99f 	bl	8001554 <HAL_GetTick>
 8003216:	4602      	mov	r2, r0
 8003218:	683b      	ldr	r3, [r7, #0]
 800321a:	1ad3      	subs	r3, r2, r3
 800321c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800321e:	429a      	cmp	r2, r3
 8003220:	d241      	bcs.n	80032a6 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	330c      	adds	r3, #12
 8003228:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800322a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800322c:	e853 3f00 	ldrex	r3, [r3]
 8003230:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003232:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003234:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003238:	63fb      	str	r3, [r7, #60]	; 0x3c
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	330c      	adds	r3, #12
 8003240:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003242:	637a      	str	r2, [r7, #52]	; 0x34
 8003244:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003246:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003248:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800324a:	e841 2300 	strex	r3, r2, [r1]
 800324e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003250:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003252:	2b00      	cmp	r3, #0
 8003254:	d1e5      	bne.n	8003222 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	3314      	adds	r3, #20
 800325c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800325e:	697b      	ldr	r3, [r7, #20]
 8003260:	e853 3f00 	ldrex	r3, [r3]
 8003264:	613b      	str	r3, [r7, #16]
   return(result);
 8003266:	693b      	ldr	r3, [r7, #16]
 8003268:	f023 0301 	bic.w	r3, r3, #1
 800326c:	63bb      	str	r3, [r7, #56]	; 0x38
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	3314      	adds	r3, #20
 8003274:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003276:	623a      	str	r2, [r7, #32]
 8003278:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800327a:	69f9      	ldr	r1, [r7, #28]
 800327c:	6a3a      	ldr	r2, [r7, #32]
 800327e:	e841 2300 	strex	r3, r2, [r1]
 8003282:	61bb      	str	r3, [r7, #24]
   return(result);
 8003284:	69bb      	ldr	r3, [r7, #24]
 8003286:	2b00      	cmp	r3, #0
 8003288:	d1e5      	bne.n	8003256 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	2220      	movs	r2, #32
 800328e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	2220      	movs	r2, #32
 8003296:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	2200      	movs	r2, #0
 800329e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 80032a2:	2303      	movs	r3, #3
 80032a4:	e00f      	b.n	80032c6 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	681a      	ldr	r2, [r3, #0]
 80032ac:	68bb      	ldr	r3, [r7, #8]
 80032ae:	4013      	ands	r3, r2
 80032b0:	68ba      	ldr	r2, [r7, #8]
 80032b2:	429a      	cmp	r2, r3
 80032b4:	bf0c      	ite	eq
 80032b6:	2301      	moveq	r3, #1
 80032b8:	2300      	movne	r3, #0
 80032ba:	b2db      	uxtb	r3, r3
 80032bc:	461a      	mov	r2, r3
 80032be:	79fb      	ldrb	r3, [r7, #7]
 80032c0:	429a      	cmp	r2, r3
 80032c2:	d09f      	beq.n	8003204 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80032c4:	2300      	movs	r3, #0
}
 80032c6:	4618      	mov	r0, r3
 80032c8:	3740      	adds	r7, #64	; 0x40
 80032ca:	46bd      	mov	sp, r7
 80032cc:	bd80      	pop	{r7, pc}
	...

080032d0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80032d0:	b580      	push	{r7, lr}
 80032d2:	b084      	sub	sp, #16
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	691b      	ldr	r3, [r3, #16]
 80032de:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	68da      	ldr	r2, [r3, #12]
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	430a      	orrs	r2, r1
 80032ec:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	689a      	ldr	r2, [r3, #8]
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	691b      	ldr	r3, [r3, #16]
 80032f6:	431a      	orrs	r2, r3
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	695b      	ldr	r3, [r3, #20]
 80032fc:	4313      	orrs	r3, r2
 80032fe:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	68db      	ldr	r3, [r3, #12]
 8003306:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800330a:	f023 030c 	bic.w	r3, r3, #12
 800330e:	687a      	ldr	r2, [r7, #4]
 8003310:	6812      	ldr	r2, [r2, #0]
 8003312:	68b9      	ldr	r1, [r7, #8]
 8003314:	430b      	orrs	r3, r1
 8003316:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	695b      	ldr	r3, [r3, #20]
 800331e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	699a      	ldr	r2, [r3, #24]
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	430a      	orrs	r2, r1
 800332c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	4a2c      	ldr	r2, [pc, #176]	; (80033e4 <UART_SetConfig+0x114>)
 8003334:	4293      	cmp	r3, r2
 8003336:	d103      	bne.n	8003340 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003338:	f7fe ff86 	bl	8002248 <HAL_RCC_GetPCLK2Freq>
 800333c:	60f8      	str	r0, [r7, #12]
 800333e:	e002      	b.n	8003346 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003340:	f7fe ff6e 	bl	8002220 <HAL_RCC_GetPCLK1Freq>
 8003344:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003346:	68fa      	ldr	r2, [r7, #12]
 8003348:	4613      	mov	r3, r2
 800334a:	009b      	lsls	r3, r3, #2
 800334c:	4413      	add	r3, r2
 800334e:	009a      	lsls	r2, r3, #2
 8003350:	441a      	add	r2, r3
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	685b      	ldr	r3, [r3, #4]
 8003356:	009b      	lsls	r3, r3, #2
 8003358:	fbb2 f3f3 	udiv	r3, r2, r3
 800335c:	4a22      	ldr	r2, [pc, #136]	; (80033e8 <UART_SetConfig+0x118>)
 800335e:	fba2 2303 	umull	r2, r3, r2, r3
 8003362:	095b      	lsrs	r3, r3, #5
 8003364:	0119      	lsls	r1, r3, #4
 8003366:	68fa      	ldr	r2, [r7, #12]
 8003368:	4613      	mov	r3, r2
 800336a:	009b      	lsls	r3, r3, #2
 800336c:	4413      	add	r3, r2
 800336e:	009a      	lsls	r2, r3, #2
 8003370:	441a      	add	r2, r3
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	685b      	ldr	r3, [r3, #4]
 8003376:	009b      	lsls	r3, r3, #2
 8003378:	fbb2 f2f3 	udiv	r2, r2, r3
 800337c:	4b1a      	ldr	r3, [pc, #104]	; (80033e8 <UART_SetConfig+0x118>)
 800337e:	fba3 0302 	umull	r0, r3, r3, r2
 8003382:	095b      	lsrs	r3, r3, #5
 8003384:	2064      	movs	r0, #100	; 0x64
 8003386:	fb00 f303 	mul.w	r3, r0, r3
 800338a:	1ad3      	subs	r3, r2, r3
 800338c:	011b      	lsls	r3, r3, #4
 800338e:	3332      	adds	r3, #50	; 0x32
 8003390:	4a15      	ldr	r2, [pc, #84]	; (80033e8 <UART_SetConfig+0x118>)
 8003392:	fba2 2303 	umull	r2, r3, r2, r3
 8003396:	095b      	lsrs	r3, r3, #5
 8003398:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800339c:	4419      	add	r1, r3
 800339e:	68fa      	ldr	r2, [r7, #12]
 80033a0:	4613      	mov	r3, r2
 80033a2:	009b      	lsls	r3, r3, #2
 80033a4:	4413      	add	r3, r2
 80033a6:	009a      	lsls	r2, r3, #2
 80033a8:	441a      	add	r2, r3
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	685b      	ldr	r3, [r3, #4]
 80033ae:	009b      	lsls	r3, r3, #2
 80033b0:	fbb2 f2f3 	udiv	r2, r2, r3
 80033b4:	4b0c      	ldr	r3, [pc, #48]	; (80033e8 <UART_SetConfig+0x118>)
 80033b6:	fba3 0302 	umull	r0, r3, r3, r2
 80033ba:	095b      	lsrs	r3, r3, #5
 80033bc:	2064      	movs	r0, #100	; 0x64
 80033be:	fb00 f303 	mul.w	r3, r0, r3
 80033c2:	1ad3      	subs	r3, r2, r3
 80033c4:	011b      	lsls	r3, r3, #4
 80033c6:	3332      	adds	r3, #50	; 0x32
 80033c8:	4a07      	ldr	r2, [pc, #28]	; (80033e8 <UART_SetConfig+0x118>)
 80033ca:	fba2 2303 	umull	r2, r3, r2, r3
 80033ce:	095b      	lsrs	r3, r3, #5
 80033d0:	f003 020f 	and.w	r2, r3, #15
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	440a      	add	r2, r1
 80033da:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80033dc:	bf00      	nop
 80033de:	3710      	adds	r7, #16
 80033e0:	46bd      	mov	sp, r7
 80033e2:	bd80      	pop	{r7, pc}
 80033e4:	40013800 	.word	0x40013800
 80033e8:	51eb851f 	.word	0x51eb851f

080033ec <__errno>:
 80033ec:	4b01      	ldr	r3, [pc, #4]	; (80033f4 <__errno+0x8>)
 80033ee:	6818      	ldr	r0, [r3, #0]
 80033f0:	4770      	bx	lr
 80033f2:	bf00      	nop
 80033f4:	20000080 	.word	0x20000080

080033f8 <__libc_init_array>:
 80033f8:	b570      	push	{r4, r5, r6, lr}
 80033fa:	2600      	movs	r6, #0
 80033fc:	4d0c      	ldr	r5, [pc, #48]	; (8003430 <__libc_init_array+0x38>)
 80033fe:	4c0d      	ldr	r4, [pc, #52]	; (8003434 <__libc_init_array+0x3c>)
 8003400:	1b64      	subs	r4, r4, r5
 8003402:	10a4      	asrs	r4, r4, #2
 8003404:	42a6      	cmp	r6, r4
 8003406:	d109      	bne.n	800341c <__libc_init_array+0x24>
 8003408:	f000 ff82 	bl	8004310 <_init>
 800340c:	2600      	movs	r6, #0
 800340e:	4d0a      	ldr	r5, [pc, #40]	; (8003438 <__libc_init_array+0x40>)
 8003410:	4c0a      	ldr	r4, [pc, #40]	; (800343c <__libc_init_array+0x44>)
 8003412:	1b64      	subs	r4, r4, r5
 8003414:	10a4      	asrs	r4, r4, #2
 8003416:	42a6      	cmp	r6, r4
 8003418:	d105      	bne.n	8003426 <__libc_init_array+0x2e>
 800341a:	bd70      	pop	{r4, r5, r6, pc}
 800341c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003420:	4798      	blx	r3
 8003422:	3601      	adds	r6, #1
 8003424:	e7ee      	b.n	8003404 <__libc_init_array+0xc>
 8003426:	f855 3b04 	ldr.w	r3, [r5], #4
 800342a:	4798      	blx	r3
 800342c:	3601      	adds	r6, #1
 800342e:	e7f2      	b.n	8003416 <__libc_init_array+0x1e>
 8003430:	08004444 	.word	0x08004444
 8003434:	08004444 	.word	0x08004444
 8003438:	08004444 	.word	0x08004444
 800343c:	08004448 	.word	0x08004448

08003440 <memset>:
 8003440:	4603      	mov	r3, r0
 8003442:	4402      	add	r2, r0
 8003444:	4293      	cmp	r3, r2
 8003446:	d100      	bne.n	800344a <memset+0xa>
 8003448:	4770      	bx	lr
 800344a:	f803 1b01 	strb.w	r1, [r3], #1
 800344e:	e7f9      	b.n	8003444 <memset+0x4>

08003450 <iprintf>:
 8003450:	b40f      	push	{r0, r1, r2, r3}
 8003452:	4b0a      	ldr	r3, [pc, #40]	; (800347c <iprintf+0x2c>)
 8003454:	b513      	push	{r0, r1, r4, lr}
 8003456:	681c      	ldr	r4, [r3, #0]
 8003458:	b124      	cbz	r4, 8003464 <iprintf+0x14>
 800345a:	69a3      	ldr	r3, [r4, #24]
 800345c:	b913      	cbnz	r3, 8003464 <iprintf+0x14>
 800345e:	4620      	mov	r0, r4
 8003460:	f000 f866 	bl	8003530 <__sinit>
 8003464:	ab05      	add	r3, sp, #20
 8003466:	4620      	mov	r0, r4
 8003468:	9a04      	ldr	r2, [sp, #16]
 800346a:	68a1      	ldr	r1, [r4, #8]
 800346c:	9301      	str	r3, [sp, #4]
 800346e:	f000 f981 	bl	8003774 <_vfiprintf_r>
 8003472:	b002      	add	sp, #8
 8003474:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003478:	b004      	add	sp, #16
 800347a:	4770      	bx	lr
 800347c:	20000080 	.word	0x20000080

08003480 <std>:
 8003480:	2300      	movs	r3, #0
 8003482:	b510      	push	{r4, lr}
 8003484:	4604      	mov	r4, r0
 8003486:	e9c0 3300 	strd	r3, r3, [r0]
 800348a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800348e:	6083      	str	r3, [r0, #8]
 8003490:	8181      	strh	r1, [r0, #12]
 8003492:	6643      	str	r3, [r0, #100]	; 0x64
 8003494:	81c2      	strh	r2, [r0, #14]
 8003496:	6183      	str	r3, [r0, #24]
 8003498:	4619      	mov	r1, r3
 800349a:	2208      	movs	r2, #8
 800349c:	305c      	adds	r0, #92	; 0x5c
 800349e:	f7ff ffcf 	bl	8003440 <memset>
 80034a2:	4b05      	ldr	r3, [pc, #20]	; (80034b8 <std+0x38>)
 80034a4:	6224      	str	r4, [r4, #32]
 80034a6:	6263      	str	r3, [r4, #36]	; 0x24
 80034a8:	4b04      	ldr	r3, [pc, #16]	; (80034bc <std+0x3c>)
 80034aa:	62a3      	str	r3, [r4, #40]	; 0x28
 80034ac:	4b04      	ldr	r3, [pc, #16]	; (80034c0 <std+0x40>)
 80034ae:	62e3      	str	r3, [r4, #44]	; 0x2c
 80034b0:	4b04      	ldr	r3, [pc, #16]	; (80034c4 <std+0x44>)
 80034b2:	6323      	str	r3, [r4, #48]	; 0x30
 80034b4:	bd10      	pop	{r4, pc}
 80034b6:	bf00      	nop
 80034b8:	08003d21 	.word	0x08003d21
 80034bc:	08003d43 	.word	0x08003d43
 80034c0:	08003d7b 	.word	0x08003d7b
 80034c4:	08003d9f 	.word	0x08003d9f

080034c8 <_cleanup_r>:
 80034c8:	4901      	ldr	r1, [pc, #4]	; (80034d0 <_cleanup_r+0x8>)
 80034ca:	f000 b8af 	b.w	800362c <_fwalk_reent>
 80034ce:	bf00      	nop
 80034d0:	08004079 	.word	0x08004079

080034d4 <__sfmoreglue>:
 80034d4:	b570      	push	{r4, r5, r6, lr}
 80034d6:	2568      	movs	r5, #104	; 0x68
 80034d8:	1e4a      	subs	r2, r1, #1
 80034da:	4355      	muls	r5, r2
 80034dc:	460e      	mov	r6, r1
 80034de:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80034e2:	f000 f8c5 	bl	8003670 <_malloc_r>
 80034e6:	4604      	mov	r4, r0
 80034e8:	b140      	cbz	r0, 80034fc <__sfmoreglue+0x28>
 80034ea:	2100      	movs	r1, #0
 80034ec:	e9c0 1600 	strd	r1, r6, [r0]
 80034f0:	300c      	adds	r0, #12
 80034f2:	60a0      	str	r0, [r4, #8]
 80034f4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80034f8:	f7ff ffa2 	bl	8003440 <memset>
 80034fc:	4620      	mov	r0, r4
 80034fe:	bd70      	pop	{r4, r5, r6, pc}

08003500 <__sfp_lock_acquire>:
 8003500:	4801      	ldr	r0, [pc, #4]	; (8003508 <__sfp_lock_acquire+0x8>)
 8003502:	f000 b8b3 	b.w	800366c <__retarget_lock_acquire_recursive>
 8003506:	bf00      	nop
 8003508:	200002b4 	.word	0x200002b4

0800350c <__sfp_lock_release>:
 800350c:	4801      	ldr	r0, [pc, #4]	; (8003514 <__sfp_lock_release+0x8>)
 800350e:	f000 b8ae 	b.w	800366e <__retarget_lock_release_recursive>
 8003512:	bf00      	nop
 8003514:	200002b4 	.word	0x200002b4

08003518 <__sinit_lock_acquire>:
 8003518:	4801      	ldr	r0, [pc, #4]	; (8003520 <__sinit_lock_acquire+0x8>)
 800351a:	f000 b8a7 	b.w	800366c <__retarget_lock_acquire_recursive>
 800351e:	bf00      	nop
 8003520:	200002af 	.word	0x200002af

08003524 <__sinit_lock_release>:
 8003524:	4801      	ldr	r0, [pc, #4]	; (800352c <__sinit_lock_release+0x8>)
 8003526:	f000 b8a2 	b.w	800366e <__retarget_lock_release_recursive>
 800352a:	bf00      	nop
 800352c:	200002af 	.word	0x200002af

08003530 <__sinit>:
 8003530:	b510      	push	{r4, lr}
 8003532:	4604      	mov	r4, r0
 8003534:	f7ff fff0 	bl	8003518 <__sinit_lock_acquire>
 8003538:	69a3      	ldr	r3, [r4, #24]
 800353a:	b11b      	cbz	r3, 8003544 <__sinit+0x14>
 800353c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003540:	f7ff bff0 	b.w	8003524 <__sinit_lock_release>
 8003544:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8003548:	6523      	str	r3, [r4, #80]	; 0x50
 800354a:	4b13      	ldr	r3, [pc, #76]	; (8003598 <__sinit+0x68>)
 800354c:	4a13      	ldr	r2, [pc, #76]	; (800359c <__sinit+0x6c>)
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	62a2      	str	r2, [r4, #40]	; 0x28
 8003552:	42a3      	cmp	r3, r4
 8003554:	bf08      	it	eq
 8003556:	2301      	moveq	r3, #1
 8003558:	4620      	mov	r0, r4
 800355a:	bf08      	it	eq
 800355c:	61a3      	streq	r3, [r4, #24]
 800355e:	f000 f81f 	bl	80035a0 <__sfp>
 8003562:	6060      	str	r0, [r4, #4]
 8003564:	4620      	mov	r0, r4
 8003566:	f000 f81b 	bl	80035a0 <__sfp>
 800356a:	60a0      	str	r0, [r4, #8]
 800356c:	4620      	mov	r0, r4
 800356e:	f000 f817 	bl	80035a0 <__sfp>
 8003572:	2200      	movs	r2, #0
 8003574:	2104      	movs	r1, #4
 8003576:	60e0      	str	r0, [r4, #12]
 8003578:	6860      	ldr	r0, [r4, #4]
 800357a:	f7ff ff81 	bl	8003480 <std>
 800357e:	2201      	movs	r2, #1
 8003580:	2109      	movs	r1, #9
 8003582:	68a0      	ldr	r0, [r4, #8]
 8003584:	f7ff ff7c 	bl	8003480 <std>
 8003588:	2202      	movs	r2, #2
 800358a:	2112      	movs	r1, #18
 800358c:	68e0      	ldr	r0, [r4, #12]
 800358e:	f7ff ff77 	bl	8003480 <std>
 8003592:	2301      	movs	r3, #1
 8003594:	61a3      	str	r3, [r4, #24]
 8003596:	e7d1      	b.n	800353c <__sinit+0xc>
 8003598:	080043ac 	.word	0x080043ac
 800359c:	080034c9 	.word	0x080034c9

080035a0 <__sfp>:
 80035a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80035a2:	4607      	mov	r7, r0
 80035a4:	f7ff ffac 	bl	8003500 <__sfp_lock_acquire>
 80035a8:	4b1e      	ldr	r3, [pc, #120]	; (8003624 <__sfp+0x84>)
 80035aa:	681e      	ldr	r6, [r3, #0]
 80035ac:	69b3      	ldr	r3, [r6, #24]
 80035ae:	b913      	cbnz	r3, 80035b6 <__sfp+0x16>
 80035b0:	4630      	mov	r0, r6
 80035b2:	f7ff ffbd 	bl	8003530 <__sinit>
 80035b6:	3648      	adds	r6, #72	; 0x48
 80035b8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80035bc:	3b01      	subs	r3, #1
 80035be:	d503      	bpl.n	80035c8 <__sfp+0x28>
 80035c0:	6833      	ldr	r3, [r6, #0]
 80035c2:	b30b      	cbz	r3, 8003608 <__sfp+0x68>
 80035c4:	6836      	ldr	r6, [r6, #0]
 80035c6:	e7f7      	b.n	80035b8 <__sfp+0x18>
 80035c8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80035cc:	b9d5      	cbnz	r5, 8003604 <__sfp+0x64>
 80035ce:	4b16      	ldr	r3, [pc, #88]	; (8003628 <__sfp+0x88>)
 80035d0:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80035d4:	60e3      	str	r3, [r4, #12]
 80035d6:	6665      	str	r5, [r4, #100]	; 0x64
 80035d8:	f000 f847 	bl	800366a <__retarget_lock_init_recursive>
 80035dc:	f7ff ff96 	bl	800350c <__sfp_lock_release>
 80035e0:	2208      	movs	r2, #8
 80035e2:	4629      	mov	r1, r5
 80035e4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80035e8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80035ec:	6025      	str	r5, [r4, #0]
 80035ee:	61a5      	str	r5, [r4, #24]
 80035f0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80035f4:	f7ff ff24 	bl	8003440 <memset>
 80035f8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80035fc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8003600:	4620      	mov	r0, r4
 8003602:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003604:	3468      	adds	r4, #104	; 0x68
 8003606:	e7d9      	b.n	80035bc <__sfp+0x1c>
 8003608:	2104      	movs	r1, #4
 800360a:	4638      	mov	r0, r7
 800360c:	f7ff ff62 	bl	80034d4 <__sfmoreglue>
 8003610:	4604      	mov	r4, r0
 8003612:	6030      	str	r0, [r6, #0]
 8003614:	2800      	cmp	r0, #0
 8003616:	d1d5      	bne.n	80035c4 <__sfp+0x24>
 8003618:	f7ff ff78 	bl	800350c <__sfp_lock_release>
 800361c:	230c      	movs	r3, #12
 800361e:	603b      	str	r3, [r7, #0]
 8003620:	e7ee      	b.n	8003600 <__sfp+0x60>
 8003622:	bf00      	nop
 8003624:	080043ac 	.word	0x080043ac
 8003628:	ffff0001 	.word	0xffff0001

0800362c <_fwalk_reent>:
 800362c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003630:	4606      	mov	r6, r0
 8003632:	4688      	mov	r8, r1
 8003634:	2700      	movs	r7, #0
 8003636:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800363a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800363e:	f1b9 0901 	subs.w	r9, r9, #1
 8003642:	d505      	bpl.n	8003650 <_fwalk_reent+0x24>
 8003644:	6824      	ldr	r4, [r4, #0]
 8003646:	2c00      	cmp	r4, #0
 8003648:	d1f7      	bne.n	800363a <_fwalk_reent+0xe>
 800364a:	4638      	mov	r0, r7
 800364c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003650:	89ab      	ldrh	r3, [r5, #12]
 8003652:	2b01      	cmp	r3, #1
 8003654:	d907      	bls.n	8003666 <_fwalk_reent+0x3a>
 8003656:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800365a:	3301      	adds	r3, #1
 800365c:	d003      	beq.n	8003666 <_fwalk_reent+0x3a>
 800365e:	4629      	mov	r1, r5
 8003660:	4630      	mov	r0, r6
 8003662:	47c0      	blx	r8
 8003664:	4307      	orrs	r7, r0
 8003666:	3568      	adds	r5, #104	; 0x68
 8003668:	e7e9      	b.n	800363e <_fwalk_reent+0x12>

0800366a <__retarget_lock_init_recursive>:
 800366a:	4770      	bx	lr

0800366c <__retarget_lock_acquire_recursive>:
 800366c:	4770      	bx	lr

0800366e <__retarget_lock_release_recursive>:
 800366e:	4770      	bx	lr

08003670 <_malloc_r>:
 8003670:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003672:	1ccd      	adds	r5, r1, #3
 8003674:	f025 0503 	bic.w	r5, r5, #3
 8003678:	3508      	adds	r5, #8
 800367a:	2d0c      	cmp	r5, #12
 800367c:	bf38      	it	cc
 800367e:	250c      	movcc	r5, #12
 8003680:	2d00      	cmp	r5, #0
 8003682:	4606      	mov	r6, r0
 8003684:	db01      	blt.n	800368a <_malloc_r+0x1a>
 8003686:	42a9      	cmp	r1, r5
 8003688:	d903      	bls.n	8003692 <_malloc_r+0x22>
 800368a:	230c      	movs	r3, #12
 800368c:	6033      	str	r3, [r6, #0]
 800368e:	2000      	movs	r0, #0
 8003690:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003692:	f000 fdb1 	bl	80041f8 <__malloc_lock>
 8003696:	4921      	ldr	r1, [pc, #132]	; (800371c <_malloc_r+0xac>)
 8003698:	680a      	ldr	r2, [r1, #0]
 800369a:	4614      	mov	r4, r2
 800369c:	b99c      	cbnz	r4, 80036c6 <_malloc_r+0x56>
 800369e:	4f20      	ldr	r7, [pc, #128]	; (8003720 <_malloc_r+0xb0>)
 80036a0:	683b      	ldr	r3, [r7, #0]
 80036a2:	b923      	cbnz	r3, 80036ae <_malloc_r+0x3e>
 80036a4:	4621      	mov	r1, r4
 80036a6:	4630      	mov	r0, r6
 80036a8:	f000 fb2a 	bl	8003d00 <_sbrk_r>
 80036ac:	6038      	str	r0, [r7, #0]
 80036ae:	4629      	mov	r1, r5
 80036b0:	4630      	mov	r0, r6
 80036b2:	f000 fb25 	bl	8003d00 <_sbrk_r>
 80036b6:	1c43      	adds	r3, r0, #1
 80036b8:	d123      	bne.n	8003702 <_malloc_r+0x92>
 80036ba:	230c      	movs	r3, #12
 80036bc:	4630      	mov	r0, r6
 80036be:	6033      	str	r3, [r6, #0]
 80036c0:	f000 fda0 	bl	8004204 <__malloc_unlock>
 80036c4:	e7e3      	b.n	800368e <_malloc_r+0x1e>
 80036c6:	6823      	ldr	r3, [r4, #0]
 80036c8:	1b5b      	subs	r3, r3, r5
 80036ca:	d417      	bmi.n	80036fc <_malloc_r+0x8c>
 80036cc:	2b0b      	cmp	r3, #11
 80036ce:	d903      	bls.n	80036d8 <_malloc_r+0x68>
 80036d0:	6023      	str	r3, [r4, #0]
 80036d2:	441c      	add	r4, r3
 80036d4:	6025      	str	r5, [r4, #0]
 80036d6:	e004      	b.n	80036e2 <_malloc_r+0x72>
 80036d8:	6863      	ldr	r3, [r4, #4]
 80036da:	42a2      	cmp	r2, r4
 80036dc:	bf0c      	ite	eq
 80036de:	600b      	streq	r3, [r1, #0]
 80036e0:	6053      	strne	r3, [r2, #4]
 80036e2:	4630      	mov	r0, r6
 80036e4:	f000 fd8e 	bl	8004204 <__malloc_unlock>
 80036e8:	f104 000b 	add.w	r0, r4, #11
 80036ec:	1d23      	adds	r3, r4, #4
 80036ee:	f020 0007 	bic.w	r0, r0, #7
 80036f2:	1ac2      	subs	r2, r0, r3
 80036f4:	d0cc      	beq.n	8003690 <_malloc_r+0x20>
 80036f6:	1a1b      	subs	r3, r3, r0
 80036f8:	50a3      	str	r3, [r4, r2]
 80036fa:	e7c9      	b.n	8003690 <_malloc_r+0x20>
 80036fc:	4622      	mov	r2, r4
 80036fe:	6864      	ldr	r4, [r4, #4]
 8003700:	e7cc      	b.n	800369c <_malloc_r+0x2c>
 8003702:	1cc4      	adds	r4, r0, #3
 8003704:	f024 0403 	bic.w	r4, r4, #3
 8003708:	42a0      	cmp	r0, r4
 800370a:	d0e3      	beq.n	80036d4 <_malloc_r+0x64>
 800370c:	1a21      	subs	r1, r4, r0
 800370e:	4630      	mov	r0, r6
 8003710:	f000 faf6 	bl	8003d00 <_sbrk_r>
 8003714:	3001      	adds	r0, #1
 8003716:	d1dd      	bne.n	80036d4 <_malloc_r+0x64>
 8003718:	e7cf      	b.n	80036ba <_malloc_r+0x4a>
 800371a:	bf00      	nop
 800371c:	20000174 	.word	0x20000174
 8003720:	20000178 	.word	0x20000178

08003724 <__sfputc_r>:
 8003724:	6893      	ldr	r3, [r2, #8]
 8003726:	b410      	push	{r4}
 8003728:	3b01      	subs	r3, #1
 800372a:	2b00      	cmp	r3, #0
 800372c:	6093      	str	r3, [r2, #8]
 800372e:	da07      	bge.n	8003740 <__sfputc_r+0x1c>
 8003730:	6994      	ldr	r4, [r2, #24]
 8003732:	42a3      	cmp	r3, r4
 8003734:	db01      	blt.n	800373a <__sfputc_r+0x16>
 8003736:	290a      	cmp	r1, #10
 8003738:	d102      	bne.n	8003740 <__sfputc_r+0x1c>
 800373a:	bc10      	pop	{r4}
 800373c:	f000 bb34 	b.w	8003da8 <__swbuf_r>
 8003740:	6813      	ldr	r3, [r2, #0]
 8003742:	1c58      	adds	r0, r3, #1
 8003744:	6010      	str	r0, [r2, #0]
 8003746:	7019      	strb	r1, [r3, #0]
 8003748:	4608      	mov	r0, r1
 800374a:	bc10      	pop	{r4}
 800374c:	4770      	bx	lr

0800374e <__sfputs_r>:
 800374e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003750:	4606      	mov	r6, r0
 8003752:	460f      	mov	r7, r1
 8003754:	4614      	mov	r4, r2
 8003756:	18d5      	adds	r5, r2, r3
 8003758:	42ac      	cmp	r4, r5
 800375a:	d101      	bne.n	8003760 <__sfputs_r+0x12>
 800375c:	2000      	movs	r0, #0
 800375e:	e007      	b.n	8003770 <__sfputs_r+0x22>
 8003760:	463a      	mov	r2, r7
 8003762:	4630      	mov	r0, r6
 8003764:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003768:	f7ff ffdc 	bl	8003724 <__sfputc_r>
 800376c:	1c43      	adds	r3, r0, #1
 800376e:	d1f3      	bne.n	8003758 <__sfputs_r+0xa>
 8003770:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003774 <_vfiprintf_r>:
 8003774:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003778:	460d      	mov	r5, r1
 800377a:	4614      	mov	r4, r2
 800377c:	4698      	mov	r8, r3
 800377e:	4606      	mov	r6, r0
 8003780:	b09d      	sub	sp, #116	; 0x74
 8003782:	b118      	cbz	r0, 800378c <_vfiprintf_r+0x18>
 8003784:	6983      	ldr	r3, [r0, #24]
 8003786:	b90b      	cbnz	r3, 800378c <_vfiprintf_r+0x18>
 8003788:	f7ff fed2 	bl	8003530 <__sinit>
 800378c:	4b89      	ldr	r3, [pc, #548]	; (80039b4 <_vfiprintf_r+0x240>)
 800378e:	429d      	cmp	r5, r3
 8003790:	d11b      	bne.n	80037ca <_vfiprintf_r+0x56>
 8003792:	6875      	ldr	r5, [r6, #4]
 8003794:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003796:	07d9      	lsls	r1, r3, #31
 8003798:	d405      	bmi.n	80037a6 <_vfiprintf_r+0x32>
 800379a:	89ab      	ldrh	r3, [r5, #12]
 800379c:	059a      	lsls	r2, r3, #22
 800379e:	d402      	bmi.n	80037a6 <_vfiprintf_r+0x32>
 80037a0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80037a2:	f7ff ff63 	bl	800366c <__retarget_lock_acquire_recursive>
 80037a6:	89ab      	ldrh	r3, [r5, #12]
 80037a8:	071b      	lsls	r3, r3, #28
 80037aa:	d501      	bpl.n	80037b0 <_vfiprintf_r+0x3c>
 80037ac:	692b      	ldr	r3, [r5, #16]
 80037ae:	b9eb      	cbnz	r3, 80037ec <_vfiprintf_r+0x78>
 80037b0:	4629      	mov	r1, r5
 80037b2:	4630      	mov	r0, r6
 80037b4:	f000 fb5c 	bl	8003e70 <__swsetup_r>
 80037b8:	b1c0      	cbz	r0, 80037ec <_vfiprintf_r+0x78>
 80037ba:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80037bc:	07dc      	lsls	r4, r3, #31
 80037be:	d50e      	bpl.n	80037de <_vfiprintf_r+0x6a>
 80037c0:	f04f 30ff 	mov.w	r0, #4294967295
 80037c4:	b01d      	add	sp, #116	; 0x74
 80037c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80037ca:	4b7b      	ldr	r3, [pc, #492]	; (80039b8 <_vfiprintf_r+0x244>)
 80037cc:	429d      	cmp	r5, r3
 80037ce:	d101      	bne.n	80037d4 <_vfiprintf_r+0x60>
 80037d0:	68b5      	ldr	r5, [r6, #8]
 80037d2:	e7df      	b.n	8003794 <_vfiprintf_r+0x20>
 80037d4:	4b79      	ldr	r3, [pc, #484]	; (80039bc <_vfiprintf_r+0x248>)
 80037d6:	429d      	cmp	r5, r3
 80037d8:	bf08      	it	eq
 80037da:	68f5      	ldreq	r5, [r6, #12]
 80037dc:	e7da      	b.n	8003794 <_vfiprintf_r+0x20>
 80037de:	89ab      	ldrh	r3, [r5, #12]
 80037e0:	0598      	lsls	r0, r3, #22
 80037e2:	d4ed      	bmi.n	80037c0 <_vfiprintf_r+0x4c>
 80037e4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80037e6:	f7ff ff42 	bl	800366e <__retarget_lock_release_recursive>
 80037ea:	e7e9      	b.n	80037c0 <_vfiprintf_r+0x4c>
 80037ec:	2300      	movs	r3, #0
 80037ee:	9309      	str	r3, [sp, #36]	; 0x24
 80037f0:	2320      	movs	r3, #32
 80037f2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80037f6:	2330      	movs	r3, #48	; 0x30
 80037f8:	f04f 0901 	mov.w	r9, #1
 80037fc:	f8cd 800c 	str.w	r8, [sp, #12]
 8003800:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 80039c0 <_vfiprintf_r+0x24c>
 8003804:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003808:	4623      	mov	r3, r4
 800380a:	469a      	mov	sl, r3
 800380c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003810:	b10a      	cbz	r2, 8003816 <_vfiprintf_r+0xa2>
 8003812:	2a25      	cmp	r2, #37	; 0x25
 8003814:	d1f9      	bne.n	800380a <_vfiprintf_r+0x96>
 8003816:	ebba 0b04 	subs.w	fp, sl, r4
 800381a:	d00b      	beq.n	8003834 <_vfiprintf_r+0xc0>
 800381c:	465b      	mov	r3, fp
 800381e:	4622      	mov	r2, r4
 8003820:	4629      	mov	r1, r5
 8003822:	4630      	mov	r0, r6
 8003824:	f7ff ff93 	bl	800374e <__sfputs_r>
 8003828:	3001      	adds	r0, #1
 800382a:	f000 80aa 	beq.w	8003982 <_vfiprintf_r+0x20e>
 800382e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003830:	445a      	add	r2, fp
 8003832:	9209      	str	r2, [sp, #36]	; 0x24
 8003834:	f89a 3000 	ldrb.w	r3, [sl]
 8003838:	2b00      	cmp	r3, #0
 800383a:	f000 80a2 	beq.w	8003982 <_vfiprintf_r+0x20e>
 800383e:	2300      	movs	r3, #0
 8003840:	f04f 32ff 	mov.w	r2, #4294967295
 8003844:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003848:	f10a 0a01 	add.w	sl, sl, #1
 800384c:	9304      	str	r3, [sp, #16]
 800384e:	9307      	str	r3, [sp, #28]
 8003850:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003854:	931a      	str	r3, [sp, #104]	; 0x68
 8003856:	4654      	mov	r4, sl
 8003858:	2205      	movs	r2, #5
 800385a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800385e:	4858      	ldr	r0, [pc, #352]	; (80039c0 <_vfiprintf_r+0x24c>)
 8003860:	f000 fcbc 	bl	80041dc <memchr>
 8003864:	9a04      	ldr	r2, [sp, #16]
 8003866:	b9d8      	cbnz	r0, 80038a0 <_vfiprintf_r+0x12c>
 8003868:	06d1      	lsls	r1, r2, #27
 800386a:	bf44      	itt	mi
 800386c:	2320      	movmi	r3, #32
 800386e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003872:	0713      	lsls	r3, r2, #28
 8003874:	bf44      	itt	mi
 8003876:	232b      	movmi	r3, #43	; 0x2b
 8003878:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800387c:	f89a 3000 	ldrb.w	r3, [sl]
 8003880:	2b2a      	cmp	r3, #42	; 0x2a
 8003882:	d015      	beq.n	80038b0 <_vfiprintf_r+0x13c>
 8003884:	4654      	mov	r4, sl
 8003886:	2000      	movs	r0, #0
 8003888:	f04f 0c0a 	mov.w	ip, #10
 800388c:	9a07      	ldr	r2, [sp, #28]
 800388e:	4621      	mov	r1, r4
 8003890:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003894:	3b30      	subs	r3, #48	; 0x30
 8003896:	2b09      	cmp	r3, #9
 8003898:	d94e      	bls.n	8003938 <_vfiprintf_r+0x1c4>
 800389a:	b1b0      	cbz	r0, 80038ca <_vfiprintf_r+0x156>
 800389c:	9207      	str	r2, [sp, #28]
 800389e:	e014      	b.n	80038ca <_vfiprintf_r+0x156>
 80038a0:	eba0 0308 	sub.w	r3, r0, r8
 80038a4:	fa09 f303 	lsl.w	r3, r9, r3
 80038a8:	4313      	orrs	r3, r2
 80038aa:	46a2      	mov	sl, r4
 80038ac:	9304      	str	r3, [sp, #16]
 80038ae:	e7d2      	b.n	8003856 <_vfiprintf_r+0xe2>
 80038b0:	9b03      	ldr	r3, [sp, #12]
 80038b2:	1d19      	adds	r1, r3, #4
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	9103      	str	r1, [sp, #12]
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	bfbb      	ittet	lt
 80038bc:	425b      	neglt	r3, r3
 80038be:	f042 0202 	orrlt.w	r2, r2, #2
 80038c2:	9307      	strge	r3, [sp, #28]
 80038c4:	9307      	strlt	r3, [sp, #28]
 80038c6:	bfb8      	it	lt
 80038c8:	9204      	strlt	r2, [sp, #16]
 80038ca:	7823      	ldrb	r3, [r4, #0]
 80038cc:	2b2e      	cmp	r3, #46	; 0x2e
 80038ce:	d10c      	bne.n	80038ea <_vfiprintf_r+0x176>
 80038d0:	7863      	ldrb	r3, [r4, #1]
 80038d2:	2b2a      	cmp	r3, #42	; 0x2a
 80038d4:	d135      	bne.n	8003942 <_vfiprintf_r+0x1ce>
 80038d6:	9b03      	ldr	r3, [sp, #12]
 80038d8:	3402      	adds	r4, #2
 80038da:	1d1a      	adds	r2, r3, #4
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	9203      	str	r2, [sp, #12]
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	bfb8      	it	lt
 80038e4:	f04f 33ff 	movlt.w	r3, #4294967295
 80038e8:	9305      	str	r3, [sp, #20]
 80038ea:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80039d0 <_vfiprintf_r+0x25c>
 80038ee:	2203      	movs	r2, #3
 80038f0:	4650      	mov	r0, sl
 80038f2:	7821      	ldrb	r1, [r4, #0]
 80038f4:	f000 fc72 	bl	80041dc <memchr>
 80038f8:	b140      	cbz	r0, 800390c <_vfiprintf_r+0x198>
 80038fa:	2340      	movs	r3, #64	; 0x40
 80038fc:	eba0 000a 	sub.w	r0, r0, sl
 8003900:	fa03 f000 	lsl.w	r0, r3, r0
 8003904:	9b04      	ldr	r3, [sp, #16]
 8003906:	3401      	adds	r4, #1
 8003908:	4303      	orrs	r3, r0
 800390a:	9304      	str	r3, [sp, #16]
 800390c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003910:	2206      	movs	r2, #6
 8003912:	482c      	ldr	r0, [pc, #176]	; (80039c4 <_vfiprintf_r+0x250>)
 8003914:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003918:	f000 fc60 	bl	80041dc <memchr>
 800391c:	2800      	cmp	r0, #0
 800391e:	d03f      	beq.n	80039a0 <_vfiprintf_r+0x22c>
 8003920:	4b29      	ldr	r3, [pc, #164]	; (80039c8 <_vfiprintf_r+0x254>)
 8003922:	bb1b      	cbnz	r3, 800396c <_vfiprintf_r+0x1f8>
 8003924:	9b03      	ldr	r3, [sp, #12]
 8003926:	3307      	adds	r3, #7
 8003928:	f023 0307 	bic.w	r3, r3, #7
 800392c:	3308      	adds	r3, #8
 800392e:	9303      	str	r3, [sp, #12]
 8003930:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003932:	443b      	add	r3, r7
 8003934:	9309      	str	r3, [sp, #36]	; 0x24
 8003936:	e767      	b.n	8003808 <_vfiprintf_r+0x94>
 8003938:	460c      	mov	r4, r1
 800393a:	2001      	movs	r0, #1
 800393c:	fb0c 3202 	mla	r2, ip, r2, r3
 8003940:	e7a5      	b.n	800388e <_vfiprintf_r+0x11a>
 8003942:	2300      	movs	r3, #0
 8003944:	f04f 0c0a 	mov.w	ip, #10
 8003948:	4619      	mov	r1, r3
 800394a:	3401      	adds	r4, #1
 800394c:	9305      	str	r3, [sp, #20]
 800394e:	4620      	mov	r0, r4
 8003950:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003954:	3a30      	subs	r2, #48	; 0x30
 8003956:	2a09      	cmp	r2, #9
 8003958:	d903      	bls.n	8003962 <_vfiprintf_r+0x1ee>
 800395a:	2b00      	cmp	r3, #0
 800395c:	d0c5      	beq.n	80038ea <_vfiprintf_r+0x176>
 800395e:	9105      	str	r1, [sp, #20]
 8003960:	e7c3      	b.n	80038ea <_vfiprintf_r+0x176>
 8003962:	4604      	mov	r4, r0
 8003964:	2301      	movs	r3, #1
 8003966:	fb0c 2101 	mla	r1, ip, r1, r2
 800396a:	e7f0      	b.n	800394e <_vfiprintf_r+0x1da>
 800396c:	ab03      	add	r3, sp, #12
 800396e:	9300      	str	r3, [sp, #0]
 8003970:	462a      	mov	r2, r5
 8003972:	4630      	mov	r0, r6
 8003974:	4b15      	ldr	r3, [pc, #84]	; (80039cc <_vfiprintf_r+0x258>)
 8003976:	a904      	add	r1, sp, #16
 8003978:	f3af 8000 	nop.w
 800397c:	4607      	mov	r7, r0
 800397e:	1c78      	adds	r0, r7, #1
 8003980:	d1d6      	bne.n	8003930 <_vfiprintf_r+0x1bc>
 8003982:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003984:	07d9      	lsls	r1, r3, #31
 8003986:	d405      	bmi.n	8003994 <_vfiprintf_r+0x220>
 8003988:	89ab      	ldrh	r3, [r5, #12]
 800398a:	059a      	lsls	r2, r3, #22
 800398c:	d402      	bmi.n	8003994 <_vfiprintf_r+0x220>
 800398e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003990:	f7ff fe6d 	bl	800366e <__retarget_lock_release_recursive>
 8003994:	89ab      	ldrh	r3, [r5, #12]
 8003996:	065b      	lsls	r3, r3, #25
 8003998:	f53f af12 	bmi.w	80037c0 <_vfiprintf_r+0x4c>
 800399c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800399e:	e711      	b.n	80037c4 <_vfiprintf_r+0x50>
 80039a0:	ab03      	add	r3, sp, #12
 80039a2:	9300      	str	r3, [sp, #0]
 80039a4:	462a      	mov	r2, r5
 80039a6:	4630      	mov	r0, r6
 80039a8:	4b08      	ldr	r3, [pc, #32]	; (80039cc <_vfiprintf_r+0x258>)
 80039aa:	a904      	add	r1, sp, #16
 80039ac:	f000 f882 	bl	8003ab4 <_printf_i>
 80039b0:	e7e4      	b.n	800397c <_vfiprintf_r+0x208>
 80039b2:	bf00      	nop
 80039b4:	080043d0 	.word	0x080043d0
 80039b8:	080043f0 	.word	0x080043f0
 80039bc:	080043b0 	.word	0x080043b0
 80039c0:	08004410 	.word	0x08004410
 80039c4:	0800441a 	.word	0x0800441a
 80039c8:	00000000 	.word	0x00000000
 80039cc:	0800374f 	.word	0x0800374f
 80039d0:	08004416 	.word	0x08004416

080039d4 <_printf_common>:
 80039d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80039d8:	4616      	mov	r6, r2
 80039da:	4699      	mov	r9, r3
 80039dc:	688a      	ldr	r2, [r1, #8]
 80039de:	690b      	ldr	r3, [r1, #16]
 80039e0:	4607      	mov	r7, r0
 80039e2:	4293      	cmp	r3, r2
 80039e4:	bfb8      	it	lt
 80039e6:	4613      	movlt	r3, r2
 80039e8:	6033      	str	r3, [r6, #0]
 80039ea:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80039ee:	460c      	mov	r4, r1
 80039f0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80039f4:	b10a      	cbz	r2, 80039fa <_printf_common+0x26>
 80039f6:	3301      	adds	r3, #1
 80039f8:	6033      	str	r3, [r6, #0]
 80039fa:	6823      	ldr	r3, [r4, #0]
 80039fc:	0699      	lsls	r1, r3, #26
 80039fe:	bf42      	ittt	mi
 8003a00:	6833      	ldrmi	r3, [r6, #0]
 8003a02:	3302      	addmi	r3, #2
 8003a04:	6033      	strmi	r3, [r6, #0]
 8003a06:	6825      	ldr	r5, [r4, #0]
 8003a08:	f015 0506 	ands.w	r5, r5, #6
 8003a0c:	d106      	bne.n	8003a1c <_printf_common+0x48>
 8003a0e:	f104 0a19 	add.w	sl, r4, #25
 8003a12:	68e3      	ldr	r3, [r4, #12]
 8003a14:	6832      	ldr	r2, [r6, #0]
 8003a16:	1a9b      	subs	r3, r3, r2
 8003a18:	42ab      	cmp	r3, r5
 8003a1a:	dc28      	bgt.n	8003a6e <_printf_common+0x9a>
 8003a1c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003a20:	1e13      	subs	r3, r2, #0
 8003a22:	6822      	ldr	r2, [r4, #0]
 8003a24:	bf18      	it	ne
 8003a26:	2301      	movne	r3, #1
 8003a28:	0692      	lsls	r2, r2, #26
 8003a2a:	d42d      	bmi.n	8003a88 <_printf_common+0xb4>
 8003a2c:	4649      	mov	r1, r9
 8003a2e:	4638      	mov	r0, r7
 8003a30:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003a34:	47c0      	blx	r8
 8003a36:	3001      	adds	r0, #1
 8003a38:	d020      	beq.n	8003a7c <_printf_common+0xa8>
 8003a3a:	6823      	ldr	r3, [r4, #0]
 8003a3c:	68e5      	ldr	r5, [r4, #12]
 8003a3e:	f003 0306 	and.w	r3, r3, #6
 8003a42:	2b04      	cmp	r3, #4
 8003a44:	bf18      	it	ne
 8003a46:	2500      	movne	r5, #0
 8003a48:	6832      	ldr	r2, [r6, #0]
 8003a4a:	f04f 0600 	mov.w	r6, #0
 8003a4e:	68a3      	ldr	r3, [r4, #8]
 8003a50:	bf08      	it	eq
 8003a52:	1aad      	subeq	r5, r5, r2
 8003a54:	6922      	ldr	r2, [r4, #16]
 8003a56:	bf08      	it	eq
 8003a58:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003a5c:	4293      	cmp	r3, r2
 8003a5e:	bfc4      	itt	gt
 8003a60:	1a9b      	subgt	r3, r3, r2
 8003a62:	18ed      	addgt	r5, r5, r3
 8003a64:	341a      	adds	r4, #26
 8003a66:	42b5      	cmp	r5, r6
 8003a68:	d11a      	bne.n	8003aa0 <_printf_common+0xcc>
 8003a6a:	2000      	movs	r0, #0
 8003a6c:	e008      	b.n	8003a80 <_printf_common+0xac>
 8003a6e:	2301      	movs	r3, #1
 8003a70:	4652      	mov	r2, sl
 8003a72:	4649      	mov	r1, r9
 8003a74:	4638      	mov	r0, r7
 8003a76:	47c0      	blx	r8
 8003a78:	3001      	adds	r0, #1
 8003a7a:	d103      	bne.n	8003a84 <_printf_common+0xb0>
 8003a7c:	f04f 30ff 	mov.w	r0, #4294967295
 8003a80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003a84:	3501      	adds	r5, #1
 8003a86:	e7c4      	b.n	8003a12 <_printf_common+0x3e>
 8003a88:	2030      	movs	r0, #48	; 0x30
 8003a8a:	18e1      	adds	r1, r4, r3
 8003a8c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003a90:	1c5a      	adds	r2, r3, #1
 8003a92:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003a96:	4422      	add	r2, r4
 8003a98:	3302      	adds	r3, #2
 8003a9a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003a9e:	e7c5      	b.n	8003a2c <_printf_common+0x58>
 8003aa0:	2301      	movs	r3, #1
 8003aa2:	4622      	mov	r2, r4
 8003aa4:	4649      	mov	r1, r9
 8003aa6:	4638      	mov	r0, r7
 8003aa8:	47c0      	blx	r8
 8003aaa:	3001      	adds	r0, #1
 8003aac:	d0e6      	beq.n	8003a7c <_printf_common+0xa8>
 8003aae:	3601      	adds	r6, #1
 8003ab0:	e7d9      	b.n	8003a66 <_printf_common+0x92>
	...

08003ab4 <_printf_i>:
 8003ab4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003ab8:	460c      	mov	r4, r1
 8003aba:	7e27      	ldrb	r7, [r4, #24]
 8003abc:	4691      	mov	r9, r2
 8003abe:	2f78      	cmp	r7, #120	; 0x78
 8003ac0:	4680      	mov	r8, r0
 8003ac2:	469a      	mov	sl, r3
 8003ac4:	990c      	ldr	r1, [sp, #48]	; 0x30
 8003ac6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003aca:	d807      	bhi.n	8003adc <_printf_i+0x28>
 8003acc:	2f62      	cmp	r7, #98	; 0x62
 8003ace:	d80a      	bhi.n	8003ae6 <_printf_i+0x32>
 8003ad0:	2f00      	cmp	r7, #0
 8003ad2:	f000 80d9 	beq.w	8003c88 <_printf_i+0x1d4>
 8003ad6:	2f58      	cmp	r7, #88	; 0x58
 8003ad8:	f000 80a4 	beq.w	8003c24 <_printf_i+0x170>
 8003adc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003ae0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003ae4:	e03a      	b.n	8003b5c <_printf_i+0xa8>
 8003ae6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003aea:	2b15      	cmp	r3, #21
 8003aec:	d8f6      	bhi.n	8003adc <_printf_i+0x28>
 8003aee:	a001      	add	r0, pc, #4	; (adr r0, 8003af4 <_printf_i+0x40>)
 8003af0:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8003af4:	08003b4d 	.word	0x08003b4d
 8003af8:	08003b61 	.word	0x08003b61
 8003afc:	08003add 	.word	0x08003add
 8003b00:	08003add 	.word	0x08003add
 8003b04:	08003add 	.word	0x08003add
 8003b08:	08003add 	.word	0x08003add
 8003b0c:	08003b61 	.word	0x08003b61
 8003b10:	08003add 	.word	0x08003add
 8003b14:	08003add 	.word	0x08003add
 8003b18:	08003add 	.word	0x08003add
 8003b1c:	08003add 	.word	0x08003add
 8003b20:	08003c6f 	.word	0x08003c6f
 8003b24:	08003b91 	.word	0x08003b91
 8003b28:	08003c51 	.word	0x08003c51
 8003b2c:	08003add 	.word	0x08003add
 8003b30:	08003add 	.word	0x08003add
 8003b34:	08003c91 	.word	0x08003c91
 8003b38:	08003add 	.word	0x08003add
 8003b3c:	08003b91 	.word	0x08003b91
 8003b40:	08003add 	.word	0x08003add
 8003b44:	08003add 	.word	0x08003add
 8003b48:	08003c59 	.word	0x08003c59
 8003b4c:	680b      	ldr	r3, [r1, #0]
 8003b4e:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003b52:	1d1a      	adds	r2, r3, #4
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	600a      	str	r2, [r1, #0]
 8003b58:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003b5c:	2301      	movs	r3, #1
 8003b5e:	e0a4      	b.n	8003caa <_printf_i+0x1f6>
 8003b60:	6825      	ldr	r5, [r4, #0]
 8003b62:	6808      	ldr	r0, [r1, #0]
 8003b64:	062e      	lsls	r6, r5, #24
 8003b66:	f100 0304 	add.w	r3, r0, #4
 8003b6a:	d50a      	bpl.n	8003b82 <_printf_i+0xce>
 8003b6c:	6805      	ldr	r5, [r0, #0]
 8003b6e:	600b      	str	r3, [r1, #0]
 8003b70:	2d00      	cmp	r5, #0
 8003b72:	da03      	bge.n	8003b7c <_printf_i+0xc8>
 8003b74:	232d      	movs	r3, #45	; 0x2d
 8003b76:	426d      	negs	r5, r5
 8003b78:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003b7c:	230a      	movs	r3, #10
 8003b7e:	485e      	ldr	r0, [pc, #376]	; (8003cf8 <_printf_i+0x244>)
 8003b80:	e019      	b.n	8003bb6 <_printf_i+0x102>
 8003b82:	f015 0f40 	tst.w	r5, #64	; 0x40
 8003b86:	6805      	ldr	r5, [r0, #0]
 8003b88:	600b      	str	r3, [r1, #0]
 8003b8a:	bf18      	it	ne
 8003b8c:	b22d      	sxthne	r5, r5
 8003b8e:	e7ef      	b.n	8003b70 <_printf_i+0xbc>
 8003b90:	680b      	ldr	r3, [r1, #0]
 8003b92:	6825      	ldr	r5, [r4, #0]
 8003b94:	1d18      	adds	r0, r3, #4
 8003b96:	6008      	str	r0, [r1, #0]
 8003b98:	0628      	lsls	r0, r5, #24
 8003b9a:	d501      	bpl.n	8003ba0 <_printf_i+0xec>
 8003b9c:	681d      	ldr	r5, [r3, #0]
 8003b9e:	e002      	b.n	8003ba6 <_printf_i+0xf2>
 8003ba0:	0669      	lsls	r1, r5, #25
 8003ba2:	d5fb      	bpl.n	8003b9c <_printf_i+0xe8>
 8003ba4:	881d      	ldrh	r5, [r3, #0]
 8003ba6:	2f6f      	cmp	r7, #111	; 0x6f
 8003ba8:	bf0c      	ite	eq
 8003baa:	2308      	moveq	r3, #8
 8003bac:	230a      	movne	r3, #10
 8003bae:	4852      	ldr	r0, [pc, #328]	; (8003cf8 <_printf_i+0x244>)
 8003bb0:	2100      	movs	r1, #0
 8003bb2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003bb6:	6866      	ldr	r6, [r4, #4]
 8003bb8:	2e00      	cmp	r6, #0
 8003bba:	bfa8      	it	ge
 8003bbc:	6821      	ldrge	r1, [r4, #0]
 8003bbe:	60a6      	str	r6, [r4, #8]
 8003bc0:	bfa4      	itt	ge
 8003bc2:	f021 0104 	bicge.w	r1, r1, #4
 8003bc6:	6021      	strge	r1, [r4, #0]
 8003bc8:	b90d      	cbnz	r5, 8003bce <_printf_i+0x11a>
 8003bca:	2e00      	cmp	r6, #0
 8003bcc:	d04d      	beq.n	8003c6a <_printf_i+0x1b6>
 8003bce:	4616      	mov	r6, r2
 8003bd0:	fbb5 f1f3 	udiv	r1, r5, r3
 8003bd4:	fb03 5711 	mls	r7, r3, r1, r5
 8003bd8:	5dc7      	ldrb	r7, [r0, r7]
 8003bda:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003bde:	462f      	mov	r7, r5
 8003be0:	42bb      	cmp	r3, r7
 8003be2:	460d      	mov	r5, r1
 8003be4:	d9f4      	bls.n	8003bd0 <_printf_i+0x11c>
 8003be6:	2b08      	cmp	r3, #8
 8003be8:	d10b      	bne.n	8003c02 <_printf_i+0x14e>
 8003bea:	6823      	ldr	r3, [r4, #0]
 8003bec:	07df      	lsls	r7, r3, #31
 8003bee:	d508      	bpl.n	8003c02 <_printf_i+0x14e>
 8003bf0:	6923      	ldr	r3, [r4, #16]
 8003bf2:	6861      	ldr	r1, [r4, #4]
 8003bf4:	4299      	cmp	r1, r3
 8003bf6:	bfde      	ittt	le
 8003bf8:	2330      	movle	r3, #48	; 0x30
 8003bfa:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003bfe:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003c02:	1b92      	subs	r2, r2, r6
 8003c04:	6122      	str	r2, [r4, #16]
 8003c06:	464b      	mov	r3, r9
 8003c08:	4621      	mov	r1, r4
 8003c0a:	4640      	mov	r0, r8
 8003c0c:	f8cd a000 	str.w	sl, [sp]
 8003c10:	aa03      	add	r2, sp, #12
 8003c12:	f7ff fedf 	bl	80039d4 <_printf_common>
 8003c16:	3001      	adds	r0, #1
 8003c18:	d14c      	bne.n	8003cb4 <_printf_i+0x200>
 8003c1a:	f04f 30ff 	mov.w	r0, #4294967295
 8003c1e:	b004      	add	sp, #16
 8003c20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003c24:	4834      	ldr	r0, [pc, #208]	; (8003cf8 <_printf_i+0x244>)
 8003c26:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8003c2a:	680e      	ldr	r6, [r1, #0]
 8003c2c:	6823      	ldr	r3, [r4, #0]
 8003c2e:	f856 5b04 	ldr.w	r5, [r6], #4
 8003c32:	061f      	lsls	r7, r3, #24
 8003c34:	600e      	str	r6, [r1, #0]
 8003c36:	d514      	bpl.n	8003c62 <_printf_i+0x1ae>
 8003c38:	07d9      	lsls	r1, r3, #31
 8003c3a:	bf44      	itt	mi
 8003c3c:	f043 0320 	orrmi.w	r3, r3, #32
 8003c40:	6023      	strmi	r3, [r4, #0]
 8003c42:	b91d      	cbnz	r5, 8003c4c <_printf_i+0x198>
 8003c44:	6823      	ldr	r3, [r4, #0]
 8003c46:	f023 0320 	bic.w	r3, r3, #32
 8003c4a:	6023      	str	r3, [r4, #0]
 8003c4c:	2310      	movs	r3, #16
 8003c4e:	e7af      	b.n	8003bb0 <_printf_i+0xfc>
 8003c50:	6823      	ldr	r3, [r4, #0]
 8003c52:	f043 0320 	orr.w	r3, r3, #32
 8003c56:	6023      	str	r3, [r4, #0]
 8003c58:	2378      	movs	r3, #120	; 0x78
 8003c5a:	4828      	ldr	r0, [pc, #160]	; (8003cfc <_printf_i+0x248>)
 8003c5c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003c60:	e7e3      	b.n	8003c2a <_printf_i+0x176>
 8003c62:	065e      	lsls	r6, r3, #25
 8003c64:	bf48      	it	mi
 8003c66:	b2ad      	uxthmi	r5, r5
 8003c68:	e7e6      	b.n	8003c38 <_printf_i+0x184>
 8003c6a:	4616      	mov	r6, r2
 8003c6c:	e7bb      	b.n	8003be6 <_printf_i+0x132>
 8003c6e:	680b      	ldr	r3, [r1, #0]
 8003c70:	6826      	ldr	r6, [r4, #0]
 8003c72:	1d1d      	adds	r5, r3, #4
 8003c74:	6960      	ldr	r0, [r4, #20]
 8003c76:	600d      	str	r5, [r1, #0]
 8003c78:	0635      	lsls	r5, r6, #24
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	d501      	bpl.n	8003c82 <_printf_i+0x1ce>
 8003c7e:	6018      	str	r0, [r3, #0]
 8003c80:	e002      	b.n	8003c88 <_printf_i+0x1d4>
 8003c82:	0671      	lsls	r1, r6, #25
 8003c84:	d5fb      	bpl.n	8003c7e <_printf_i+0x1ca>
 8003c86:	8018      	strh	r0, [r3, #0]
 8003c88:	2300      	movs	r3, #0
 8003c8a:	4616      	mov	r6, r2
 8003c8c:	6123      	str	r3, [r4, #16]
 8003c8e:	e7ba      	b.n	8003c06 <_printf_i+0x152>
 8003c90:	680b      	ldr	r3, [r1, #0]
 8003c92:	1d1a      	adds	r2, r3, #4
 8003c94:	600a      	str	r2, [r1, #0]
 8003c96:	681e      	ldr	r6, [r3, #0]
 8003c98:	2100      	movs	r1, #0
 8003c9a:	4630      	mov	r0, r6
 8003c9c:	6862      	ldr	r2, [r4, #4]
 8003c9e:	f000 fa9d 	bl	80041dc <memchr>
 8003ca2:	b108      	cbz	r0, 8003ca8 <_printf_i+0x1f4>
 8003ca4:	1b80      	subs	r0, r0, r6
 8003ca6:	6060      	str	r0, [r4, #4]
 8003ca8:	6863      	ldr	r3, [r4, #4]
 8003caa:	6123      	str	r3, [r4, #16]
 8003cac:	2300      	movs	r3, #0
 8003cae:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003cb2:	e7a8      	b.n	8003c06 <_printf_i+0x152>
 8003cb4:	4632      	mov	r2, r6
 8003cb6:	4649      	mov	r1, r9
 8003cb8:	4640      	mov	r0, r8
 8003cba:	6923      	ldr	r3, [r4, #16]
 8003cbc:	47d0      	blx	sl
 8003cbe:	3001      	adds	r0, #1
 8003cc0:	d0ab      	beq.n	8003c1a <_printf_i+0x166>
 8003cc2:	6823      	ldr	r3, [r4, #0]
 8003cc4:	079b      	lsls	r3, r3, #30
 8003cc6:	d413      	bmi.n	8003cf0 <_printf_i+0x23c>
 8003cc8:	68e0      	ldr	r0, [r4, #12]
 8003cca:	9b03      	ldr	r3, [sp, #12]
 8003ccc:	4298      	cmp	r0, r3
 8003cce:	bfb8      	it	lt
 8003cd0:	4618      	movlt	r0, r3
 8003cd2:	e7a4      	b.n	8003c1e <_printf_i+0x16a>
 8003cd4:	2301      	movs	r3, #1
 8003cd6:	4632      	mov	r2, r6
 8003cd8:	4649      	mov	r1, r9
 8003cda:	4640      	mov	r0, r8
 8003cdc:	47d0      	blx	sl
 8003cde:	3001      	adds	r0, #1
 8003ce0:	d09b      	beq.n	8003c1a <_printf_i+0x166>
 8003ce2:	3501      	adds	r5, #1
 8003ce4:	68e3      	ldr	r3, [r4, #12]
 8003ce6:	9903      	ldr	r1, [sp, #12]
 8003ce8:	1a5b      	subs	r3, r3, r1
 8003cea:	42ab      	cmp	r3, r5
 8003cec:	dcf2      	bgt.n	8003cd4 <_printf_i+0x220>
 8003cee:	e7eb      	b.n	8003cc8 <_printf_i+0x214>
 8003cf0:	2500      	movs	r5, #0
 8003cf2:	f104 0619 	add.w	r6, r4, #25
 8003cf6:	e7f5      	b.n	8003ce4 <_printf_i+0x230>
 8003cf8:	08004421 	.word	0x08004421
 8003cfc:	08004432 	.word	0x08004432

08003d00 <_sbrk_r>:
 8003d00:	b538      	push	{r3, r4, r5, lr}
 8003d02:	2300      	movs	r3, #0
 8003d04:	4d05      	ldr	r5, [pc, #20]	; (8003d1c <_sbrk_r+0x1c>)
 8003d06:	4604      	mov	r4, r0
 8003d08:	4608      	mov	r0, r1
 8003d0a:	602b      	str	r3, [r5, #0]
 8003d0c:	f7fd fb98 	bl	8001440 <_sbrk>
 8003d10:	1c43      	adds	r3, r0, #1
 8003d12:	d102      	bne.n	8003d1a <_sbrk_r+0x1a>
 8003d14:	682b      	ldr	r3, [r5, #0]
 8003d16:	b103      	cbz	r3, 8003d1a <_sbrk_r+0x1a>
 8003d18:	6023      	str	r3, [r4, #0]
 8003d1a:	bd38      	pop	{r3, r4, r5, pc}
 8003d1c:	200002b8 	.word	0x200002b8

08003d20 <__sread>:
 8003d20:	b510      	push	{r4, lr}
 8003d22:	460c      	mov	r4, r1
 8003d24:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003d28:	f000 fabe 	bl	80042a8 <_read_r>
 8003d2c:	2800      	cmp	r0, #0
 8003d2e:	bfab      	itete	ge
 8003d30:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003d32:	89a3      	ldrhlt	r3, [r4, #12]
 8003d34:	181b      	addge	r3, r3, r0
 8003d36:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003d3a:	bfac      	ite	ge
 8003d3c:	6563      	strge	r3, [r4, #84]	; 0x54
 8003d3e:	81a3      	strhlt	r3, [r4, #12]
 8003d40:	bd10      	pop	{r4, pc}

08003d42 <__swrite>:
 8003d42:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003d46:	461f      	mov	r7, r3
 8003d48:	898b      	ldrh	r3, [r1, #12]
 8003d4a:	4605      	mov	r5, r0
 8003d4c:	05db      	lsls	r3, r3, #23
 8003d4e:	460c      	mov	r4, r1
 8003d50:	4616      	mov	r6, r2
 8003d52:	d505      	bpl.n	8003d60 <__swrite+0x1e>
 8003d54:	2302      	movs	r3, #2
 8003d56:	2200      	movs	r2, #0
 8003d58:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003d5c:	f000 f9c8 	bl	80040f0 <_lseek_r>
 8003d60:	89a3      	ldrh	r3, [r4, #12]
 8003d62:	4632      	mov	r2, r6
 8003d64:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003d68:	81a3      	strh	r3, [r4, #12]
 8003d6a:	4628      	mov	r0, r5
 8003d6c:	463b      	mov	r3, r7
 8003d6e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003d72:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003d76:	f000 b869 	b.w	8003e4c <_write_r>

08003d7a <__sseek>:
 8003d7a:	b510      	push	{r4, lr}
 8003d7c:	460c      	mov	r4, r1
 8003d7e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003d82:	f000 f9b5 	bl	80040f0 <_lseek_r>
 8003d86:	1c43      	adds	r3, r0, #1
 8003d88:	89a3      	ldrh	r3, [r4, #12]
 8003d8a:	bf15      	itete	ne
 8003d8c:	6560      	strne	r0, [r4, #84]	; 0x54
 8003d8e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003d92:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003d96:	81a3      	strheq	r3, [r4, #12]
 8003d98:	bf18      	it	ne
 8003d9a:	81a3      	strhne	r3, [r4, #12]
 8003d9c:	bd10      	pop	{r4, pc}

08003d9e <__sclose>:
 8003d9e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003da2:	f000 b8d3 	b.w	8003f4c <_close_r>
	...

08003da8 <__swbuf_r>:
 8003da8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003daa:	460e      	mov	r6, r1
 8003dac:	4614      	mov	r4, r2
 8003dae:	4605      	mov	r5, r0
 8003db0:	b118      	cbz	r0, 8003dba <__swbuf_r+0x12>
 8003db2:	6983      	ldr	r3, [r0, #24]
 8003db4:	b90b      	cbnz	r3, 8003dba <__swbuf_r+0x12>
 8003db6:	f7ff fbbb 	bl	8003530 <__sinit>
 8003dba:	4b21      	ldr	r3, [pc, #132]	; (8003e40 <__swbuf_r+0x98>)
 8003dbc:	429c      	cmp	r4, r3
 8003dbe:	d12b      	bne.n	8003e18 <__swbuf_r+0x70>
 8003dc0:	686c      	ldr	r4, [r5, #4]
 8003dc2:	69a3      	ldr	r3, [r4, #24]
 8003dc4:	60a3      	str	r3, [r4, #8]
 8003dc6:	89a3      	ldrh	r3, [r4, #12]
 8003dc8:	071a      	lsls	r2, r3, #28
 8003dca:	d52f      	bpl.n	8003e2c <__swbuf_r+0x84>
 8003dcc:	6923      	ldr	r3, [r4, #16]
 8003dce:	b36b      	cbz	r3, 8003e2c <__swbuf_r+0x84>
 8003dd0:	6923      	ldr	r3, [r4, #16]
 8003dd2:	6820      	ldr	r0, [r4, #0]
 8003dd4:	b2f6      	uxtb	r6, r6
 8003dd6:	1ac0      	subs	r0, r0, r3
 8003dd8:	6963      	ldr	r3, [r4, #20]
 8003dda:	4637      	mov	r7, r6
 8003ddc:	4283      	cmp	r3, r0
 8003dde:	dc04      	bgt.n	8003dea <__swbuf_r+0x42>
 8003de0:	4621      	mov	r1, r4
 8003de2:	4628      	mov	r0, r5
 8003de4:	f000 f948 	bl	8004078 <_fflush_r>
 8003de8:	bb30      	cbnz	r0, 8003e38 <__swbuf_r+0x90>
 8003dea:	68a3      	ldr	r3, [r4, #8]
 8003dec:	3001      	adds	r0, #1
 8003dee:	3b01      	subs	r3, #1
 8003df0:	60a3      	str	r3, [r4, #8]
 8003df2:	6823      	ldr	r3, [r4, #0]
 8003df4:	1c5a      	adds	r2, r3, #1
 8003df6:	6022      	str	r2, [r4, #0]
 8003df8:	701e      	strb	r6, [r3, #0]
 8003dfa:	6963      	ldr	r3, [r4, #20]
 8003dfc:	4283      	cmp	r3, r0
 8003dfe:	d004      	beq.n	8003e0a <__swbuf_r+0x62>
 8003e00:	89a3      	ldrh	r3, [r4, #12]
 8003e02:	07db      	lsls	r3, r3, #31
 8003e04:	d506      	bpl.n	8003e14 <__swbuf_r+0x6c>
 8003e06:	2e0a      	cmp	r6, #10
 8003e08:	d104      	bne.n	8003e14 <__swbuf_r+0x6c>
 8003e0a:	4621      	mov	r1, r4
 8003e0c:	4628      	mov	r0, r5
 8003e0e:	f000 f933 	bl	8004078 <_fflush_r>
 8003e12:	b988      	cbnz	r0, 8003e38 <__swbuf_r+0x90>
 8003e14:	4638      	mov	r0, r7
 8003e16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003e18:	4b0a      	ldr	r3, [pc, #40]	; (8003e44 <__swbuf_r+0x9c>)
 8003e1a:	429c      	cmp	r4, r3
 8003e1c:	d101      	bne.n	8003e22 <__swbuf_r+0x7a>
 8003e1e:	68ac      	ldr	r4, [r5, #8]
 8003e20:	e7cf      	b.n	8003dc2 <__swbuf_r+0x1a>
 8003e22:	4b09      	ldr	r3, [pc, #36]	; (8003e48 <__swbuf_r+0xa0>)
 8003e24:	429c      	cmp	r4, r3
 8003e26:	bf08      	it	eq
 8003e28:	68ec      	ldreq	r4, [r5, #12]
 8003e2a:	e7ca      	b.n	8003dc2 <__swbuf_r+0x1a>
 8003e2c:	4621      	mov	r1, r4
 8003e2e:	4628      	mov	r0, r5
 8003e30:	f000 f81e 	bl	8003e70 <__swsetup_r>
 8003e34:	2800      	cmp	r0, #0
 8003e36:	d0cb      	beq.n	8003dd0 <__swbuf_r+0x28>
 8003e38:	f04f 37ff 	mov.w	r7, #4294967295
 8003e3c:	e7ea      	b.n	8003e14 <__swbuf_r+0x6c>
 8003e3e:	bf00      	nop
 8003e40:	080043d0 	.word	0x080043d0
 8003e44:	080043f0 	.word	0x080043f0
 8003e48:	080043b0 	.word	0x080043b0

08003e4c <_write_r>:
 8003e4c:	b538      	push	{r3, r4, r5, lr}
 8003e4e:	4604      	mov	r4, r0
 8003e50:	4608      	mov	r0, r1
 8003e52:	4611      	mov	r1, r2
 8003e54:	2200      	movs	r2, #0
 8003e56:	4d05      	ldr	r5, [pc, #20]	; (8003e6c <_write_r+0x20>)
 8003e58:	602a      	str	r2, [r5, #0]
 8003e5a:	461a      	mov	r2, r3
 8003e5c:	f7fd faa3 	bl	80013a6 <_write>
 8003e60:	1c43      	adds	r3, r0, #1
 8003e62:	d102      	bne.n	8003e6a <_write_r+0x1e>
 8003e64:	682b      	ldr	r3, [r5, #0]
 8003e66:	b103      	cbz	r3, 8003e6a <_write_r+0x1e>
 8003e68:	6023      	str	r3, [r4, #0]
 8003e6a:	bd38      	pop	{r3, r4, r5, pc}
 8003e6c:	200002b8 	.word	0x200002b8

08003e70 <__swsetup_r>:
 8003e70:	4b32      	ldr	r3, [pc, #200]	; (8003f3c <__swsetup_r+0xcc>)
 8003e72:	b570      	push	{r4, r5, r6, lr}
 8003e74:	681d      	ldr	r5, [r3, #0]
 8003e76:	4606      	mov	r6, r0
 8003e78:	460c      	mov	r4, r1
 8003e7a:	b125      	cbz	r5, 8003e86 <__swsetup_r+0x16>
 8003e7c:	69ab      	ldr	r3, [r5, #24]
 8003e7e:	b913      	cbnz	r3, 8003e86 <__swsetup_r+0x16>
 8003e80:	4628      	mov	r0, r5
 8003e82:	f7ff fb55 	bl	8003530 <__sinit>
 8003e86:	4b2e      	ldr	r3, [pc, #184]	; (8003f40 <__swsetup_r+0xd0>)
 8003e88:	429c      	cmp	r4, r3
 8003e8a:	d10f      	bne.n	8003eac <__swsetup_r+0x3c>
 8003e8c:	686c      	ldr	r4, [r5, #4]
 8003e8e:	89a3      	ldrh	r3, [r4, #12]
 8003e90:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003e94:	0719      	lsls	r1, r3, #28
 8003e96:	d42c      	bmi.n	8003ef2 <__swsetup_r+0x82>
 8003e98:	06dd      	lsls	r5, r3, #27
 8003e9a:	d411      	bmi.n	8003ec0 <__swsetup_r+0x50>
 8003e9c:	2309      	movs	r3, #9
 8003e9e:	6033      	str	r3, [r6, #0]
 8003ea0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8003ea4:	f04f 30ff 	mov.w	r0, #4294967295
 8003ea8:	81a3      	strh	r3, [r4, #12]
 8003eaa:	e03e      	b.n	8003f2a <__swsetup_r+0xba>
 8003eac:	4b25      	ldr	r3, [pc, #148]	; (8003f44 <__swsetup_r+0xd4>)
 8003eae:	429c      	cmp	r4, r3
 8003eb0:	d101      	bne.n	8003eb6 <__swsetup_r+0x46>
 8003eb2:	68ac      	ldr	r4, [r5, #8]
 8003eb4:	e7eb      	b.n	8003e8e <__swsetup_r+0x1e>
 8003eb6:	4b24      	ldr	r3, [pc, #144]	; (8003f48 <__swsetup_r+0xd8>)
 8003eb8:	429c      	cmp	r4, r3
 8003eba:	bf08      	it	eq
 8003ebc:	68ec      	ldreq	r4, [r5, #12]
 8003ebe:	e7e6      	b.n	8003e8e <__swsetup_r+0x1e>
 8003ec0:	0758      	lsls	r0, r3, #29
 8003ec2:	d512      	bpl.n	8003eea <__swsetup_r+0x7a>
 8003ec4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003ec6:	b141      	cbz	r1, 8003eda <__swsetup_r+0x6a>
 8003ec8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003ecc:	4299      	cmp	r1, r3
 8003ece:	d002      	beq.n	8003ed6 <__swsetup_r+0x66>
 8003ed0:	4630      	mov	r0, r6
 8003ed2:	f000 f99d 	bl	8004210 <_free_r>
 8003ed6:	2300      	movs	r3, #0
 8003ed8:	6363      	str	r3, [r4, #52]	; 0x34
 8003eda:	89a3      	ldrh	r3, [r4, #12]
 8003edc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003ee0:	81a3      	strh	r3, [r4, #12]
 8003ee2:	2300      	movs	r3, #0
 8003ee4:	6063      	str	r3, [r4, #4]
 8003ee6:	6923      	ldr	r3, [r4, #16]
 8003ee8:	6023      	str	r3, [r4, #0]
 8003eea:	89a3      	ldrh	r3, [r4, #12]
 8003eec:	f043 0308 	orr.w	r3, r3, #8
 8003ef0:	81a3      	strh	r3, [r4, #12]
 8003ef2:	6923      	ldr	r3, [r4, #16]
 8003ef4:	b94b      	cbnz	r3, 8003f0a <__swsetup_r+0x9a>
 8003ef6:	89a3      	ldrh	r3, [r4, #12]
 8003ef8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003efc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003f00:	d003      	beq.n	8003f0a <__swsetup_r+0x9a>
 8003f02:	4621      	mov	r1, r4
 8003f04:	4630      	mov	r0, r6
 8003f06:	f000 f929 	bl	800415c <__smakebuf_r>
 8003f0a:	89a0      	ldrh	r0, [r4, #12]
 8003f0c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003f10:	f010 0301 	ands.w	r3, r0, #1
 8003f14:	d00a      	beq.n	8003f2c <__swsetup_r+0xbc>
 8003f16:	2300      	movs	r3, #0
 8003f18:	60a3      	str	r3, [r4, #8]
 8003f1a:	6963      	ldr	r3, [r4, #20]
 8003f1c:	425b      	negs	r3, r3
 8003f1e:	61a3      	str	r3, [r4, #24]
 8003f20:	6923      	ldr	r3, [r4, #16]
 8003f22:	b943      	cbnz	r3, 8003f36 <__swsetup_r+0xc6>
 8003f24:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8003f28:	d1ba      	bne.n	8003ea0 <__swsetup_r+0x30>
 8003f2a:	bd70      	pop	{r4, r5, r6, pc}
 8003f2c:	0781      	lsls	r1, r0, #30
 8003f2e:	bf58      	it	pl
 8003f30:	6963      	ldrpl	r3, [r4, #20]
 8003f32:	60a3      	str	r3, [r4, #8]
 8003f34:	e7f4      	b.n	8003f20 <__swsetup_r+0xb0>
 8003f36:	2000      	movs	r0, #0
 8003f38:	e7f7      	b.n	8003f2a <__swsetup_r+0xba>
 8003f3a:	bf00      	nop
 8003f3c:	20000080 	.word	0x20000080
 8003f40:	080043d0 	.word	0x080043d0
 8003f44:	080043f0 	.word	0x080043f0
 8003f48:	080043b0 	.word	0x080043b0

08003f4c <_close_r>:
 8003f4c:	b538      	push	{r3, r4, r5, lr}
 8003f4e:	2300      	movs	r3, #0
 8003f50:	4d05      	ldr	r5, [pc, #20]	; (8003f68 <_close_r+0x1c>)
 8003f52:	4604      	mov	r4, r0
 8003f54:	4608      	mov	r0, r1
 8003f56:	602b      	str	r3, [r5, #0]
 8003f58:	f7fd fa41 	bl	80013de <_close>
 8003f5c:	1c43      	adds	r3, r0, #1
 8003f5e:	d102      	bne.n	8003f66 <_close_r+0x1a>
 8003f60:	682b      	ldr	r3, [r5, #0]
 8003f62:	b103      	cbz	r3, 8003f66 <_close_r+0x1a>
 8003f64:	6023      	str	r3, [r4, #0]
 8003f66:	bd38      	pop	{r3, r4, r5, pc}
 8003f68:	200002b8 	.word	0x200002b8

08003f6c <__sflush_r>:
 8003f6c:	898a      	ldrh	r2, [r1, #12]
 8003f6e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003f72:	4605      	mov	r5, r0
 8003f74:	0710      	lsls	r0, r2, #28
 8003f76:	460c      	mov	r4, r1
 8003f78:	d458      	bmi.n	800402c <__sflush_r+0xc0>
 8003f7a:	684b      	ldr	r3, [r1, #4]
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	dc05      	bgt.n	8003f8c <__sflush_r+0x20>
 8003f80:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	dc02      	bgt.n	8003f8c <__sflush_r+0x20>
 8003f86:	2000      	movs	r0, #0
 8003f88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003f8c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003f8e:	2e00      	cmp	r6, #0
 8003f90:	d0f9      	beq.n	8003f86 <__sflush_r+0x1a>
 8003f92:	2300      	movs	r3, #0
 8003f94:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003f98:	682f      	ldr	r7, [r5, #0]
 8003f9a:	602b      	str	r3, [r5, #0]
 8003f9c:	d032      	beq.n	8004004 <__sflush_r+0x98>
 8003f9e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003fa0:	89a3      	ldrh	r3, [r4, #12]
 8003fa2:	075a      	lsls	r2, r3, #29
 8003fa4:	d505      	bpl.n	8003fb2 <__sflush_r+0x46>
 8003fa6:	6863      	ldr	r3, [r4, #4]
 8003fa8:	1ac0      	subs	r0, r0, r3
 8003faa:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003fac:	b10b      	cbz	r3, 8003fb2 <__sflush_r+0x46>
 8003fae:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003fb0:	1ac0      	subs	r0, r0, r3
 8003fb2:	2300      	movs	r3, #0
 8003fb4:	4602      	mov	r2, r0
 8003fb6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003fb8:	4628      	mov	r0, r5
 8003fba:	6a21      	ldr	r1, [r4, #32]
 8003fbc:	47b0      	blx	r6
 8003fbe:	1c43      	adds	r3, r0, #1
 8003fc0:	89a3      	ldrh	r3, [r4, #12]
 8003fc2:	d106      	bne.n	8003fd2 <__sflush_r+0x66>
 8003fc4:	6829      	ldr	r1, [r5, #0]
 8003fc6:	291d      	cmp	r1, #29
 8003fc8:	d82c      	bhi.n	8004024 <__sflush_r+0xb8>
 8003fca:	4a2a      	ldr	r2, [pc, #168]	; (8004074 <__sflush_r+0x108>)
 8003fcc:	40ca      	lsrs	r2, r1
 8003fce:	07d6      	lsls	r6, r2, #31
 8003fd0:	d528      	bpl.n	8004024 <__sflush_r+0xb8>
 8003fd2:	2200      	movs	r2, #0
 8003fd4:	6062      	str	r2, [r4, #4]
 8003fd6:	6922      	ldr	r2, [r4, #16]
 8003fd8:	04d9      	lsls	r1, r3, #19
 8003fda:	6022      	str	r2, [r4, #0]
 8003fdc:	d504      	bpl.n	8003fe8 <__sflush_r+0x7c>
 8003fde:	1c42      	adds	r2, r0, #1
 8003fe0:	d101      	bne.n	8003fe6 <__sflush_r+0x7a>
 8003fe2:	682b      	ldr	r3, [r5, #0]
 8003fe4:	b903      	cbnz	r3, 8003fe8 <__sflush_r+0x7c>
 8003fe6:	6560      	str	r0, [r4, #84]	; 0x54
 8003fe8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003fea:	602f      	str	r7, [r5, #0]
 8003fec:	2900      	cmp	r1, #0
 8003fee:	d0ca      	beq.n	8003f86 <__sflush_r+0x1a>
 8003ff0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003ff4:	4299      	cmp	r1, r3
 8003ff6:	d002      	beq.n	8003ffe <__sflush_r+0x92>
 8003ff8:	4628      	mov	r0, r5
 8003ffa:	f000 f909 	bl	8004210 <_free_r>
 8003ffe:	2000      	movs	r0, #0
 8004000:	6360      	str	r0, [r4, #52]	; 0x34
 8004002:	e7c1      	b.n	8003f88 <__sflush_r+0x1c>
 8004004:	6a21      	ldr	r1, [r4, #32]
 8004006:	2301      	movs	r3, #1
 8004008:	4628      	mov	r0, r5
 800400a:	47b0      	blx	r6
 800400c:	1c41      	adds	r1, r0, #1
 800400e:	d1c7      	bne.n	8003fa0 <__sflush_r+0x34>
 8004010:	682b      	ldr	r3, [r5, #0]
 8004012:	2b00      	cmp	r3, #0
 8004014:	d0c4      	beq.n	8003fa0 <__sflush_r+0x34>
 8004016:	2b1d      	cmp	r3, #29
 8004018:	d001      	beq.n	800401e <__sflush_r+0xb2>
 800401a:	2b16      	cmp	r3, #22
 800401c:	d101      	bne.n	8004022 <__sflush_r+0xb6>
 800401e:	602f      	str	r7, [r5, #0]
 8004020:	e7b1      	b.n	8003f86 <__sflush_r+0x1a>
 8004022:	89a3      	ldrh	r3, [r4, #12]
 8004024:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004028:	81a3      	strh	r3, [r4, #12]
 800402a:	e7ad      	b.n	8003f88 <__sflush_r+0x1c>
 800402c:	690f      	ldr	r7, [r1, #16]
 800402e:	2f00      	cmp	r7, #0
 8004030:	d0a9      	beq.n	8003f86 <__sflush_r+0x1a>
 8004032:	0793      	lsls	r3, r2, #30
 8004034:	bf18      	it	ne
 8004036:	2300      	movne	r3, #0
 8004038:	680e      	ldr	r6, [r1, #0]
 800403a:	bf08      	it	eq
 800403c:	694b      	ldreq	r3, [r1, #20]
 800403e:	eba6 0807 	sub.w	r8, r6, r7
 8004042:	600f      	str	r7, [r1, #0]
 8004044:	608b      	str	r3, [r1, #8]
 8004046:	f1b8 0f00 	cmp.w	r8, #0
 800404a:	dd9c      	ble.n	8003f86 <__sflush_r+0x1a>
 800404c:	4643      	mov	r3, r8
 800404e:	463a      	mov	r2, r7
 8004050:	4628      	mov	r0, r5
 8004052:	6a21      	ldr	r1, [r4, #32]
 8004054:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004056:	47b0      	blx	r6
 8004058:	2800      	cmp	r0, #0
 800405a:	dc06      	bgt.n	800406a <__sflush_r+0xfe>
 800405c:	89a3      	ldrh	r3, [r4, #12]
 800405e:	f04f 30ff 	mov.w	r0, #4294967295
 8004062:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004066:	81a3      	strh	r3, [r4, #12]
 8004068:	e78e      	b.n	8003f88 <__sflush_r+0x1c>
 800406a:	4407      	add	r7, r0
 800406c:	eba8 0800 	sub.w	r8, r8, r0
 8004070:	e7e9      	b.n	8004046 <__sflush_r+0xda>
 8004072:	bf00      	nop
 8004074:	20400001 	.word	0x20400001

08004078 <_fflush_r>:
 8004078:	b538      	push	{r3, r4, r5, lr}
 800407a:	690b      	ldr	r3, [r1, #16]
 800407c:	4605      	mov	r5, r0
 800407e:	460c      	mov	r4, r1
 8004080:	b913      	cbnz	r3, 8004088 <_fflush_r+0x10>
 8004082:	2500      	movs	r5, #0
 8004084:	4628      	mov	r0, r5
 8004086:	bd38      	pop	{r3, r4, r5, pc}
 8004088:	b118      	cbz	r0, 8004092 <_fflush_r+0x1a>
 800408a:	6983      	ldr	r3, [r0, #24]
 800408c:	b90b      	cbnz	r3, 8004092 <_fflush_r+0x1a>
 800408e:	f7ff fa4f 	bl	8003530 <__sinit>
 8004092:	4b14      	ldr	r3, [pc, #80]	; (80040e4 <_fflush_r+0x6c>)
 8004094:	429c      	cmp	r4, r3
 8004096:	d11b      	bne.n	80040d0 <_fflush_r+0x58>
 8004098:	686c      	ldr	r4, [r5, #4]
 800409a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d0ef      	beq.n	8004082 <_fflush_r+0xa>
 80040a2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80040a4:	07d0      	lsls	r0, r2, #31
 80040a6:	d404      	bmi.n	80040b2 <_fflush_r+0x3a>
 80040a8:	0599      	lsls	r1, r3, #22
 80040aa:	d402      	bmi.n	80040b2 <_fflush_r+0x3a>
 80040ac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80040ae:	f7ff fadd 	bl	800366c <__retarget_lock_acquire_recursive>
 80040b2:	4628      	mov	r0, r5
 80040b4:	4621      	mov	r1, r4
 80040b6:	f7ff ff59 	bl	8003f6c <__sflush_r>
 80040ba:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80040bc:	4605      	mov	r5, r0
 80040be:	07da      	lsls	r2, r3, #31
 80040c0:	d4e0      	bmi.n	8004084 <_fflush_r+0xc>
 80040c2:	89a3      	ldrh	r3, [r4, #12]
 80040c4:	059b      	lsls	r3, r3, #22
 80040c6:	d4dd      	bmi.n	8004084 <_fflush_r+0xc>
 80040c8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80040ca:	f7ff fad0 	bl	800366e <__retarget_lock_release_recursive>
 80040ce:	e7d9      	b.n	8004084 <_fflush_r+0xc>
 80040d0:	4b05      	ldr	r3, [pc, #20]	; (80040e8 <_fflush_r+0x70>)
 80040d2:	429c      	cmp	r4, r3
 80040d4:	d101      	bne.n	80040da <_fflush_r+0x62>
 80040d6:	68ac      	ldr	r4, [r5, #8]
 80040d8:	e7df      	b.n	800409a <_fflush_r+0x22>
 80040da:	4b04      	ldr	r3, [pc, #16]	; (80040ec <_fflush_r+0x74>)
 80040dc:	429c      	cmp	r4, r3
 80040de:	bf08      	it	eq
 80040e0:	68ec      	ldreq	r4, [r5, #12]
 80040e2:	e7da      	b.n	800409a <_fflush_r+0x22>
 80040e4:	080043d0 	.word	0x080043d0
 80040e8:	080043f0 	.word	0x080043f0
 80040ec:	080043b0 	.word	0x080043b0

080040f0 <_lseek_r>:
 80040f0:	b538      	push	{r3, r4, r5, lr}
 80040f2:	4604      	mov	r4, r0
 80040f4:	4608      	mov	r0, r1
 80040f6:	4611      	mov	r1, r2
 80040f8:	2200      	movs	r2, #0
 80040fa:	4d05      	ldr	r5, [pc, #20]	; (8004110 <_lseek_r+0x20>)
 80040fc:	602a      	str	r2, [r5, #0]
 80040fe:	461a      	mov	r2, r3
 8004100:	f7fd f991 	bl	8001426 <_lseek>
 8004104:	1c43      	adds	r3, r0, #1
 8004106:	d102      	bne.n	800410e <_lseek_r+0x1e>
 8004108:	682b      	ldr	r3, [r5, #0]
 800410a:	b103      	cbz	r3, 800410e <_lseek_r+0x1e>
 800410c:	6023      	str	r3, [r4, #0]
 800410e:	bd38      	pop	{r3, r4, r5, pc}
 8004110:	200002b8 	.word	0x200002b8

08004114 <__swhatbuf_r>:
 8004114:	b570      	push	{r4, r5, r6, lr}
 8004116:	460e      	mov	r6, r1
 8004118:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800411c:	4614      	mov	r4, r2
 800411e:	2900      	cmp	r1, #0
 8004120:	461d      	mov	r5, r3
 8004122:	b096      	sub	sp, #88	; 0x58
 8004124:	da07      	bge.n	8004136 <__swhatbuf_r+0x22>
 8004126:	2300      	movs	r3, #0
 8004128:	602b      	str	r3, [r5, #0]
 800412a:	89b3      	ldrh	r3, [r6, #12]
 800412c:	061a      	lsls	r2, r3, #24
 800412e:	d410      	bmi.n	8004152 <__swhatbuf_r+0x3e>
 8004130:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004134:	e00e      	b.n	8004154 <__swhatbuf_r+0x40>
 8004136:	466a      	mov	r2, sp
 8004138:	f000 f8c8 	bl	80042cc <_fstat_r>
 800413c:	2800      	cmp	r0, #0
 800413e:	dbf2      	blt.n	8004126 <__swhatbuf_r+0x12>
 8004140:	9a01      	ldr	r2, [sp, #4]
 8004142:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8004146:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800414a:	425a      	negs	r2, r3
 800414c:	415a      	adcs	r2, r3
 800414e:	602a      	str	r2, [r5, #0]
 8004150:	e7ee      	b.n	8004130 <__swhatbuf_r+0x1c>
 8004152:	2340      	movs	r3, #64	; 0x40
 8004154:	2000      	movs	r0, #0
 8004156:	6023      	str	r3, [r4, #0]
 8004158:	b016      	add	sp, #88	; 0x58
 800415a:	bd70      	pop	{r4, r5, r6, pc}

0800415c <__smakebuf_r>:
 800415c:	898b      	ldrh	r3, [r1, #12]
 800415e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004160:	079d      	lsls	r5, r3, #30
 8004162:	4606      	mov	r6, r0
 8004164:	460c      	mov	r4, r1
 8004166:	d507      	bpl.n	8004178 <__smakebuf_r+0x1c>
 8004168:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800416c:	6023      	str	r3, [r4, #0]
 800416e:	6123      	str	r3, [r4, #16]
 8004170:	2301      	movs	r3, #1
 8004172:	6163      	str	r3, [r4, #20]
 8004174:	b002      	add	sp, #8
 8004176:	bd70      	pop	{r4, r5, r6, pc}
 8004178:	466a      	mov	r2, sp
 800417a:	ab01      	add	r3, sp, #4
 800417c:	f7ff ffca 	bl	8004114 <__swhatbuf_r>
 8004180:	9900      	ldr	r1, [sp, #0]
 8004182:	4605      	mov	r5, r0
 8004184:	4630      	mov	r0, r6
 8004186:	f7ff fa73 	bl	8003670 <_malloc_r>
 800418a:	b948      	cbnz	r0, 80041a0 <__smakebuf_r+0x44>
 800418c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004190:	059a      	lsls	r2, r3, #22
 8004192:	d4ef      	bmi.n	8004174 <__smakebuf_r+0x18>
 8004194:	f023 0303 	bic.w	r3, r3, #3
 8004198:	f043 0302 	orr.w	r3, r3, #2
 800419c:	81a3      	strh	r3, [r4, #12]
 800419e:	e7e3      	b.n	8004168 <__smakebuf_r+0xc>
 80041a0:	4b0d      	ldr	r3, [pc, #52]	; (80041d8 <__smakebuf_r+0x7c>)
 80041a2:	62b3      	str	r3, [r6, #40]	; 0x28
 80041a4:	89a3      	ldrh	r3, [r4, #12]
 80041a6:	6020      	str	r0, [r4, #0]
 80041a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80041ac:	81a3      	strh	r3, [r4, #12]
 80041ae:	9b00      	ldr	r3, [sp, #0]
 80041b0:	6120      	str	r0, [r4, #16]
 80041b2:	6163      	str	r3, [r4, #20]
 80041b4:	9b01      	ldr	r3, [sp, #4]
 80041b6:	b15b      	cbz	r3, 80041d0 <__smakebuf_r+0x74>
 80041b8:	4630      	mov	r0, r6
 80041ba:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80041be:	f000 f897 	bl	80042f0 <_isatty_r>
 80041c2:	b128      	cbz	r0, 80041d0 <__smakebuf_r+0x74>
 80041c4:	89a3      	ldrh	r3, [r4, #12]
 80041c6:	f023 0303 	bic.w	r3, r3, #3
 80041ca:	f043 0301 	orr.w	r3, r3, #1
 80041ce:	81a3      	strh	r3, [r4, #12]
 80041d0:	89a0      	ldrh	r0, [r4, #12]
 80041d2:	4305      	orrs	r5, r0
 80041d4:	81a5      	strh	r5, [r4, #12]
 80041d6:	e7cd      	b.n	8004174 <__smakebuf_r+0x18>
 80041d8:	080034c9 	.word	0x080034c9

080041dc <memchr>:
 80041dc:	4603      	mov	r3, r0
 80041de:	b510      	push	{r4, lr}
 80041e0:	b2c9      	uxtb	r1, r1
 80041e2:	4402      	add	r2, r0
 80041e4:	4293      	cmp	r3, r2
 80041e6:	4618      	mov	r0, r3
 80041e8:	d101      	bne.n	80041ee <memchr+0x12>
 80041ea:	2000      	movs	r0, #0
 80041ec:	e003      	b.n	80041f6 <memchr+0x1a>
 80041ee:	7804      	ldrb	r4, [r0, #0]
 80041f0:	3301      	adds	r3, #1
 80041f2:	428c      	cmp	r4, r1
 80041f4:	d1f6      	bne.n	80041e4 <memchr+0x8>
 80041f6:	bd10      	pop	{r4, pc}

080041f8 <__malloc_lock>:
 80041f8:	4801      	ldr	r0, [pc, #4]	; (8004200 <__malloc_lock+0x8>)
 80041fa:	f7ff ba37 	b.w	800366c <__retarget_lock_acquire_recursive>
 80041fe:	bf00      	nop
 8004200:	200002b0 	.word	0x200002b0

08004204 <__malloc_unlock>:
 8004204:	4801      	ldr	r0, [pc, #4]	; (800420c <__malloc_unlock+0x8>)
 8004206:	f7ff ba32 	b.w	800366e <__retarget_lock_release_recursive>
 800420a:	bf00      	nop
 800420c:	200002b0 	.word	0x200002b0

08004210 <_free_r>:
 8004210:	b538      	push	{r3, r4, r5, lr}
 8004212:	4605      	mov	r5, r0
 8004214:	2900      	cmp	r1, #0
 8004216:	d043      	beq.n	80042a0 <_free_r+0x90>
 8004218:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800421c:	1f0c      	subs	r4, r1, #4
 800421e:	2b00      	cmp	r3, #0
 8004220:	bfb8      	it	lt
 8004222:	18e4      	addlt	r4, r4, r3
 8004224:	f7ff ffe8 	bl	80041f8 <__malloc_lock>
 8004228:	4a1e      	ldr	r2, [pc, #120]	; (80042a4 <_free_r+0x94>)
 800422a:	6813      	ldr	r3, [r2, #0]
 800422c:	4610      	mov	r0, r2
 800422e:	b933      	cbnz	r3, 800423e <_free_r+0x2e>
 8004230:	6063      	str	r3, [r4, #4]
 8004232:	6014      	str	r4, [r2, #0]
 8004234:	4628      	mov	r0, r5
 8004236:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800423a:	f7ff bfe3 	b.w	8004204 <__malloc_unlock>
 800423e:	42a3      	cmp	r3, r4
 8004240:	d90a      	bls.n	8004258 <_free_r+0x48>
 8004242:	6821      	ldr	r1, [r4, #0]
 8004244:	1862      	adds	r2, r4, r1
 8004246:	4293      	cmp	r3, r2
 8004248:	bf01      	itttt	eq
 800424a:	681a      	ldreq	r2, [r3, #0]
 800424c:	685b      	ldreq	r3, [r3, #4]
 800424e:	1852      	addeq	r2, r2, r1
 8004250:	6022      	streq	r2, [r4, #0]
 8004252:	6063      	str	r3, [r4, #4]
 8004254:	6004      	str	r4, [r0, #0]
 8004256:	e7ed      	b.n	8004234 <_free_r+0x24>
 8004258:	461a      	mov	r2, r3
 800425a:	685b      	ldr	r3, [r3, #4]
 800425c:	b10b      	cbz	r3, 8004262 <_free_r+0x52>
 800425e:	42a3      	cmp	r3, r4
 8004260:	d9fa      	bls.n	8004258 <_free_r+0x48>
 8004262:	6811      	ldr	r1, [r2, #0]
 8004264:	1850      	adds	r0, r2, r1
 8004266:	42a0      	cmp	r0, r4
 8004268:	d10b      	bne.n	8004282 <_free_r+0x72>
 800426a:	6820      	ldr	r0, [r4, #0]
 800426c:	4401      	add	r1, r0
 800426e:	1850      	adds	r0, r2, r1
 8004270:	4283      	cmp	r3, r0
 8004272:	6011      	str	r1, [r2, #0]
 8004274:	d1de      	bne.n	8004234 <_free_r+0x24>
 8004276:	6818      	ldr	r0, [r3, #0]
 8004278:	685b      	ldr	r3, [r3, #4]
 800427a:	4401      	add	r1, r0
 800427c:	6011      	str	r1, [r2, #0]
 800427e:	6053      	str	r3, [r2, #4]
 8004280:	e7d8      	b.n	8004234 <_free_r+0x24>
 8004282:	d902      	bls.n	800428a <_free_r+0x7a>
 8004284:	230c      	movs	r3, #12
 8004286:	602b      	str	r3, [r5, #0]
 8004288:	e7d4      	b.n	8004234 <_free_r+0x24>
 800428a:	6820      	ldr	r0, [r4, #0]
 800428c:	1821      	adds	r1, r4, r0
 800428e:	428b      	cmp	r3, r1
 8004290:	bf01      	itttt	eq
 8004292:	6819      	ldreq	r1, [r3, #0]
 8004294:	685b      	ldreq	r3, [r3, #4]
 8004296:	1809      	addeq	r1, r1, r0
 8004298:	6021      	streq	r1, [r4, #0]
 800429a:	6063      	str	r3, [r4, #4]
 800429c:	6054      	str	r4, [r2, #4]
 800429e:	e7c9      	b.n	8004234 <_free_r+0x24>
 80042a0:	bd38      	pop	{r3, r4, r5, pc}
 80042a2:	bf00      	nop
 80042a4:	20000174 	.word	0x20000174

080042a8 <_read_r>:
 80042a8:	b538      	push	{r3, r4, r5, lr}
 80042aa:	4604      	mov	r4, r0
 80042ac:	4608      	mov	r0, r1
 80042ae:	4611      	mov	r1, r2
 80042b0:	2200      	movs	r2, #0
 80042b2:	4d05      	ldr	r5, [pc, #20]	; (80042c8 <_read_r+0x20>)
 80042b4:	602a      	str	r2, [r5, #0]
 80042b6:	461a      	mov	r2, r3
 80042b8:	f7fd f858 	bl	800136c <_read>
 80042bc:	1c43      	adds	r3, r0, #1
 80042be:	d102      	bne.n	80042c6 <_read_r+0x1e>
 80042c0:	682b      	ldr	r3, [r5, #0]
 80042c2:	b103      	cbz	r3, 80042c6 <_read_r+0x1e>
 80042c4:	6023      	str	r3, [r4, #0]
 80042c6:	bd38      	pop	{r3, r4, r5, pc}
 80042c8:	200002b8 	.word	0x200002b8

080042cc <_fstat_r>:
 80042cc:	b538      	push	{r3, r4, r5, lr}
 80042ce:	2300      	movs	r3, #0
 80042d0:	4d06      	ldr	r5, [pc, #24]	; (80042ec <_fstat_r+0x20>)
 80042d2:	4604      	mov	r4, r0
 80042d4:	4608      	mov	r0, r1
 80042d6:	4611      	mov	r1, r2
 80042d8:	602b      	str	r3, [r5, #0]
 80042da:	f7fd f88b 	bl	80013f4 <_fstat>
 80042de:	1c43      	adds	r3, r0, #1
 80042e0:	d102      	bne.n	80042e8 <_fstat_r+0x1c>
 80042e2:	682b      	ldr	r3, [r5, #0]
 80042e4:	b103      	cbz	r3, 80042e8 <_fstat_r+0x1c>
 80042e6:	6023      	str	r3, [r4, #0]
 80042e8:	bd38      	pop	{r3, r4, r5, pc}
 80042ea:	bf00      	nop
 80042ec:	200002b8 	.word	0x200002b8

080042f0 <_isatty_r>:
 80042f0:	b538      	push	{r3, r4, r5, lr}
 80042f2:	2300      	movs	r3, #0
 80042f4:	4d05      	ldr	r5, [pc, #20]	; (800430c <_isatty_r+0x1c>)
 80042f6:	4604      	mov	r4, r0
 80042f8:	4608      	mov	r0, r1
 80042fa:	602b      	str	r3, [r5, #0]
 80042fc:	f7fd f889 	bl	8001412 <_isatty>
 8004300:	1c43      	adds	r3, r0, #1
 8004302:	d102      	bne.n	800430a <_isatty_r+0x1a>
 8004304:	682b      	ldr	r3, [r5, #0]
 8004306:	b103      	cbz	r3, 800430a <_isatty_r+0x1a>
 8004308:	6023      	str	r3, [r4, #0]
 800430a:	bd38      	pop	{r3, r4, r5, pc}
 800430c:	200002b8 	.word	0x200002b8

08004310 <_init>:
 8004310:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004312:	bf00      	nop
 8004314:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004316:	bc08      	pop	{r3}
 8004318:	469e      	mov	lr, r3
 800431a:	4770      	bx	lr

0800431c <_fini>:
 800431c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800431e:	bf00      	nop
 8004320:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004322:	bc08      	pop	{r3}
 8004324:	469e      	mov	lr, r3
 8004326:	4770      	bx	lr
