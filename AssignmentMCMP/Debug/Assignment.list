
Assignment.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004198  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000011c  080042a4  080042a4  000142a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080043c0  080043c0  000200e4  2**0
                  CONTENTS
  4 .ARM          00000000  080043c0  080043c0  000200e4  2**0
                  CONTENTS
  5 .preinit_array 00000000  080043c0  080043c0  000200e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080043c0  080043c0  000143c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080043c4  080043c4  000143c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000e4  20000000  080043c8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001d8  200000e4  080044ac  000200e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002bc  080044ac  000202bc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012abe  00000000  00000000  0002010d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000273a  00000000  00000000  00032bcb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d48  00000000  00000000  00035308  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c40  00000000  00000000  00036050  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019803  00000000  00000000  00036c90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f9be  00000000  00000000  00050493  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008c25d  00000000  00000000  0005fe51  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000ec0ae  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003d60  00000000  00000000  000ec104  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200000e4 	.word	0x200000e4
 8000128:	00000000 	.word	0x00000000
 800012c:	0800428c 	.word	0x0800428c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200000e8 	.word	0x200000e8
 8000148:	0800428c 	.word	0x0800428c

0800014c <isButtonPressed>:
int TimerForKeyPress = 2000;

int button_ports[4] = {A0_GPIO_Port, A1_GPIO_Port, A2_GPIO_Port, A3_GPIO_Port};
int button_pins[4] = {A0_Pin,A1_Pin, A2_Pin, A3_Pin};

int isButtonPressed(int key){
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
	if(button_flag[key] == 1){
 8000154:	4a09      	ldr	r2, [pc, #36]	; (800017c <isButtonPressed+0x30>)
 8000156:	687b      	ldr	r3, [r7, #4]
 8000158:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800015c:	2b01      	cmp	r3, #1
 800015e:	d106      	bne.n	800016e <isButtonPressed+0x22>
		button_flag[key] = 0;
 8000160:	4a06      	ldr	r2, [pc, #24]	; (800017c <isButtonPressed+0x30>)
 8000162:	687b      	ldr	r3, [r7, #4]
 8000164:	2100      	movs	r1, #0
 8000166:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		return 1;
 800016a:	2301      	movs	r3, #1
 800016c:	e000      	b.n	8000170 <isButtonPressed+0x24>
	}
	return 0;
 800016e:	2300      	movs	r3, #0
}
 8000170:	4618      	mov	r0, r3
 8000172:	370c      	adds	r7, #12
 8000174:	46bd      	mov	sp, r7
 8000176:	bc80      	pop	{r7}
 8000178:	4770      	bx	lr
 800017a:	bf00      	nop
 800017c:	20000100 	.word	0x20000100

08000180 <subKeyProcess>:
void subKeyProcess(int key){
 8000180:	b480      	push	{r7}
 8000182:	b083      	sub	sp, #12
 8000184:	af00      	add	r7, sp, #0
 8000186:	6078      	str	r0, [r7, #4]
	button_flag[key] = 1;
 8000188:	4a04      	ldr	r2, [pc, #16]	; (800019c <subKeyProcess+0x1c>)
 800018a:	687b      	ldr	r3, [r7, #4]
 800018c:	2101      	movs	r1, #1
 800018e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 8000192:	bf00      	nop
 8000194:	370c      	adds	r7, #12
 8000196:	46bd      	mov	sp, r7
 8000198:	bc80      	pop	{r7}
 800019a:	4770      	bx	lr
 800019c:	20000100 	.word	0x20000100

080001a0 <getKeyInput>:
void getKeyInput(int key){
 80001a0:	b580      	push	{r7, lr}
 80001a2:	b082      	sub	sp, #8
 80001a4:	af00      	add	r7, sp, #0
 80001a6:	6078      	str	r0, [r7, #4]
	KeyReg[key][0] = KeyReg[key][1];
 80001a8:	4a42      	ldr	r2, [pc, #264]	; (80002b4 <getKeyInput+0x114>)
 80001aa:	687b      	ldr	r3, [r7, #4]
 80001ac:	011b      	lsls	r3, r3, #4
 80001ae:	4413      	add	r3, r2
 80001b0:	3304      	adds	r3, #4
 80001b2:	681a      	ldr	r2, [r3, #0]
 80001b4:	493f      	ldr	r1, [pc, #252]	; (80002b4 <getKeyInput+0x114>)
 80001b6:	687b      	ldr	r3, [r7, #4]
 80001b8:	011b      	lsls	r3, r3, #4
 80001ba:	440b      	add	r3, r1
 80001bc:	601a      	str	r2, [r3, #0]
	KeyReg[key][1] = KeyReg[key][2];
 80001be:	4a3d      	ldr	r2, [pc, #244]	; (80002b4 <getKeyInput+0x114>)
 80001c0:	687b      	ldr	r3, [r7, #4]
 80001c2:	011b      	lsls	r3, r3, #4
 80001c4:	4413      	add	r3, r2
 80001c6:	3308      	adds	r3, #8
 80001c8:	681a      	ldr	r2, [r3, #0]
 80001ca:	493a      	ldr	r1, [pc, #232]	; (80002b4 <getKeyInput+0x114>)
 80001cc:	687b      	ldr	r3, [r7, #4]
 80001ce:	011b      	lsls	r3, r3, #4
 80001d0:	440b      	add	r3, r1
 80001d2:	3304      	adds	r3, #4
 80001d4:	601a      	str	r2, [r3, #0]
	KeyReg[key][2] = HAL_GPIO_ReadPin(button_ports[key],button_pins[key]);
 80001d6:	4a38      	ldr	r2, [pc, #224]	; (80002b8 <getKeyInput+0x118>)
 80001d8:	687b      	ldr	r3, [r7, #4]
 80001da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80001de:	4618      	mov	r0, r3
 80001e0:	4a36      	ldr	r2, [pc, #216]	; (80002bc <getKeyInput+0x11c>)
 80001e2:	687b      	ldr	r3, [r7, #4]
 80001e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80001e8:	b29b      	uxth	r3, r3
 80001ea:	4619      	mov	r1, r3
 80001ec:	f001 fbde 	bl	80019ac <HAL_GPIO_ReadPin>
 80001f0:	4603      	mov	r3, r0
 80001f2:	4619      	mov	r1, r3
 80001f4:	4a2f      	ldr	r2, [pc, #188]	; (80002b4 <getKeyInput+0x114>)
 80001f6:	687b      	ldr	r3, [r7, #4]
 80001f8:	011b      	lsls	r3, r3, #4
 80001fa:	4413      	add	r3, r2
 80001fc:	3308      	adds	r3, #8
 80001fe:	6019      	str	r1, [r3, #0]
	if((KeyReg[key][0] == KeyReg[key][1]) && (KeyReg[key][1] == KeyReg[key][2])){
 8000200:	4a2c      	ldr	r2, [pc, #176]	; (80002b4 <getKeyInput+0x114>)
 8000202:	687b      	ldr	r3, [r7, #4]
 8000204:	011b      	lsls	r3, r3, #4
 8000206:	4413      	add	r3, r2
 8000208:	681a      	ldr	r2, [r3, #0]
 800020a:	492a      	ldr	r1, [pc, #168]	; (80002b4 <getKeyInput+0x114>)
 800020c:	687b      	ldr	r3, [r7, #4]
 800020e:	011b      	lsls	r3, r3, #4
 8000210:	440b      	add	r3, r1
 8000212:	3304      	adds	r3, #4
 8000214:	681b      	ldr	r3, [r3, #0]
 8000216:	429a      	cmp	r2, r3
 8000218:	d147      	bne.n	80002aa <getKeyInput+0x10a>
 800021a:	4a26      	ldr	r2, [pc, #152]	; (80002b4 <getKeyInput+0x114>)
 800021c:	687b      	ldr	r3, [r7, #4]
 800021e:	011b      	lsls	r3, r3, #4
 8000220:	4413      	add	r3, r2
 8000222:	3304      	adds	r3, #4
 8000224:	681a      	ldr	r2, [r3, #0]
 8000226:	4923      	ldr	r1, [pc, #140]	; (80002b4 <getKeyInput+0x114>)
 8000228:	687b      	ldr	r3, [r7, #4]
 800022a:	011b      	lsls	r3, r3, #4
 800022c:	440b      	add	r3, r1
 800022e:	3308      	adds	r3, #8
 8000230:	681b      	ldr	r3, [r3, #0]
 8000232:	429a      	cmp	r2, r3
 8000234:	d139      	bne.n	80002aa <getKeyInput+0x10a>
		if(KeyReg[key][3] != KeyReg[key][2]){
 8000236:	4a1f      	ldr	r2, [pc, #124]	; (80002b4 <getKeyInput+0x114>)
 8000238:	687b      	ldr	r3, [r7, #4]
 800023a:	011b      	lsls	r3, r3, #4
 800023c:	4413      	add	r3, r2
 800023e:	330c      	adds	r3, #12
 8000240:	681a      	ldr	r2, [r3, #0]
 8000242:	491c      	ldr	r1, [pc, #112]	; (80002b4 <getKeyInput+0x114>)
 8000244:	687b      	ldr	r3, [r7, #4]
 8000246:	011b      	lsls	r3, r3, #4
 8000248:	440b      	add	r3, r1
 800024a:	3308      	adds	r3, #8
 800024c:	681b      	ldr	r3, [r3, #0]
 800024e:	429a      	cmp	r2, r3
 8000250:	d01b      	beq.n	800028a <getKeyInput+0xea>
			KeyReg[key][3] = KeyReg[key][2];
 8000252:	4a18      	ldr	r2, [pc, #96]	; (80002b4 <getKeyInput+0x114>)
 8000254:	687b      	ldr	r3, [r7, #4]
 8000256:	011b      	lsls	r3, r3, #4
 8000258:	4413      	add	r3, r2
 800025a:	3308      	adds	r3, #8
 800025c:	681a      	ldr	r2, [r3, #0]
 800025e:	4915      	ldr	r1, [pc, #84]	; (80002b4 <getKeyInput+0x114>)
 8000260:	687b      	ldr	r3, [r7, #4]
 8000262:	011b      	lsls	r3, r3, #4
 8000264:	440b      	add	r3, r1
 8000266:	330c      	adds	r3, #12
 8000268:	601a      	str	r2, [r3, #0]
			if(KeyReg[key][2] == PRESSED_STATE){
 800026a:	4a12      	ldr	r2, [pc, #72]	; (80002b4 <getKeyInput+0x114>)
 800026c:	687b      	ldr	r3, [r7, #4]
 800026e:	011b      	lsls	r3, r3, #4
 8000270:	4413      	add	r3, r2
 8000272:	3308      	adds	r3, #8
 8000274:	681b      	ldr	r3, [r3, #0]
 8000276:	2b00      	cmp	r3, #0
 8000278:	d117      	bne.n	80002aa <getKeyInput+0x10a>
				subKeyProcess(key);
 800027a:	6878      	ldr	r0, [r7, #4]
 800027c:	f7ff ff80 	bl	8000180 <subKeyProcess>
				TimerForKeyPress = 2000;
 8000280:	4b0f      	ldr	r3, [pc, #60]	; (80002c0 <getKeyInput+0x120>)
 8000282:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8000286:	601a      	str	r2, [r3, #0]
			if(TimerForKeyPress == 0){
				KeyReg[key][3] = NORMAL_STATE;
			}
		}
	}
}
 8000288:	e00f      	b.n	80002aa <getKeyInput+0x10a>
			TimerForKeyPress--;
 800028a:	4b0d      	ldr	r3, [pc, #52]	; (80002c0 <getKeyInput+0x120>)
 800028c:	681b      	ldr	r3, [r3, #0]
 800028e:	3b01      	subs	r3, #1
 8000290:	4a0b      	ldr	r2, [pc, #44]	; (80002c0 <getKeyInput+0x120>)
 8000292:	6013      	str	r3, [r2, #0]
			if(TimerForKeyPress == 0){
 8000294:	4b0a      	ldr	r3, [pc, #40]	; (80002c0 <getKeyInput+0x120>)
 8000296:	681b      	ldr	r3, [r3, #0]
 8000298:	2b00      	cmp	r3, #0
 800029a:	d106      	bne.n	80002aa <getKeyInput+0x10a>
				KeyReg[key][3] = NORMAL_STATE;
 800029c:	4a05      	ldr	r2, [pc, #20]	; (80002b4 <getKeyInput+0x114>)
 800029e:	687b      	ldr	r3, [r7, #4]
 80002a0:	011b      	lsls	r3, r3, #4
 80002a2:	4413      	add	r3, r2
 80002a4:	330c      	adds	r3, #12
 80002a6:	2201      	movs	r2, #1
 80002a8:	601a      	str	r2, [r3, #0]
}
 80002aa:	bf00      	nop
 80002ac:	3708      	adds	r7, #8
 80002ae:	46bd      	mov	sp, r7
 80002b0:	bd80      	pop	{r7, pc}
 80002b2:	bf00      	nop
 80002b4:	20000000 	.word	0x20000000
 80002b8:	20000044 	.word	0x20000044
 80002bc:	20000054 	.word	0x20000054
 80002c0:	20000040 	.word	0x20000040

080002c4 <fsm_automatic_run>:
int green_duration = 3;
int yellow_duration = 2;
int index_led = 0;
int pedeson=0;

void fsm_automatic_run(){
 80002c4:	b580      	push	{r7, lr}
 80002c6:	b084      	sub	sp, #16
 80002c8:	af00      	add	r7, sp, #0
	switch(status) {
 80002ca:	4b9d      	ldr	r3, [pc, #628]	; (8000540 <fsm_automatic_run+0x27c>)
 80002cc:	681b      	ldr	r3, [r3, #0]
 80002ce:	3b01      	subs	r3, #1
 80002d0:	2b04      	cmp	r3, #4
 80002d2:	f200 8191 	bhi.w	80005f8 <fsm_automatic_run+0x334>
 80002d6:	a201      	add	r2, pc, #4	; (adr r2, 80002dc <fsm_automatic_run+0x18>)
 80002d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80002dc:	080002f1 	.word	0x080002f1
 80002e0:	08000323 	.word	0x08000323
 80002e4:	080003fd 	.word	0x080003fd
 80002e8:	0800049f 	.word	0x0800049f
 80002ec:	08000559 	.word	0x08000559
		case INIT:
			status = RED_GREEN;
 80002f0:	4b93      	ldr	r3, [pc, #588]	; (8000540 <fsm_automatic_run+0x27c>)
 80002f2:	2202      	movs	r2, #2
 80002f4:	601a      	str	r2, [r3, #0]
			setInitialValue(red_duration, green_duration);
 80002f6:	4b93      	ldr	r3, [pc, #588]	; (8000544 <fsm_automatic_run+0x280>)
 80002f8:	681b      	ldr	r3, [r3, #0]
 80002fa:	4a93      	ldr	r2, [pc, #588]	; (8000548 <fsm_automatic_run+0x284>)
 80002fc:	6812      	ldr	r2, [r2, #0]
 80002fe:	4611      	mov	r1, r2
 8000300:	4618      	mov	r0, r3
 8000302:	f000 fb5f 	bl	80009c4 <setInitialValue>
			setTimer(green_duration*100, 0);
 8000306:	4b90      	ldr	r3, [pc, #576]	; (8000548 <fsm_automatic_run+0x284>)
 8000308:	681b      	ldr	r3, [r3, #0]
 800030a:	2264      	movs	r2, #100	; 0x64
 800030c:	fb02 f303 	mul.w	r3, r2, r3
 8000310:	2100      	movs	r1, #0
 8000312:	4618      	mov	r0, r3
 8000314:	f000 fe30 	bl	8000f78 <setTimer>
			setTimer(100, 1);
 8000318:	2101      	movs	r1, #1
 800031a:	2064      	movs	r0, #100	; 0x64
 800031c:	f000 fe2c 	bl	8000f78 <setTimer>
			break;
 8000320:	e173      	b.n	800060a <fsm_automatic_run+0x346>
		case RED_GREEN:
			setHorizontalLeds(SET,RESET,RESET);	//D4-5 horizontal
 8000322:	2200      	movs	r2, #0
 8000324:	2100      	movs	r1, #0
 8000326:	2001      	movs	r0, #1
 8000328:	f000 fb70 	bl	8000a0c <setHorizontalLeds>
			setVerticalLeds(RESET,SET, RESET);
 800032c:	2200      	movs	r2, #0
 800032e:	2101      	movs	r1, #1
 8000330:	2000      	movs	r0, #0
 8000332:	f000 fbb1 	bl	8000a98 <setVerticalLeds>
//				setPedesLeds(RESET, RESET, RESET);
//			}
//			if(pedeson==1){
//				setPedesLeds(RESET, SET, RESET);
//			}
			if(timer_flag[0] == 1){
 8000336:	4b85      	ldr	r3, [pc, #532]	; (800054c <fsm_automatic_run+0x288>)
 8000338:	681b      	ldr	r3, [r3, #0]
 800033a:	2b01      	cmp	r3, #1
 800033c:	d118      	bne.n	8000370 <fsm_automatic_run+0xac>
				setPedesLeds(RESET,RESET,RESET);
 800033e:	2200      	movs	r2, #0
 8000340:	2100      	movs	r1, #0
 8000342:	2000      	movs	r0, #0
 8000344:	f000 fbf4 	bl	8000b30 <setPedesLeds>
				setTimer(yellow_duration*100, 0);
 8000348:	4b81      	ldr	r3, [pc, #516]	; (8000550 <fsm_automatic_run+0x28c>)
 800034a:	681b      	ldr	r3, [r3, #0]
 800034c:	2264      	movs	r2, #100	; 0x64
 800034e:	fb02 f303 	mul.w	r3, r2, r3
 8000352:	2100      	movs	r1, #0
 8000354:	4618      	mov	r0, r3
 8000356:	f000 fe0f 	bl	8000f78 <setTimer>
//				setHorizontalLeds(RESET,RESET,RESET); //D4-5 horizontal
//				setVerticalLeds(RESET,RESET, RESET);
				status = RED_YELLOW;
 800035a:	4b79      	ldr	r3, [pc, #484]	; (8000540 <fsm_automatic_run+0x27c>)
 800035c:	2203      	movs	r2, #3
 800035e:	601a      	str	r2, [r3, #0]
				setInitialValue(yellow_duration, yellow_duration);
 8000360:	4b7b      	ldr	r3, [pc, #492]	; (8000550 <fsm_automatic_run+0x28c>)
 8000362:	681b      	ldr	r3, [r3, #0]
 8000364:	4a7a      	ldr	r2, [pc, #488]	; (8000550 <fsm_automatic_run+0x28c>)
 8000366:	6812      	ldr	r2, [r2, #0]
 8000368:	4611      	mov	r1, r2
 800036a:	4618      	mov	r0, r3
 800036c:	f000 fb2a 	bl	80009c4 <setInitialValue>
			}
			if(timer_flag[1] == 1){
 8000370:	4b76      	ldr	r3, [pc, #472]	; (800054c <fsm_automatic_run+0x288>)
 8000372:	685b      	ldr	r3, [r3, #4]
 8000374:	2b01      	cmp	r3, #1
 8000376:	d105      	bne.n	8000384 <fsm_automatic_run+0xc0>
				countDown();
 8000378:	f000 fb02 	bl	8000980 <countDown>
				setTimer(100, 1);
 800037c:	2101      	movs	r1, #1
 800037e:	2064      	movs	r0, #100	; 0x64
 8000380:	f000 fdfa 	bl	8000f78 <setTimer>
			}
			if(isButtonPressed(1) == 1){
 8000384:	2001      	movs	r0, #1
 8000386:	f7ff fee1 	bl	800014c <isButtonPressed>
 800038a:	4603      	mov	r3, r0
 800038c:	2b01      	cmp	r3, #1
 800038e:	d115      	bne.n	80003bc <fsm_automatic_run+0xf8>
				setHorizontalLeds(RESET,RESET,RESET);
 8000390:	2200      	movs	r2, #0
 8000392:	2100      	movs	r1, #0
 8000394:	2000      	movs	r0, #0
 8000396:	f000 fb39 	bl	8000a0c <setHorizontalLeds>
				setVerticalLeds(RESET,RESET, RESET);
 800039a:	2200      	movs	r2, #0
 800039c:	2100      	movs	r1, #0
 800039e:	2000      	movs	r0, #0
 80003a0:	f000 fb7a 	bl	8000a98 <setVerticalLeds>
				setPedesLeds(RESET,RESET,RESET);
 80003a4:	2200      	movs	r2, #0
 80003a6:	2100      	movs	r1, #0
 80003a8:	2000      	movs	r0, #0
 80003aa:	f000 fbc1 	bl	8000b30 <setPedesLeds>
				setTimer(100, 3);
 80003ae:	2103      	movs	r1, #3
 80003b0:	2064      	movs	r0, #100	; 0x64
 80003b2:	f000 fde1 	bl	8000f78 <setTimer>
				status = MAN_RED;
 80003b6:	4b62      	ldr	r3, [pc, #392]	; (8000540 <fsm_automatic_run+0x27c>)
 80003b8:	220b      	movs	r2, #11
 80003ba:	601a      	str	r2, [r3, #0]
			}
			if(isButtonPressed(0) == 1){
 80003bc:	2000      	movs	r0, #0
 80003be:	f7ff fec5 	bl	800014c <isButtonPressed>
 80003c2:	4603      	mov	r3, r0
 80003c4:	2b01      	cmp	r3, #1
 80003c6:	f040 8119 	bne.w	80005fc <fsm_automatic_run+0x338>
				setPedesLeds(RESET,SET,RESET);
 80003ca:	2200      	movs	r2, #0
 80003cc:	2101      	movs	r1, #1
 80003ce:	2000      	movs	r0, #0
 80003d0:	f000 fbae 	bl	8000b30 <setPedesLeds>
				pedeson=1;
 80003d4:	4b5f      	ldr	r3, [pc, #380]	; (8000554 <fsm_automatic_run+0x290>)
 80003d6:	2201      	movs	r2, #1
 80003d8:	601a      	str	r2, [r3, #0]
				int pedesduration = (red_duration+green_duration+yellow_duration)*100;
 80003da:	4b5a      	ldr	r3, [pc, #360]	; (8000544 <fsm_automatic_run+0x280>)
 80003dc:	681a      	ldr	r2, [r3, #0]
 80003de:	4b5a      	ldr	r3, [pc, #360]	; (8000548 <fsm_automatic_run+0x284>)
 80003e0:	681b      	ldr	r3, [r3, #0]
 80003e2:	441a      	add	r2, r3
 80003e4:	4b5a      	ldr	r3, [pc, #360]	; (8000550 <fsm_automatic_run+0x28c>)
 80003e6:	681b      	ldr	r3, [r3, #0]
 80003e8:	4413      	add	r3, r2
 80003ea:	2264      	movs	r2, #100	; 0x64
 80003ec:	fb02 f303 	mul.w	r3, r2, r3
 80003f0:	603b      	str	r3, [r7, #0]
				setTimer(pedesduration,9);
 80003f2:	2109      	movs	r1, #9
 80003f4:	6838      	ldr	r0, [r7, #0]
 80003f6:	f000 fdbf 	bl	8000f78 <setTimer>
			}
			break;
 80003fa:	e0ff      	b.n	80005fc <fsm_automatic_run+0x338>
		case RED_YELLOW:
			setHorizontalLeds(SET,RESET,RESET);
 80003fc:	2200      	movs	r2, #0
 80003fe:	2100      	movs	r1, #0
 8000400:	2001      	movs	r0, #1
 8000402:	f000 fb03 	bl	8000a0c <setHorizontalLeds>
			setVerticalLeds(RESET,RESET, SET);
 8000406:	2201      	movs	r2, #1
 8000408:	2100      	movs	r1, #0
 800040a:	2000      	movs	r0, #0
 800040c:	f000 fb44 	bl	8000a98 <setVerticalLeds>
//				setPedesLeds(RESET, RESET, RESET);
//			}
//			if(pedeson==1){
//				setPedesLeds(RESET, SET, RESET);
//			}
			if(timer_flag[0] == 1){
 8000410:	4b4e      	ldr	r3, [pc, #312]	; (800054c <fsm_automatic_run+0x288>)
 8000412:	681b      	ldr	r3, [r3, #0]
 8000414:	2b01      	cmp	r3, #1
 8000416:	d118      	bne.n	800044a <fsm_automatic_run+0x186>
				setPedesLeds(RESET,RESET,RESET);
 8000418:	2200      	movs	r2, #0
 800041a:	2100      	movs	r1, #0
 800041c:	2000      	movs	r0, #0
 800041e:	f000 fb87 	bl	8000b30 <setPedesLeds>
				setTimer(green_duration*100, 0);
 8000422:	4b49      	ldr	r3, [pc, #292]	; (8000548 <fsm_automatic_run+0x284>)
 8000424:	681b      	ldr	r3, [r3, #0]
 8000426:	2264      	movs	r2, #100	; 0x64
 8000428:	fb02 f303 	mul.w	r3, r2, r3
 800042c:	2100      	movs	r1, #0
 800042e:	4618      	mov	r0, r3
 8000430:	f000 fda2 	bl	8000f78 <setTimer>
				status = GREEN_RED;
 8000434:	4b42      	ldr	r3, [pc, #264]	; (8000540 <fsm_automatic_run+0x27c>)
 8000436:	2204      	movs	r2, #4
 8000438:	601a      	str	r2, [r3, #0]
				setInitialValue(green_duration, red_duration);
 800043a:	4b43      	ldr	r3, [pc, #268]	; (8000548 <fsm_automatic_run+0x284>)
 800043c:	681b      	ldr	r3, [r3, #0]
 800043e:	4a41      	ldr	r2, [pc, #260]	; (8000544 <fsm_automatic_run+0x280>)
 8000440:	6812      	ldr	r2, [r2, #0]
 8000442:	4611      	mov	r1, r2
 8000444:	4618      	mov	r0, r3
 8000446:	f000 fabd 	bl	80009c4 <setInitialValue>
//				setHorizontalLeds(RESET,RESET,RESET); //D4-5 horizontal
//				setVerticalLeds(RESET,RESET, RESET);
			}
			if(timer_flag[1] == 1){
 800044a:	4b40      	ldr	r3, [pc, #256]	; (800054c <fsm_automatic_run+0x288>)
 800044c:	685b      	ldr	r3, [r3, #4]
 800044e:	2b01      	cmp	r3, #1
 8000450:	d105      	bne.n	800045e <fsm_automatic_run+0x19a>
				countDown();
 8000452:	f000 fa95 	bl	8000980 <countDown>
				setTimer(100, 1);
 8000456:	2101      	movs	r1, #1
 8000458:	2064      	movs	r0, #100	; 0x64
 800045a:	f000 fd8d 	bl	8000f78 <setTimer>
			}
			if(isButtonPressed(0) == 1){
 800045e:	2000      	movs	r0, #0
 8000460:	f7ff fe74 	bl	800014c <isButtonPressed>
 8000464:	4603      	mov	r3, r0
 8000466:	2b01      	cmp	r3, #1
 8000468:	f040 80ca 	bne.w	8000600 <fsm_automatic_run+0x33c>
				setPedesLeds(RESET,SET,RESET);
 800046c:	2200      	movs	r2, #0
 800046e:	2101      	movs	r1, #1
 8000470:	2000      	movs	r0, #0
 8000472:	f000 fb5d 	bl	8000b30 <setPedesLeds>
				pedeson=1;
 8000476:	4b37      	ldr	r3, [pc, #220]	; (8000554 <fsm_automatic_run+0x290>)
 8000478:	2201      	movs	r2, #1
 800047a:	601a      	str	r2, [r3, #0]
				int pedesduration = (red_duration+green_duration+yellow_duration)*100;
 800047c:	4b31      	ldr	r3, [pc, #196]	; (8000544 <fsm_automatic_run+0x280>)
 800047e:	681a      	ldr	r2, [r3, #0]
 8000480:	4b31      	ldr	r3, [pc, #196]	; (8000548 <fsm_automatic_run+0x284>)
 8000482:	681b      	ldr	r3, [r3, #0]
 8000484:	441a      	add	r2, r3
 8000486:	4b32      	ldr	r3, [pc, #200]	; (8000550 <fsm_automatic_run+0x28c>)
 8000488:	681b      	ldr	r3, [r3, #0]
 800048a:	4413      	add	r3, r2
 800048c:	2264      	movs	r2, #100	; 0x64
 800048e:	fb02 f303 	mul.w	r3, r2, r3
 8000492:	607b      	str	r3, [r7, #4]
				setTimer(pedesduration,9);
 8000494:	2109      	movs	r1, #9
 8000496:	6878      	ldr	r0, [r7, #4]
 8000498:	f000 fd6e 	bl	8000f78 <setTimer>
			}
			break;
 800049c:	e0b0      	b.n	8000600 <fsm_automatic_run+0x33c>
		case GREEN_RED:
			setHorizontalLeds(RESET,SET,RESET);
 800049e:	2200      	movs	r2, #0
 80004a0:	2101      	movs	r1, #1
 80004a2:	2000      	movs	r0, #0
 80004a4:	f000 fab2 	bl	8000a0c <setHorizontalLeds>
			setVerticalLeds(SET,RESET,RESET);
 80004a8:	2200      	movs	r2, #0
 80004aa:	2100      	movs	r1, #0
 80004ac:	2001      	movs	r0, #1
 80004ae:	f000 faf3 	bl	8000a98 <setVerticalLeds>
//				setPedesLeds(RESET, RESET, RESET);
//			}
//			if(pedeson==1){
//				setPedesLeds(SET, RESET, RESET);
//			}
			if(timer_flag[0] == 1){
 80004b2:	4b26      	ldr	r3, [pc, #152]	; (800054c <fsm_automatic_run+0x288>)
 80004b4:	681b      	ldr	r3, [r3, #0]
 80004b6:	2b01      	cmp	r3, #1
 80004b8:	d118      	bne.n	80004ec <fsm_automatic_run+0x228>
				setPedesLeds(RESET,RESET,RESET);
 80004ba:	2200      	movs	r2, #0
 80004bc:	2100      	movs	r1, #0
 80004be:	2000      	movs	r0, #0
 80004c0:	f000 fb36 	bl	8000b30 <setPedesLeds>
				setTimer(yellow_duration*100, 0);
 80004c4:	4b22      	ldr	r3, [pc, #136]	; (8000550 <fsm_automatic_run+0x28c>)
 80004c6:	681b      	ldr	r3, [r3, #0]
 80004c8:	2264      	movs	r2, #100	; 0x64
 80004ca:	fb02 f303 	mul.w	r3, r2, r3
 80004ce:	2100      	movs	r1, #0
 80004d0:	4618      	mov	r0, r3
 80004d2:	f000 fd51 	bl	8000f78 <setTimer>
				status = YELLOW_RED;
 80004d6:	4b1a      	ldr	r3, [pc, #104]	; (8000540 <fsm_automatic_run+0x27c>)
 80004d8:	2205      	movs	r2, #5
 80004da:	601a      	str	r2, [r3, #0]
				setInitialValue(yellow_duration, yellow_duration);
 80004dc:	4b1c      	ldr	r3, [pc, #112]	; (8000550 <fsm_automatic_run+0x28c>)
 80004de:	681b      	ldr	r3, [r3, #0]
 80004e0:	4a1b      	ldr	r2, [pc, #108]	; (8000550 <fsm_automatic_run+0x28c>)
 80004e2:	6812      	ldr	r2, [r2, #0]
 80004e4:	4611      	mov	r1, r2
 80004e6:	4618      	mov	r0, r3
 80004e8:	f000 fa6c 	bl	80009c4 <setInitialValue>
//				setHorizontalLeds(RESET,RESET,RESET); //D4-5 horizontal
//				setVerticalLeds(RESET,RESET, RESET);
			}
			if(timer_flag[1] == 1){
 80004ec:	4b17      	ldr	r3, [pc, #92]	; (800054c <fsm_automatic_run+0x288>)
 80004ee:	685b      	ldr	r3, [r3, #4]
 80004f0:	2b01      	cmp	r3, #1
 80004f2:	d105      	bne.n	8000500 <fsm_automatic_run+0x23c>
				countDown();
 80004f4:	f000 fa44 	bl	8000980 <countDown>
				setTimer(100, 1);
 80004f8:	2101      	movs	r1, #1
 80004fa:	2064      	movs	r0, #100	; 0x64
 80004fc:	f000 fd3c 	bl	8000f78 <setTimer>
			}
			if(isButtonPressed(0) == 1){
 8000500:	2000      	movs	r0, #0
 8000502:	f7ff fe23 	bl	800014c <isButtonPressed>
 8000506:	4603      	mov	r3, r0
 8000508:	2b01      	cmp	r3, #1
 800050a:	d17b      	bne.n	8000604 <fsm_automatic_run+0x340>
				setPedesLeds(SET,RESET,RESET);
 800050c:	2200      	movs	r2, #0
 800050e:	2100      	movs	r1, #0
 8000510:	2001      	movs	r0, #1
 8000512:	f000 fb0d 	bl	8000b30 <setPedesLeds>
				pedeson=1;
 8000516:	4b0f      	ldr	r3, [pc, #60]	; (8000554 <fsm_automatic_run+0x290>)
 8000518:	2201      	movs	r2, #1
 800051a:	601a      	str	r2, [r3, #0]
				int pedesduration = (red_duration+green_duration+yellow_duration)*100;
 800051c:	4b09      	ldr	r3, [pc, #36]	; (8000544 <fsm_automatic_run+0x280>)
 800051e:	681a      	ldr	r2, [r3, #0]
 8000520:	4b09      	ldr	r3, [pc, #36]	; (8000548 <fsm_automatic_run+0x284>)
 8000522:	681b      	ldr	r3, [r3, #0]
 8000524:	441a      	add	r2, r3
 8000526:	4b0a      	ldr	r3, [pc, #40]	; (8000550 <fsm_automatic_run+0x28c>)
 8000528:	681b      	ldr	r3, [r3, #0]
 800052a:	4413      	add	r3, r2
 800052c:	2264      	movs	r2, #100	; 0x64
 800052e:	fb02 f303 	mul.w	r3, r2, r3
 8000532:	60bb      	str	r3, [r7, #8]
				setTimer(pedesduration,9);
 8000534:	2109      	movs	r1, #9
 8000536:	68b8      	ldr	r0, [r7, #8]
 8000538:	f000 fd1e 	bl	8000f78 <setTimer>
			}
			break;
 800053c:	e062      	b.n	8000604 <fsm_automatic_run+0x340>
 800053e:	bf00      	nop
 8000540:	20000114 	.word	0x20000114
 8000544:	20000064 	.word	0x20000064
 8000548:	20000068 	.word	0x20000068
 800054c:	20000148 	.word	0x20000148
 8000550:	2000006c 	.word	0x2000006c
 8000554:	20000110 	.word	0x20000110
		case YELLOW_RED:
			setHorizontalLeds(RESET,RESET,SET);
 8000558:	2201      	movs	r2, #1
 800055a:	2100      	movs	r1, #0
 800055c:	2000      	movs	r0, #0
 800055e:	f000 fa55 	bl	8000a0c <setHorizontalLeds>
			setVerticalLeds(SET,RESET,RESET);
 8000562:	2200      	movs	r2, #0
 8000564:	2100      	movs	r1, #0
 8000566:	2001      	movs	r0, #1
 8000568:	f000 fa96 	bl	8000a98 <setVerticalLeds>
//				setPedesLeds(RESET, RESET, RESET);
//			}
//			if(pedeson==1){
//				setPedesLeds(SET, RESET, RESET);
//			}
			if(timer_flag[0] == 1){
 800056c:	4b29      	ldr	r3, [pc, #164]	; (8000614 <fsm_automatic_run+0x350>)
 800056e:	681b      	ldr	r3, [r3, #0]
 8000570:	2b01      	cmp	r3, #1
 8000572:	d118      	bne.n	80005a6 <fsm_automatic_run+0x2e2>
				setPedesLeds(RESET,RESET,RESET);
 8000574:	2200      	movs	r2, #0
 8000576:	2100      	movs	r1, #0
 8000578:	2000      	movs	r0, #0
 800057a:	f000 fad9 	bl	8000b30 <setPedesLeds>
				setTimer(green_duration*100, 0);
 800057e:	4b26      	ldr	r3, [pc, #152]	; (8000618 <fsm_automatic_run+0x354>)
 8000580:	681b      	ldr	r3, [r3, #0]
 8000582:	2264      	movs	r2, #100	; 0x64
 8000584:	fb02 f303 	mul.w	r3, r2, r3
 8000588:	2100      	movs	r1, #0
 800058a:	4618      	mov	r0, r3
 800058c:	f000 fcf4 	bl	8000f78 <setTimer>
				status = RED_GREEN;
 8000590:	4b22      	ldr	r3, [pc, #136]	; (800061c <fsm_automatic_run+0x358>)
 8000592:	2202      	movs	r2, #2
 8000594:	601a      	str	r2, [r3, #0]
				setInitialValue(red_duration, green_duration);
 8000596:	4b22      	ldr	r3, [pc, #136]	; (8000620 <fsm_automatic_run+0x35c>)
 8000598:	681b      	ldr	r3, [r3, #0]
 800059a:	4a1f      	ldr	r2, [pc, #124]	; (8000618 <fsm_automatic_run+0x354>)
 800059c:	6812      	ldr	r2, [r2, #0]
 800059e:	4611      	mov	r1, r2
 80005a0:	4618      	mov	r0, r3
 80005a2:	f000 fa0f 	bl	80009c4 <setInitialValue>
//				setHorizontalLeds(RESET,RESET,RESET); //D4-5 horizontal
//				setVerticalLeds(RESET,RESET, RESET);
			}
			if(timer_flag[1] == 1){
 80005a6:	4b1b      	ldr	r3, [pc, #108]	; (8000614 <fsm_automatic_run+0x350>)
 80005a8:	685b      	ldr	r3, [r3, #4]
 80005aa:	2b01      	cmp	r3, #1
 80005ac:	d105      	bne.n	80005ba <fsm_automatic_run+0x2f6>
				countDown();
 80005ae:	f000 f9e7 	bl	8000980 <countDown>
				setTimer(100, 1);
 80005b2:	2101      	movs	r1, #1
 80005b4:	2064      	movs	r0, #100	; 0x64
 80005b6:	f000 fcdf 	bl	8000f78 <setTimer>
			}
			if(isButtonPressed(0) == 1){
 80005ba:	2000      	movs	r0, #0
 80005bc:	f7ff fdc6 	bl	800014c <isButtonPressed>
 80005c0:	4603      	mov	r3, r0
 80005c2:	2b01      	cmp	r3, #1
 80005c4:	d120      	bne.n	8000608 <fsm_automatic_run+0x344>
				setPedesLeds(SET,RESET,RESET);
 80005c6:	2200      	movs	r2, #0
 80005c8:	2100      	movs	r1, #0
 80005ca:	2001      	movs	r0, #1
 80005cc:	f000 fab0 	bl	8000b30 <setPedesLeds>
				pedeson=1;
 80005d0:	4b14      	ldr	r3, [pc, #80]	; (8000624 <fsm_automatic_run+0x360>)
 80005d2:	2201      	movs	r2, #1
 80005d4:	601a      	str	r2, [r3, #0]
				int pedesduration = (red_duration+green_duration+yellow_duration)*100;
 80005d6:	4b12      	ldr	r3, [pc, #72]	; (8000620 <fsm_automatic_run+0x35c>)
 80005d8:	681a      	ldr	r2, [r3, #0]
 80005da:	4b0f      	ldr	r3, [pc, #60]	; (8000618 <fsm_automatic_run+0x354>)
 80005dc:	681b      	ldr	r3, [r3, #0]
 80005de:	441a      	add	r2, r3
 80005e0:	4b11      	ldr	r3, [pc, #68]	; (8000628 <fsm_automatic_run+0x364>)
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	4413      	add	r3, r2
 80005e6:	2264      	movs	r2, #100	; 0x64
 80005e8:	fb02 f303 	mul.w	r3, r2, r3
 80005ec:	60fb      	str	r3, [r7, #12]
				setTimer(pedesduration,9);
 80005ee:	2109      	movs	r1, #9
 80005f0:	68f8      	ldr	r0, [r7, #12]
 80005f2:	f000 fcc1 	bl	8000f78 <setTimer>
			}
			break;
 80005f6:	e007      	b.n	8000608 <fsm_automatic_run+0x344>
		default:
			break;
 80005f8:	bf00      	nop
 80005fa:	e006      	b.n	800060a <fsm_automatic_run+0x346>
			break;
 80005fc:	bf00      	nop
 80005fe:	e004      	b.n	800060a <fsm_automatic_run+0x346>
			break;
 8000600:	bf00      	nop
 8000602:	e002      	b.n	800060a <fsm_automatic_run+0x346>
			break;
 8000604:	bf00      	nop
 8000606:	e000      	b.n	800060a <fsm_automatic_run+0x346>
			break;
 8000608:	bf00      	nop
	}
};
 800060a:	bf00      	nop
 800060c:	3710      	adds	r7, #16
 800060e:	46bd      	mov	sp, r7
 8000610:	bd80      	pop	{r7, pc}
 8000612:	bf00      	nop
 8000614:	20000148 	.word	0x20000148
 8000618:	20000068 	.word	0x20000068
 800061c:	20000114 	.word	0x20000114
 8000620:	20000064 	.word	0x20000064
 8000624:	20000110 	.word	0x20000110
 8000628:	2000006c 	.word	0x2000006c

0800062c <initializeDurationClones>:

int red_duration_clone;
int yellow_duration_clone;
int green_duration_clone;
int toggle = 1;
void initializeDurationClones(){
 800062c:	b480      	push	{r7}
 800062e:	af00      	add	r7, sp, #0
    red_duration_clone = red_duration;
 8000630:	4b07      	ldr	r3, [pc, #28]	; (8000650 <initializeDurationClones+0x24>)
 8000632:	681b      	ldr	r3, [r3, #0]
 8000634:	4a07      	ldr	r2, [pc, #28]	; (8000654 <initializeDurationClones+0x28>)
 8000636:	6013      	str	r3, [r2, #0]
    yellow_duration_clone = yellow_duration;
 8000638:	4b07      	ldr	r3, [pc, #28]	; (8000658 <initializeDurationClones+0x2c>)
 800063a:	681b      	ldr	r3, [r3, #0]
 800063c:	4a07      	ldr	r2, [pc, #28]	; (800065c <initializeDurationClones+0x30>)
 800063e:	6013      	str	r3, [r2, #0]
    green_duration_clone = green_duration;
 8000640:	4b07      	ldr	r3, [pc, #28]	; (8000660 <initializeDurationClones+0x34>)
 8000642:	681b      	ldr	r3, [r3, #0]
 8000644:	4a07      	ldr	r2, [pc, #28]	; (8000664 <initializeDurationClones+0x38>)
 8000646:	6013      	str	r3, [r2, #0]
}
 8000648:	bf00      	nop
 800064a:	46bd      	mov	sp, r7
 800064c:	bc80      	pop	{r7}
 800064e:	4770      	bx	lr
 8000650:	20000064 	.word	0x20000064
 8000654:	2000017c 	.word	0x2000017c
 8000658:	2000006c 	.word	0x2000006c
 800065c:	20000184 	.word	0x20000184
 8000660:	20000068 	.word	0x20000068
 8000664:	20000180 	.word	0x20000180

08000668 <fsm_manual_run>:
void fsm_manual_run(){
 8000668:	b580      	push	{r7, lr}
 800066a:	af00      	add	r7, sp, #0

	switch (status) {
 800066c:	4bb1      	ldr	r3, [pc, #708]	; (8000934 <fsm_manual_run+0x2cc>)
 800066e:	681b      	ldr	r3, [r3, #0]
 8000670:	2b0d      	cmp	r3, #13
 8000672:	f000 80ed 	beq.w	8000850 <fsm_manual_run+0x1e8>
 8000676:	2b0d      	cmp	r3, #13
 8000678:	f300 8152 	bgt.w	8000920 <fsm_manual_run+0x2b8>
 800067c:	2b0b      	cmp	r3, #11
 800067e:	d002      	beq.n	8000686 <fsm_manual_run+0x1e>
 8000680:	2b0c      	cmp	r3, #12
 8000682:	d073      	beq.n	800076c <fsm_manual_run+0x104>
 8000684:	e14c      	b.n	8000920 <fsm_manual_run+0x2b8>
		case MAN_RED:
			if(timer_flag[3] == 1){
 8000686:	4bac      	ldr	r3, [pc, #688]	; (8000938 <fsm_manual_run+0x2d0>)
 8000688:	68db      	ldr	r3, [r3, #12]
 800068a:	2b01      	cmp	r3, #1
 800068c:	d122      	bne.n	80006d4 <fsm_manual_run+0x6c>
				if(toggle){
 800068e:	4bab      	ldr	r3, [pc, #684]	; (800093c <fsm_manual_run+0x2d4>)
 8000690:	681b      	ldr	r3, [r3, #0]
 8000692:	2b00      	cmp	r3, #0
 8000694:	d00a      	beq.n	80006ac <fsm_manual_run+0x44>
					setHorizontalLeds(SET,RESET,RESET);
 8000696:	2200      	movs	r2, #0
 8000698:	2100      	movs	r1, #0
 800069a:	2001      	movs	r0, #1
 800069c:	f000 f9b6 	bl	8000a0c <setHorizontalLeds>
					setVerticalLeds(SET,RESET,RESET);
 80006a0:	2200      	movs	r2, #0
 80006a2:	2100      	movs	r1, #0
 80006a4:	2001      	movs	r0, #1
 80006a6:	f000 f9f7 	bl	8000a98 <setVerticalLeds>
 80006aa:	e009      	b.n	80006c0 <fsm_manual_run+0x58>
				}else {
					setHorizontalLeds(RESET,RESET,RESET);
 80006ac:	2200      	movs	r2, #0
 80006ae:	2100      	movs	r1, #0
 80006b0:	2000      	movs	r0, #0
 80006b2:	f000 f9ab 	bl	8000a0c <setHorizontalLeds>
					setVerticalLeds(RESET,RESET,RESET);
 80006b6:	2200      	movs	r2, #0
 80006b8:	2100      	movs	r1, #0
 80006ba:	2000      	movs	r0, #0
 80006bc:	f000 f9ec 	bl	8000a98 <setVerticalLeds>
				}
				toggle = 1 - toggle;
 80006c0:	4b9e      	ldr	r3, [pc, #632]	; (800093c <fsm_manual_run+0x2d4>)
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	f1c3 0301 	rsb	r3, r3, #1
 80006c8:	4a9c      	ldr	r2, [pc, #624]	; (800093c <fsm_manual_run+0x2d4>)
 80006ca:	6013      	str	r3, [r2, #0]
				setTimer(100, 3);
 80006cc:	2103      	movs	r1, #3
 80006ce:	2064      	movs	r0, #100	; 0x64
 80006d0:	f000 fc52 	bl	8000f78 <setTimer>
			}
			if(isButtonPressed(1) == 1){
 80006d4:	2001      	movs	r0, #1
 80006d6:	f7ff fd39 	bl	800014c <isButtonPressed>
 80006da:	4603      	mov	r3, r0
 80006dc:	2b01      	cmp	r3, #1
 80006de:	d116      	bne.n	800070e <fsm_manual_run+0xa6>
				setHorizontalLeds(RESET,RESET,RESET);
 80006e0:	2200      	movs	r2, #0
 80006e2:	2100      	movs	r1, #0
 80006e4:	2000      	movs	r0, #0
 80006e6:	f000 f991 	bl	8000a0c <setHorizontalLeds>
				setVerticalLeds(RESET,RESET,RESET);
 80006ea:	2200      	movs	r2, #0
 80006ec:	2100      	movs	r1, #0
 80006ee:	2000      	movs	r0, #0
 80006f0:	f000 f9d2 	bl	8000a98 <setVerticalLeds>
				setTimer(100, 3);
 80006f4:	2103      	movs	r1, #3
 80006f6:	2064      	movs	r0, #100	; 0x64
 80006f8:	f000 fc3e 	bl	8000f78 <setTimer>
				status = MAN_YELLOW;
 80006fc:	4b8d      	ldr	r3, [pc, #564]	; (8000934 <fsm_manual_run+0x2cc>)
 80006fe:	220c      	movs	r2, #12
 8000700:	601a      	str	r2, [r3, #0]
				printf("Current time: %d\r\n", yellow_duration_clone);
 8000702:	4b8f      	ldr	r3, [pc, #572]	; (8000940 <fsm_manual_run+0x2d8>)
 8000704:	681b      	ldr	r3, [r3, #0]
 8000706:	4619      	mov	r1, r3
 8000708:	488e      	ldr	r0, [pc, #568]	; (8000944 <fsm_manual_run+0x2dc>)
 800070a:	f002 fe5f 	bl	80033cc <iprintf>
			}
			if(isButtonPressed(2) == 1){
 800070e:	2002      	movs	r0, #2
 8000710:	f7ff fd1c 	bl	800014c <isButtonPressed>
 8000714:	4603      	mov	r3, r0
 8000716:	2b01      	cmp	r3, #1
 8000718:	d112      	bne.n	8000740 <fsm_manual_run+0xd8>
				red_duration_clone++;
 800071a:	4b8b      	ldr	r3, [pc, #556]	; (8000948 <fsm_manual_run+0x2e0>)
 800071c:	681b      	ldr	r3, [r3, #0]
 800071e:	3301      	adds	r3, #1
 8000720:	4a89      	ldr	r2, [pc, #548]	; (8000948 <fsm_manual_run+0x2e0>)
 8000722:	6013      	str	r3, [r2, #0]
				if(red_duration_clone >= 99) red_duration_clone = red_duration;
 8000724:	4b88      	ldr	r3, [pc, #544]	; (8000948 <fsm_manual_run+0x2e0>)
 8000726:	681b      	ldr	r3, [r3, #0]
 8000728:	2b62      	cmp	r3, #98	; 0x62
 800072a:	dd03      	ble.n	8000734 <fsm_manual_run+0xcc>
 800072c:	4b87      	ldr	r3, [pc, #540]	; (800094c <fsm_manual_run+0x2e4>)
 800072e:	681b      	ldr	r3, [r3, #0]
 8000730:	4a85      	ldr	r2, [pc, #532]	; (8000948 <fsm_manual_run+0x2e0>)
 8000732:	6013      	str	r3, [r2, #0]
				printf("Current time: %d\r\n", red_duration_clone);
 8000734:	4b84      	ldr	r3, [pc, #528]	; (8000948 <fsm_manual_run+0x2e0>)
 8000736:	681b      	ldr	r3, [r3, #0]
 8000738:	4619      	mov	r1, r3
 800073a:	4882      	ldr	r0, [pc, #520]	; (8000944 <fsm_manual_run+0x2dc>)
 800073c:	f002 fe46 	bl	80033cc <iprintf>
			}
			if(isButtonPressed(3) == 1){
 8000740:	2003      	movs	r0, #3
 8000742:	f7ff fd03 	bl	800014c <isButtonPressed>
 8000746:	4603      	mov	r3, r0
 8000748:	2b01      	cmp	r3, #1
 800074a:	f040 80ec 	bne.w	8000926 <fsm_manual_run+0x2be>
				red_duration =  red_duration_clone;
 800074e:	4b7e      	ldr	r3, [pc, #504]	; (8000948 <fsm_manual_run+0x2e0>)
 8000750:	681b      	ldr	r3, [r3, #0]
 8000752:	4a7e      	ldr	r2, [pc, #504]	; (800094c <fsm_manual_run+0x2e4>)
 8000754:	6013      	str	r3, [r2, #0]
				green_duration = red_duration - yellow_duration;
 8000756:	4b7d      	ldr	r3, [pc, #500]	; (800094c <fsm_manual_run+0x2e4>)
 8000758:	681a      	ldr	r2, [r3, #0]
 800075a:	4b7d      	ldr	r3, [pc, #500]	; (8000950 <fsm_manual_run+0x2e8>)
 800075c:	681b      	ldr	r3, [r3, #0]
 800075e:	1ad3      	subs	r3, r2, r3
 8000760:	4a7c      	ldr	r2, [pc, #496]	; (8000954 <fsm_manual_run+0x2ec>)
 8000762:	6013      	str	r3, [r2, #0]
				status = INIT;
 8000764:	4b73      	ldr	r3, [pc, #460]	; (8000934 <fsm_manual_run+0x2cc>)
 8000766:	2201      	movs	r2, #1
 8000768:	601a      	str	r2, [r3, #0]
			}
			break;
 800076a:	e0dc      	b.n	8000926 <fsm_manual_run+0x2be>
		case MAN_YELLOW:
			if(timer_flag[3] == 1){
 800076c:	4b72      	ldr	r3, [pc, #456]	; (8000938 <fsm_manual_run+0x2d0>)
 800076e:	68db      	ldr	r3, [r3, #12]
 8000770:	2b01      	cmp	r3, #1
 8000772:	d122      	bne.n	80007ba <fsm_manual_run+0x152>
				if(toggle){
 8000774:	4b71      	ldr	r3, [pc, #452]	; (800093c <fsm_manual_run+0x2d4>)
 8000776:	681b      	ldr	r3, [r3, #0]
 8000778:	2b00      	cmp	r3, #0
 800077a:	d00a      	beq.n	8000792 <fsm_manual_run+0x12a>
					setHorizontalLeds(RESET,RESET,SET);
 800077c:	2201      	movs	r2, #1
 800077e:	2100      	movs	r1, #0
 8000780:	2000      	movs	r0, #0
 8000782:	f000 f943 	bl	8000a0c <setHorizontalLeds>
					setVerticalLeds(RESET,RESET,SET);
 8000786:	2201      	movs	r2, #1
 8000788:	2100      	movs	r1, #0
 800078a:	2000      	movs	r0, #0
 800078c:	f000 f984 	bl	8000a98 <setVerticalLeds>
 8000790:	e009      	b.n	80007a6 <fsm_manual_run+0x13e>
				}else {
					setHorizontalLeds(RESET,RESET,RESET);
 8000792:	2200      	movs	r2, #0
 8000794:	2100      	movs	r1, #0
 8000796:	2000      	movs	r0, #0
 8000798:	f000 f938 	bl	8000a0c <setHorizontalLeds>
					setVerticalLeds(RESET,RESET,RESET);
 800079c:	2200      	movs	r2, #0
 800079e:	2100      	movs	r1, #0
 80007a0:	2000      	movs	r0, #0
 80007a2:	f000 f979 	bl	8000a98 <setVerticalLeds>
				}
				toggle = 1 - toggle;
 80007a6:	4b65      	ldr	r3, [pc, #404]	; (800093c <fsm_manual_run+0x2d4>)
 80007a8:	681b      	ldr	r3, [r3, #0]
 80007aa:	f1c3 0301 	rsb	r3, r3, #1
 80007ae:	4a63      	ldr	r2, [pc, #396]	; (800093c <fsm_manual_run+0x2d4>)
 80007b0:	6013      	str	r3, [r2, #0]
				setTimer(100, 3);
 80007b2:	2103      	movs	r1, #3
 80007b4:	2064      	movs	r0, #100	; 0x64
 80007b6:	f000 fbdf 	bl	8000f78 <setTimer>
			}
			if(isButtonPressed(1) == 1){
 80007ba:	2001      	movs	r0, #1
 80007bc:	f7ff fcc6 	bl	800014c <isButtonPressed>
 80007c0:	4603      	mov	r3, r0
 80007c2:	2b01      	cmp	r3, #1
 80007c4:	d116      	bne.n	80007f4 <fsm_manual_run+0x18c>
				setHorizontalLeds(RESET,RESET,RESET);
 80007c6:	2200      	movs	r2, #0
 80007c8:	2100      	movs	r1, #0
 80007ca:	2000      	movs	r0, #0
 80007cc:	f000 f91e 	bl	8000a0c <setHorizontalLeds>
				setVerticalLeds(RESET,RESET,RESET);
 80007d0:	2200      	movs	r2, #0
 80007d2:	2100      	movs	r1, #0
 80007d4:	2000      	movs	r0, #0
 80007d6:	f000 f95f 	bl	8000a98 <setVerticalLeds>
				setTimer(100, 3);
 80007da:	2103      	movs	r1, #3
 80007dc:	2064      	movs	r0, #100	; 0x64
 80007de:	f000 fbcb 	bl	8000f78 <setTimer>
				status = MAN_GREEN;
 80007e2:	4b54      	ldr	r3, [pc, #336]	; (8000934 <fsm_manual_run+0x2cc>)
 80007e4:	220d      	movs	r2, #13
 80007e6:	601a      	str	r2, [r3, #0]
				printf("Current time: %d\r\n", green_duration_clone);
 80007e8:	4b5b      	ldr	r3, [pc, #364]	; (8000958 <fsm_manual_run+0x2f0>)
 80007ea:	681b      	ldr	r3, [r3, #0]
 80007ec:	4619      	mov	r1, r3
 80007ee:	4855      	ldr	r0, [pc, #340]	; (8000944 <fsm_manual_run+0x2dc>)
 80007f0:	f002 fdec 	bl	80033cc <iprintf>
			}
			if(isButtonPressed(2) == 1){
 80007f4:	2002      	movs	r0, #2
 80007f6:	f7ff fca9 	bl	800014c <isButtonPressed>
 80007fa:	4603      	mov	r3, r0
 80007fc:	2b01      	cmp	r3, #1
 80007fe:	d112      	bne.n	8000826 <fsm_manual_run+0x1be>
				yellow_duration_clone++;
 8000800:	4b4f      	ldr	r3, [pc, #316]	; (8000940 <fsm_manual_run+0x2d8>)
 8000802:	681b      	ldr	r3, [r3, #0]
 8000804:	3301      	adds	r3, #1
 8000806:	4a4e      	ldr	r2, [pc, #312]	; (8000940 <fsm_manual_run+0x2d8>)
 8000808:	6013      	str	r3, [r2, #0]
				if(yellow_duration_clone >= 99) yellow_duration_clone = yellow_duration;
 800080a:	4b4d      	ldr	r3, [pc, #308]	; (8000940 <fsm_manual_run+0x2d8>)
 800080c:	681b      	ldr	r3, [r3, #0]
 800080e:	2b62      	cmp	r3, #98	; 0x62
 8000810:	dd03      	ble.n	800081a <fsm_manual_run+0x1b2>
 8000812:	4b4f      	ldr	r3, [pc, #316]	; (8000950 <fsm_manual_run+0x2e8>)
 8000814:	681b      	ldr	r3, [r3, #0]
 8000816:	4a4a      	ldr	r2, [pc, #296]	; (8000940 <fsm_manual_run+0x2d8>)
 8000818:	6013      	str	r3, [r2, #0]
				printf("Current time: %d\r\n", yellow_duration_clone);
 800081a:	4b49      	ldr	r3, [pc, #292]	; (8000940 <fsm_manual_run+0x2d8>)
 800081c:	681b      	ldr	r3, [r3, #0]
 800081e:	4619      	mov	r1, r3
 8000820:	4848      	ldr	r0, [pc, #288]	; (8000944 <fsm_manual_run+0x2dc>)
 8000822:	f002 fdd3 	bl	80033cc <iprintf>
			}
			if(isButtonPressed(3) == 1){
 8000826:	2003      	movs	r0, #3
 8000828:	f7ff fc90 	bl	800014c <isButtonPressed>
 800082c:	4603      	mov	r3, r0
 800082e:	2b01      	cmp	r3, #1
 8000830:	d17b      	bne.n	800092a <fsm_manual_run+0x2c2>
				yellow_duration =  yellow_duration_clone;
 8000832:	4b43      	ldr	r3, [pc, #268]	; (8000940 <fsm_manual_run+0x2d8>)
 8000834:	681b      	ldr	r3, [r3, #0]
 8000836:	4a46      	ldr	r2, [pc, #280]	; (8000950 <fsm_manual_run+0x2e8>)
 8000838:	6013      	str	r3, [r2, #0]
				red_duration = green_duration + yellow_duration;
 800083a:	4b46      	ldr	r3, [pc, #280]	; (8000954 <fsm_manual_run+0x2ec>)
 800083c:	681a      	ldr	r2, [r3, #0]
 800083e:	4b44      	ldr	r3, [pc, #272]	; (8000950 <fsm_manual_run+0x2e8>)
 8000840:	681b      	ldr	r3, [r3, #0]
 8000842:	4413      	add	r3, r2
 8000844:	4a41      	ldr	r2, [pc, #260]	; (800094c <fsm_manual_run+0x2e4>)
 8000846:	6013      	str	r3, [r2, #0]
				status = INIT;
 8000848:	4b3a      	ldr	r3, [pc, #232]	; (8000934 <fsm_manual_run+0x2cc>)
 800084a:	2201      	movs	r2, #1
 800084c:	601a      	str	r2, [r3, #0]
			}
			break;
 800084e:	e06c      	b.n	800092a <fsm_manual_run+0x2c2>
		case MAN_GREEN:
			if(timer_flag[3] == 1){
 8000850:	4b39      	ldr	r3, [pc, #228]	; (8000938 <fsm_manual_run+0x2d0>)
 8000852:	68db      	ldr	r3, [r3, #12]
 8000854:	2b01      	cmp	r3, #1
 8000856:	d122      	bne.n	800089e <fsm_manual_run+0x236>
				if(toggle){
 8000858:	4b38      	ldr	r3, [pc, #224]	; (800093c <fsm_manual_run+0x2d4>)
 800085a:	681b      	ldr	r3, [r3, #0]
 800085c:	2b00      	cmp	r3, #0
 800085e:	d00a      	beq.n	8000876 <fsm_manual_run+0x20e>
					setHorizontalLeds(RESET,SET,RESET);
 8000860:	2200      	movs	r2, #0
 8000862:	2101      	movs	r1, #1
 8000864:	2000      	movs	r0, #0
 8000866:	f000 f8d1 	bl	8000a0c <setHorizontalLeds>
					setVerticalLeds(RESET,SET,RESET);
 800086a:	2200      	movs	r2, #0
 800086c:	2101      	movs	r1, #1
 800086e:	2000      	movs	r0, #0
 8000870:	f000 f912 	bl	8000a98 <setVerticalLeds>
 8000874:	e009      	b.n	800088a <fsm_manual_run+0x222>
				}else {
					setHorizontalLeds(RESET,RESET,RESET);
 8000876:	2200      	movs	r2, #0
 8000878:	2100      	movs	r1, #0
 800087a:	2000      	movs	r0, #0
 800087c:	f000 f8c6 	bl	8000a0c <setHorizontalLeds>
					setVerticalLeds(RESET,RESET,RESET);
 8000880:	2200      	movs	r2, #0
 8000882:	2100      	movs	r1, #0
 8000884:	2000      	movs	r0, #0
 8000886:	f000 f907 	bl	8000a98 <setVerticalLeds>
				}
				toggle = 1 - toggle;
 800088a:	4b2c      	ldr	r3, [pc, #176]	; (800093c <fsm_manual_run+0x2d4>)
 800088c:	681b      	ldr	r3, [r3, #0]
 800088e:	f1c3 0301 	rsb	r3, r3, #1
 8000892:	4a2a      	ldr	r2, [pc, #168]	; (800093c <fsm_manual_run+0x2d4>)
 8000894:	6013      	str	r3, [r2, #0]
				setTimer(100, 3);
 8000896:	2103      	movs	r1, #3
 8000898:	2064      	movs	r0, #100	; 0x64
 800089a:	f000 fb6d 	bl	8000f78 <setTimer>
			}
			if(isButtonPressed(1) == 1){
 800089e:	2001      	movs	r0, #1
 80008a0:	f7ff fc54 	bl	800014c <isButtonPressed>
 80008a4:	4603      	mov	r3, r0
 80008a6:	2b01      	cmp	r3, #1
 80008a8:	d10c      	bne.n	80008c4 <fsm_manual_run+0x25c>
				setHorizontalLeds(RESET,RESET,RESET);
 80008aa:	2200      	movs	r2, #0
 80008ac:	2100      	movs	r1, #0
 80008ae:	2000      	movs	r0, #0
 80008b0:	f000 f8ac 	bl	8000a0c <setHorizontalLeds>
				setVerticalLeds(RESET,RESET,RESET);
 80008b4:	2200      	movs	r2, #0
 80008b6:	2100      	movs	r1, #0
 80008b8:	2000      	movs	r0, #0
 80008ba:	f000 f8ed 	bl	8000a98 <setVerticalLeds>
				status = INIT;
 80008be:	4b1d      	ldr	r3, [pc, #116]	; (8000934 <fsm_manual_run+0x2cc>)
 80008c0:	2201      	movs	r2, #1
 80008c2:	601a      	str	r2, [r3, #0]
			}
			if(isButtonPressed(2) == 1){
 80008c4:	2002      	movs	r0, #2
 80008c6:	f7ff fc41 	bl	800014c <isButtonPressed>
 80008ca:	4603      	mov	r3, r0
 80008cc:	2b01      	cmp	r3, #1
 80008ce:	d112      	bne.n	80008f6 <fsm_manual_run+0x28e>
				green_duration_clone++;
 80008d0:	4b21      	ldr	r3, [pc, #132]	; (8000958 <fsm_manual_run+0x2f0>)
 80008d2:	681b      	ldr	r3, [r3, #0]
 80008d4:	3301      	adds	r3, #1
 80008d6:	4a20      	ldr	r2, [pc, #128]	; (8000958 <fsm_manual_run+0x2f0>)
 80008d8:	6013      	str	r3, [r2, #0]
				if(green_duration_clone >= 99) green_duration_clone = green_duration;
 80008da:	4b1f      	ldr	r3, [pc, #124]	; (8000958 <fsm_manual_run+0x2f0>)
 80008dc:	681b      	ldr	r3, [r3, #0]
 80008de:	2b62      	cmp	r3, #98	; 0x62
 80008e0:	dd03      	ble.n	80008ea <fsm_manual_run+0x282>
 80008e2:	4b1c      	ldr	r3, [pc, #112]	; (8000954 <fsm_manual_run+0x2ec>)
 80008e4:	681b      	ldr	r3, [r3, #0]
 80008e6:	4a1c      	ldr	r2, [pc, #112]	; (8000958 <fsm_manual_run+0x2f0>)
 80008e8:	6013      	str	r3, [r2, #0]
				printf("Current time: %d\r\n", green_duration_clone);
 80008ea:	4b1b      	ldr	r3, [pc, #108]	; (8000958 <fsm_manual_run+0x2f0>)
 80008ec:	681b      	ldr	r3, [r3, #0]
 80008ee:	4619      	mov	r1, r3
 80008f0:	4814      	ldr	r0, [pc, #80]	; (8000944 <fsm_manual_run+0x2dc>)
 80008f2:	f002 fd6b 	bl	80033cc <iprintf>
			}
			if(isButtonPressed(3) == 1){
 80008f6:	2003      	movs	r0, #3
 80008f8:	f7ff fc28 	bl	800014c <isButtonPressed>
 80008fc:	4603      	mov	r3, r0
 80008fe:	2b01      	cmp	r3, #1
 8000900:	d115      	bne.n	800092e <fsm_manual_run+0x2c6>
				green_duration =  green_duration_clone;
 8000902:	4b15      	ldr	r3, [pc, #84]	; (8000958 <fsm_manual_run+0x2f0>)
 8000904:	681b      	ldr	r3, [r3, #0]
 8000906:	4a13      	ldr	r2, [pc, #76]	; (8000954 <fsm_manual_run+0x2ec>)
 8000908:	6013      	str	r3, [r2, #0]
				red_duration = green_duration + yellow_duration;
 800090a:	4b12      	ldr	r3, [pc, #72]	; (8000954 <fsm_manual_run+0x2ec>)
 800090c:	681a      	ldr	r2, [r3, #0]
 800090e:	4b10      	ldr	r3, [pc, #64]	; (8000950 <fsm_manual_run+0x2e8>)
 8000910:	681b      	ldr	r3, [r3, #0]
 8000912:	4413      	add	r3, r2
 8000914:	4a0d      	ldr	r2, [pc, #52]	; (800094c <fsm_manual_run+0x2e4>)
 8000916:	6013      	str	r3, [r2, #0]
				status = INIT;
 8000918:	4b06      	ldr	r3, [pc, #24]	; (8000934 <fsm_manual_run+0x2cc>)
 800091a:	2201      	movs	r2, #1
 800091c:	601a      	str	r2, [r3, #0]
			}
			break;
 800091e:	e006      	b.n	800092e <fsm_manual_run+0x2c6>
		default:
			initializeDurationClones();
 8000920:	f7ff fe84 	bl	800062c <initializeDurationClones>
			break;
 8000924:	e004      	b.n	8000930 <fsm_manual_run+0x2c8>
			break;
 8000926:	bf00      	nop
 8000928:	e002      	b.n	8000930 <fsm_manual_run+0x2c8>
			break;
 800092a:	bf00      	nop
 800092c:	e000      	b.n	8000930 <fsm_manual_run+0x2c8>
			break;
 800092e:	bf00      	nop
	}
}
 8000930:	bf00      	nop
 8000932:	bd80      	pop	{r7, pc}
 8000934:	20000114 	.word	0x20000114
 8000938:	20000148 	.word	0x20000148
 800093c:	20000070 	.word	0x20000070
 8000940:	20000184 	.word	0x20000184
 8000944:	080042a4 	.word	0x080042a4
 8000948:	2000017c 	.word	0x2000017c
 800094c:	20000064 	.word	0x20000064
 8000950:	2000006c 	.word	0x2000006c
 8000954:	20000068 	.word	0x20000068
 8000958:	20000180 	.word	0x20000180

0800095c <__io_putchar>:
#include "global.h"
int status = 0;
int horizontal_number = 0;
int vertical_number = 0;

int __io_putchar(int ch) {
 800095c:	b580      	push	{r7, lr}
 800095e:	b082      	sub	sp, #8
 8000960:	af00      	add	r7, sp, #0
 8000962:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8000964:	1d39      	adds	r1, r7, #4
 8000966:	f04f 33ff 	mov.w	r3, #4294967295
 800096a:	2201      	movs	r2, #1
 800096c:	4803      	ldr	r0, [pc, #12]	; (800097c <__io_putchar+0x20>)
 800096e:	f002 fb7b 	bl	8003068 <HAL_UART_Transmit>
    return ch;
 8000972:	687b      	ldr	r3, [r7, #4]
}
 8000974:	4618      	mov	r0, r3
 8000976:	3708      	adds	r7, #8
 8000978:	46bd      	mov	sp, r7
 800097a:	bd80      	pop	{r7, pc}
 800097c:	20000218 	.word	0x20000218

08000980 <countDown>:

void countDown(){
 8000980:	b580      	push	{r7, lr}
 8000982:	af00      	add	r7, sp, #0
    horizontal_number--;
 8000984:	4b0b      	ldr	r3, [pc, #44]	; (80009b4 <countDown+0x34>)
 8000986:	681b      	ldr	r3, [r3, #0]
 8000988:	3b01      	subs	r3, #1
 800098a:	4a0a      	ldr	r2, [pc, #40]	; (80009b4 <countDown+0x34>)
 800098c:	6013      	str	r3, [r2, #0]
    vertical_number--;
 800098e:	4b0a      	ldr	r3, [pc, #40]	; (80009b8 <countDown+0x38>)
 8000990:	681b      	ldr	r3, [r3, #0]
 8000992:	3b01      	subs	r3, #1
 8000994:	4a08      	ldr	r2, [pc, #32]	; (80009b8 <countDown+0x38>)
 8000996:	6013      	str	r3, [r2, #0]
    printf("Remaining horizontal second: %d\r\n", horizontal_number);
 8000998:	4b06      	ldr	r3, [pc, #24]	; (80009b4 <countDown+0x34>)
 800099a:	681b      	ldr	r3, [r3, #0]
 800099c:	4619      	mov	r1, r3
 800099e:	4807      	ldr	r0, [pc, #28]	; (80009bc <countDown+0x3c>)
 80009a0:	f002 fd14 	bl	80033cc <iprintf>
    printf("Remaining vertical second: %d\r\n", vertical_number);
 80009a4:	4b04      	ldr	r3, [pc, #16]	; (80009b8 <countDown+0x38>)
 80009a6:	681b      	ldr	r3, [r3, #0]
 80009a8:	4619      	mov	r1, r3
 80009aa:	4805      	ldr	r0, [pc, #20]	; (80009c0 <countDown+0x40>)
 80009ac:	f002 fd0e 	bl	80033cc <iprintf>
}
 80009b0:	bf00      	nop
 80009b2:	bd80      	pop	{r7, pc}
 80009b4:	20000118 	.word	0x20000118
 80009b8:	2000011c 	.word	0x2000011c
 80009bc:	080042b8 	.word	0x080042b8
 80009c0:	080042dc 	.word	0x080042dc

080009c4 <setInitialValue>:
void setInitialValue(int horizontal, int vertical){
 80009c4:	b580      	push	{r7, lr}
 80009c6:	b082      	sub	sp, #8
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	6078      	str	r0, [r7, #4]
 80009cc:	6039      	str	r1, [r7, #0]
    horizontal_number = horizontal;
 80009ce:	4a0b      	ldr	r2, [pc, #44]	; (80009fc <setInitialValue+0x38>)
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	6013      	str	r3, [r2, #0]
    vertical_number = vertical;
 80009d4:	4a0a      	ldr	r2, [pc, #40]	; (8000a00 <setInitialValue+0x3c>)
 80009d6:	683b      	ldr	r3, [r7, #0]
 80009d8:	6013      	str	r3, [r2, #0]
    printf("Remaining horizontal second: %d\r\n", horizontal_number);
 80009da:	4b08      	ldr	r3, [pc, #32]	; (80009fc <setInitialValue+0x38>)
 80009dc:	681b      	ldr	r3, [r3, #0]
 80009de:	4619      	mov	r1, r3
 80009e0:	4808      	ldr	r0, [pc, #32]	; (8000a04 <setInitialValue+0x40>)
 80009e2:	f002 fcf3 	bl	80033cc <iprintf>
    printf("Remaining vertical second: %d\r\n", vertical_number);
 80009e6:	4b06      	ldr	r3, [pc, #24]	; (8000a00 <setInitialValue+0x3c>)
 80009e8:	681b      	ldr	r3, [r3, #0]
 80009ea:	4619      	mov	r1, r3
 80009ec:	4806      	ldr	r0, [pc, #24]	; (8000a08 <setInitialValue+0x44>)
 80009ee:	f002 fced 	bl	80033cc <iprintf>
}
 80009f2:	bf00      	nop
 80009f4:	3708      	adds	r7, #8
 80009f6:	46bd      	mov	sp, r7
 80009f8:	bd80      	pop	{r7, pc}
 80009fa:	bf00      	nop
 80009fc:	20000118 	.word	0x20000118
 8000a00:	2000011c 	.word	0x2000011c
 8000a04:	080042b8 	.word	0x080042b8
 8000a08:	080042dc 	.word	0x080042dc

08000a0c <setHorizontalLeds>:
void setHorizontalLeds(int red, int green, int yellow){
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b084      	sub	sp, #16
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	60f8      	str	r0, [r7, #12]
 8000a14:	60b9      	str	r1, [r7, #8]
 8000a16:	607a      	str	r2, [r7, #4]
    if(red == SET){
 8000a18:	68fb      	ldr	r3, [r7, #12]
 8000a1a:	2b01      	cmp	r3, #1
 8000a1c:	d109      	bne.n	8000a32 <setHorizontalLeds+0x26>
        HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, SET);
 8000a1e:	2201      	movs	r2, #1
 8000a20:	2120      	movs	r1, #32
 8000a22:	481c      	ldr	r0, [pc, #112]	; (8000a94 <setHorizontalLeds+0x88>)
 8000a24:	f000 ffd9 	bl	80019da <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, RESET);
 8000a28:	2200      	movs	r2, #0
 8000a2a:	2110      	movs	r1, #16
 8000a2c:	4819      	ldr	r0, [pc, #100]	; (8000a94 <setHorizontalLeds+0x88>)
 8000a2e:	f000 ffd4 	bl	80019da <HAL_GPIO_WritePin>
    }
    if(green == SET){
 8000a32:	68bb      	ldr	r3, [r7, #8]
 8000a34:	2b01      	cmp	r3, #1
 8000a36:	d109      	bne.n	8000a4c <setHorizontalLeds+0x40>
        HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, RESET);
 8000a38:	2200      	movs	r2, #0
 8000a3a:	2120      	movs	r1, #32
 8000a3c:	4815      	ldr	r0, [pc, #84]	; (8000a94 <setHorizontalLeds+0x88>)
 8000a3e:	f000 ffcc 	bl	80019da <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, SET);
 8000a42:	2201      	movs	r2, #1
 8000a44:	2110      	movs	r1, #16
 8000a46:	4813      	ldr	r0, [pc, #76]	; (8000a94 <setHorizontalLeds+0x88>)
 8000a48:	f000 ffc7 	bl	80019da <HAL_GPIO_WritePin>
    }
    if(yellow == SET){
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	2b01      	cmp	r3, #1
 8000a50:	d109      	bne.n	8000a66 <setHorizontalLeds+0x5a>
        HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, SET);
 8000a52:	2201      	movs	r2, #1
 8000a54:	2120      	movs	r1, #32
 8000a56:	480f      	ldr	r0, [pc, #60]	; (8000a94 <setHorizontalLeds+0x88>)
 8000a58:	f000 ffbf 	bl	80019da <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, SET);
 8000a5c:	2201      	movs	r2, #1
 8000a5e:	2110      	movs	r1, #16
 8000a60:	480c      	ldr	r0, [pc, #48]	; (8000a94 <setHorizontalLeds+0x88>)
 8000a62:	f000 ffba 	bl	80019da <HAL_GPIO_WritePin>
    }
    if(red==RESET && green==RESET && yellow==RESET){
 8000a66:	68fb      	ldr	r3, [r7, #12]
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	d10f      	bne.n	8000a8c <setHorizontalLeds+0x80>
 8000a6c:	68bb      	ldr	r3, [r7, #8]
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	d10c      	bne.n	8000a8c <setHorizontalLeds+0x80>
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	d109      	bne.n	8000a8c <setHorizontalLeds+0x80>
        HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, RESET);
 8000a78:	2200      	movs	r2, #0
 8000a7a:	2120      	movs	r1, #32
 8000a7c:	4805      	ldr	r0, [pc, #20]	; (8000a94 <setHorizontalLeds+0x88>)
 8000a7e:	f000 ffac 	bl	80019da <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, RESET);
 8000a82:	2200      	movs	r2, #0
 8000a84:	2110      	movs	r1, #16
 8000a86:	4803      	ldr	r0, [pc, #12]	; (8000a94 <setHorizontalLeds+0x88>)
 8000a88:	f000 ffa7 	bl	80019da <HAL_GPIO_WritePin>
    }
}
 8000a8c:	bf00      	nop
 8000a8e:	3710      	adds	r7, #16
 8000a90:	46bd      	mov	sp, r7
 8000a92:	bd80      	pop	{r7, pc}
 8000a94:	40010c00 	.word	0x40010c00

08000a98 <setVerticalLeds>:
void setVerticalLeds(int red, int green, int yellow){
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b084      	sub	sp, #16
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	60f8      	str	r0, [r7, #12]
 8000aa0:	60b9      	str	r1, [r7, #8]
 8000aa2:	607a      	str	r2, [r7, #4]
    if(red == SET){
 8000aa4:	68fb      	ldr	r3, [r7, #12]
 8000aa6:	2b01      	cmp	r3, #1
 8000aa8:	d10a      	bne.n	8000ac0 <setVerticalLeds+0x28>
        HAL_GPIO_WritePin(D2_GPIO_Port, D2_Pin, SET);
 8000aaa:	2201      	movs	r2, #1
 8000aac:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ab0:	481d      	ldr	r0, [pc, #116]	; (8000b28 <setVerticalLeds+0x90>)
 8000ab2:	f000 ff92 	bl	80019da <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, RESET);
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	2108      	movs	r1, #8
 8000aba:	481c      	ldr	r0, [pc, #112]	; (8000b2c <setVerticalLeds+0x94>)
 8000abc:	f000 ff8d 	bl	80019da <HAL_GPIO_WritePin>
    }
    if(green == SET){
 8000ac0:	68bb      	ldr	r3, [r7, #8]
 8000ac2:	2b01      	cmp	r3, #1
 8000ac4:	d10a      	bne.n	8000adc <setVerticalLeds+0x44>
        HAL_GPIO_WritePin(D2_GPIO_Port, D2_Pin, RESET);
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000acc:	4816      	ldr	r0, [pc, #88]	; (8000b28 <setVerticalLeds+0x90>)
 8000ace:	f000 ff84 	bl	80019da <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, SET);
 8000ad2:	2201      	movs	r2, #1
 8000ad4:	2108      	movs	r1, #8
 8000ad6:	4815      	ldr	r0, [pc, #84]	; (8000b2c <setVerticalLeds+0x94>)
 8000ad8:	f000 ff7f 	bl	80019da <HAL_GPIO_WritePin>
    }
    if(yellow == SET){
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	2b01      	cmp	r3, #1
 8000ae0:	d10a      	bne.n	8000af8 <setVerticalLeds+0x60>
        HAL_GPIO_WritePin(D2_GPIO_Port, D2_Pin, SET);
 8000ae2:	2201      	movs	r2, #1
 8000ae4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ae8:	480f      	ldr	r0, [pc, #60]	; (8000b28 <setVerticalLeds+0x90>)
 8000aea:	f000 ff76 	bl	80019da <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, SET);
 8000aee:	2201      	movs	r2, #1
 8000af0:	2108      	movs	r1, #8
 8000af2:	480e      	ldr	r0, [pc, #56]	; (8000b2c <setVerticalLeds+0x94>)
 8000af4:	f000 ff71 	bl	80019da <HAL_GPIO_WritePin>
    }
    if(red==RESET && green==RESET && yellow==RESET){
 8000af8:	68fb      	ldr	r3, [r7, #12]
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	d110      	bne.n	8000b20 <setVerticalLeds+0x88>
 8000afe:	68bb      	ldr	r3, [r7, #8]
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	d10d      	bne.n	8000b20 <setVerticalLeds+0x88>
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	d10a      	bne.n	8000b20 <setVerticalLeds+0x88>
        HAL_GPIO_WritePin(D2_GPIO_Port, D2_Pin, RESET);
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b10:	4805      	ldr	r0, [pc, #20]	; (8000b28 <setVerticalLeds+0x90>)
 8000b12:	f000 ff62 	bl	80019da <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, RESET);
 8000b16:	2200      	movs	r2, #0
 8000b18:	2108      	movs	r1, #8
 8000b1a:	4804      	ldr	r0, [pc, #16]	; (8000b2c <setVerticalLeds+0x94>)
 8000b1c:	f000 ff5d 	bl	80019da <HAL_GPIO_WritePin>
    }
}
 8000b20:	bf00      	nop
 8000b22:	3710      	adds	r7, #16
 8000b24:	46bd      	mov	sp, r7
 8000b26:	bd80      	pop	{r7, pc}
 8000b28:	40010800 	.word	0x40010800
 8000b2c:	40010c00 	.word	0x40010c00

08000b30 <setPedesLeds>:
void setPedesLeds(int red, int green, int mixed){
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b084      	sub	sp, #16
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	60f8      	str	r0, [r7, #12]
 8000b38:	60b9      	str	r1, [r7, #8]
 8000b3a:	607a      	str	r2, [r7, #4]
    if(red == SET){
 8000b3c:	68fb      	ldr	r3, [r7, #12]
 8000b3e:	2b01      	cmp	r3, #1
 8000b40:	d10b      	bne.n	8000b5a <setPedesLeds+0x2a>
        HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, SET);
 8000b42:	2201      	movs	r2, #1
 8000b44:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b48:	4814      	ldr	r0, [pc, #80]	; (8000b9c <setPedesLeds+0x6c>)
 8000b4a:	f000 ff46 	bl	80019da <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(D7_GPIO_Port, D7_Pin, RESET);
 8000b4e:	2200      	movs	r2, #0
 8000b50:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b54:	4812      	ldr	r0, [pc, #72]	; (8000ba0 <setPedesLeds+0x70>)
 8000b56:	f000 ff40 	bl	80019da <HAL_GPIO_WritePin>
    }
    if(green == SET){
 8000b5a:	68bb      	ldr	r3, [r7, #8]
 8000b5c:	2b01      	cmp	r3, #1
 8000b5e:	d10b      	bne.n	8000b78 <setPedesLeds+0x48>
        HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, RESET);
 8000b60:	2200      	movs	r2, #0
 8000b62:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b66:	480d      	ldr	r0, [pc, #52]	; (8000b9c <setPedesLeds+0x6c>)
 8000b68:	f000 ff37 	bl	80019da <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(D7_GPIO_Port, D7_Pin, SET);
 8000b6c:	2201      	movs	r2, #1
 8000b6e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b72:	480b      	ldr	r0, [pc, #44]	; (8000ba0 <setPedesLeds+0x70>)
 8000b74:	f000 ff31 	bl	80019da <HAL_GPIO_WritePin>
    }
    if(mixed == SET){
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	2b01      	cmp	r3, #1
 8000b7c:	d10a      	bne.n	8000b94 <setPedesLeds+0x64>
        HAL_GPIO_WritePin(D2_GPIO_Port, D2_Pin, SET);
 8000b7e:	2201      	movs	r2, #1
 8000b80:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b84:	4806      	ldr	r0, [pc, #24]	; (8000ba0 <setPedesLeds+0x70>)
 8000b86:	f000 ff28 	bl	80019da <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, SET);
 8000b8a:	2201      	movs	r2, #1
 8000b8c:	2108      	movs	r1, #8
 8000b8e:	4803      	ldr	r0, [pc, #12]	; (8000b9c <setPedesLeds+0x6c>)
 8000b90:	f000 ff23 	bl	80019da <HAL_GPIO_WritePin>
    }
//    HAL_GPIO_WritePin(D2_GPIO_Port, D2_Pin, RESET);
//    HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, RESET);	Toggle Led error
}
 8000b94:	bf00      	nop
 8000b96:	3710      	adds	r7, #16
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	bd80      	pop	{r7, pc}
 8000b9c:	40010c00 	.word	0x40010c00
 8000ba0:	40010800 	.word	0x40010800

08000ba4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ba8:	f000 fc6a 	bl	8001480 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000bac:	f000 f818 	bl	8000be0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000bb0:	f000 f942 	bl	8000e38 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000bb4:	f000 f854 	bl	8000c60 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000bb8:	f000 f89e 	bl	8000cf8 <MX_TIM3_Init>
  MX_USART2_UART_Init();
 8000bbc:	f000 f912 	bl	8000de4 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8000bc0:	4805      	ldr	r0, [pc, #20]	; (8000bd8 <main+0x34>)
 8000bc2:	f001 fbb1 	bl	8002328 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  status = INIT;
 8000bc6:	4b05      	ldr	r3, [pc, #20]	; (8000bdc <main+0x38>)
 8000bc8:	2201      	movs	r2, #1
 8000bca:	601a      	str	r2, [r3, #0]
  while (1)
  {
	  fsm_automatic_run();
 8000bcc:	f7ff fb7a 	bl	80002c4 <fsm_automatic_run>
	  fsm_manual_run();
 8000bd0:	f7ff fd4a 	bl	8000668 <fsm_manual_run>
	  fsm_automatic_run();
 8000bd4:	e7fa      	b.n	8000bcc <main+0x28>
 8000bd6:	bf00      	nop
 8000bd8:	200001d0 	.word	0x200001d0
 8000bdc:	20000114 	.word	0x20000114

08000be0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b090      	sub	sp, #64	; 0x40
 8000be4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000be6:	f107 0318 	add.w	r3, r7, #24
 8000bea:	2228      	movs	r2, #40	; 0x28
 8000bec:	2100      	movs	r1, #0
 8000bee:	4618      	mov	r0, r3
 8000bf0:	f002 fbe4 	bl	80033bc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000bf4:	1d3b      	adds	r3, r7, #4
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	601a      	str	r2, [r3, #0]
 8000bfa:	605a      	str	r2, [r3, #4]
 8000bfc:	609a      	str	r2, [r3, #8]
 8000bfe:	60da      	str	r2, [r3, #12]
 8000c00:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000c02:	2302      	movs	r3, #2
 8000c04:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c06:	2301      	movs	r3, #1
 8000c08:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000c0a:	2310      	movs	r3, #16
 8000c0c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c0e:	2302      	movs	r3, #2
 8000c10:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8000c12:	2300      	movs	r3, #0
 8000c14:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000c16:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8000c1a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c1c:	f107 0318 	add.w	r3, r7, #24
 8000c20:	4618      	mov	r0, r3
 8000c22:	f000 fef3 	bl	8001a0c <HAL_RCC_OscConfig>
 8000c26:	4603      	mov	r3, r0
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	d001      	beq.n	8000c30 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000c2c:	f000 f99e 	bl	8000f6c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c30:	230f      	movs	r3, #15
 8000c32:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c34:	2302      	movs	r3, #2
 8000c36:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV8;
 8000c38:	23a0      	movs	r3, #160	; 0xa0
 8000c3a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c40:	2300      	movs	r3, #0
 8000c42:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000c44:	1d3b      	adds	r3, r7, #4
 8000c46:	2102      	movs	r1, #2
 8000c48:	4618      	mov	r0, r3
 8000c4a:	f001 f95f 	bl	8001f0c <HAL_RCC_ClockConfig>
 8000c4e:	4603      	mov	r3, r0
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	d001      	beq.n	8000c58 <SystemClock_Config+0x78>
  {
    Error_Handler();
 8000c54:	f000 f98a 	bl	8000f6c <Error_Handler>
  }
}
 8000c58:	bf00      	nop
 8000c5a:	3740      	adds	r7, #64	; 0x40
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	bd80      	pop	{r7, pc}

08000c60 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b086      	sub	sp, #24
 8000c64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c66:	f107 0308 	add.w	r3, r7, #8
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	601a      	str	r2, [r3, #0]
 8000c6e:	605a      	str	r2, [r3, #4]
 8000c70:	609a      	str	r2, [r3, #8]
 8000c72:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c74:	463b      	mov	r3, r7
 8000c76:	2200      	movs	r2, #0
 8000c78:	601a      	str	r2, [r3, #0]
 8000c7a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000c7c:	4b1d      	ldr	r3, [pc, #116]	; (8000cf4 <MX_TIM2_Init+0x94>)
 8000c7e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000c82:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8000c84:	4b1b      	ldr	r3, [pc, #108]	; (8000cf4 <MX_TIM2_Init+0x94>)
 8000c86:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8000c8a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c8c:	4b19      	ldr	r3, [pc, #100]	; (8000cf4 <MX_TIM2_Init+0x94>)
 8000c8e:	2200      	movs	r2, #0
 8000c90:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 8000c92:	4b18      	ldr	r3, [pc, #96]	; (8000cf4 <MX_TIM2_Init+0x94>)
 8000c94:	2209      	movs	r2, #9
 8000c96:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c98:	4b16      	ldr	r3, [pc, #88]	; (8000cf4 <MX_TIM2_Init+0x94>)
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c9e:	4b15      	ldr	r3, [pc, #84]	; (8000cf4 <MX_TIM2_Init+0x94>)
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000ca4:	4813      	ldr	r0, [pc, #76]	; (8000cf4 <MX_TIM2_Init+0x94>)
 8000ca6:	f001 faef 	bl	8002288 <HAL_TIM_Base_Init>
 8000caa:	4603      	mov	r3, r0
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	d001      	beq.n	8000cb4 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000cb0:	f000 f95c 	bl	8000f6c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000cb4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000cb8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000cba:	f107 0308 	add.w	r3, r7, #8
 8000cbe:	4619      	mov	r1, r3
 8000cc0:	480c      	ldr	r0, [pc, #48]	; (8000cf4 <MX_TIM2_Init+0x94>)
 8000cc2:	f001 fda5 	bl	8002810 <HAL_TIM_ConfigClockSource>
 8000cc6:	4603      	mov	r3, r0
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	d001      	beq.n	8000cd0 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000ccc:	f000 f94e 	bl	8000f6c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000cd8:	463b      	mov	r3, r7
 8000cda:	4619      	mov	r1, r3
 8000cdc:	4805      	ldr	r0, [pc, #20]	; (8000cf4 <MX_TIM2_Init+0x94>)
 8000cde:	f002 f903 	bl	8002ee8 <HAL_TIMEx_MasterConfigSynchronization>
 8000ce2:	4603      	mov	r3, r0
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d001      	beq.n	8000cec <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000ce8:	f000 f940 	bl	8000f6c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000cec:	bf00      	nop
 8000cee:	3718      	adds	r7, #24
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	bd80      	pop	{r7, pc}
 8000cf4:	200001d0 	.word	0x200001d0

08000cf8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b08e      	sub	sp, #56	; 0x38
 8000cfc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000cfe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000d02:	2200      	movs	r2, #0
 8000d04:	601a      	str	r2, [r3, #0]
 8000d06:	605a      	str	r2, [r3, #4]
 8000d08:	609a      	str	r2, [r3, #8]
 8000d0a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d0c:	f107 0320 	add.w	r3, r7, #32
 8000d10:	2200      	movs	r2, #0
 8000d12:	601a      	str	r2, [r3, #0]
 8000d14:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000d16:	1d3b      	adds	r3, r7, #4
 8000d18:	2200      	movs	r2, #0
 8000d1a:	601a      	str	r2, [r3, #0]
 8000d1c:	605a      	str	r2, [r3, #4]
 8000d1e:	609a      	str	r2, [r3, #8]
 8000d20:	60da      	str	r2, [r3, #12]
 8000d22:	611a      	str	r2, [r3, #16]
 8000d24:	615a      	str	r2, [r3, #20]
 8000d26:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000d28:	4b2c      	ldr	r3, [pc, #176]	; (8000ddc <MX_TIM3_Init+0xe4>)
 8000d2a:	4a2d      	ldr	r2, [pc, #180]	; (8000de0 <MX_TIM3_Init+0xe8>)
 8000d2c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 239;
 8000d2e:	4b2b      	ldr	r3, [pc, #172]	; (8000ddc <MX_TIM3_Init+0xe4>)
 8000d30:	22ef      	movs	r2, #239	; 0xef
 8000d32:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d34:	4b29      	ldr	r3, [pc, #164]	; (8000ddc <MX_TIM3_Init+0xe4>)
 8000d36:	2200      	movs	r2, #0
 8000d38:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100;
 8000d3a:	4b28      	ldr	r3, [pc, #160]	; (8000ddc <MX_TIM3_Init+0xe4>)
 8000d3c:	2264      	movs	r2, #100	; 0x64
 8000d3e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d40:	4b26      	ldr	r3, [pc, #152]	; (8000ddc <MX_TIM3_Init+0xe4>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d46:	4b25      	ldr	r3, [pc, #148]	; (8000ddc <MX_TIM3_Init+0xe4>)
 8000d48:	2200      	movs	r2, #0
 8000d4a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000d4c:	4823      	ldr	r0, [pc, #140]	; (8000ddc <MX_TIM3_Init+0xe4>)
 8000d4e:	f001 fa9b 	bl	8002288 <HAL_TIM_Base_Init>
 8000d52:	4603      	mov	r3, r0
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	d001      	beq.n	8000d5c <MX_TIM3_Init+0x64>
  {
    Error_Handler();
 8000d58:	f000 f908 	bl	8000f6c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d5c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d60:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000d62:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000d66:	4619      	mov	r1, r3
 8000d68:	481c      	ldr	r0, [pc, #112]	; (8000ddc <MX_TIM3_Init+0xe4>)
 8000d6a:	f001 fd51 	bl	8002810 <HAL_TIM_ConfigClockSource>
 8000d6e:	4603      	mov	r3, r0
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d001      	beq.n	8000d78 <MX_TIM3_Init+0x80>
  {
    Error_Handler();
 8000d74:	f000 f8fa 	bl	8000f6c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000d78:	4818      	ldr	r0, [pc, #96]	; (8000ddc <MX_TIM3_Init+0xe4>)
 8000d7a:	f001 fb27 	bl	80023cc <HAL_TIM_PWM_Init>
 8000d7e:	4603      	mov	r3, r0
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d001      	beq.n	8000d88 <MX_TIM3_Init+0x90>
  {
    Error_Handler();
 8000d84:	f000 f8f2 	bl	8000f6c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d88:	2300      	movs	r3, #0
 8000d8a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000d90:	f107 0320 	add.w	r3, r7, #32
 8000d94:	4619      	mov	r1, r3
 8000d96:	4811      	ldr	r0, [pc, #68]	; (8000ddc <MX_TIM3_Init+0xe4>)
 8000d98:	f002 f8a6 	bl	8002ee8 <HAL_TIMEx_MasterConfigSynchronization>
 8000d9c:	4603      	mov	r3, r0
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d001      	beq.n	8000da6 <MX_TIM3_Init+0xae>
  {
    Error_Handler();
 8000da2:	f000 f8e3 	bl	8000f6c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000da6:	2360      	movs	r3, #96	; 0x60
 8000da8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000daa:	2300      	movs	r3, #0
 8000dac:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000dae:	2300      	movs	r3, #0
 8000db0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000db2:	2300      	movs	r3, #0
 8000db4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000db6:	1d3b      	adds	r3, r7, #4
 8000db8:	2200      	movs	r2, #0
 8000dba:	4619      	mov	r1, r3
 8000dbc:	4807      	ldr	r0, [pc, #28]	; (8000ddc <MX_TIM3_Init+0xe4>)
 8000dbe:	f001 fc65 	bl	800268c <HAL_TIM_PWM_ConfigChannel>
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	d001      	beq.n	8000dcc <MX_TIM3_Init+0xd4>
  {
    Error_Handler();
 8000dc8:	f000 f8d0 	bl	8000f6c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000dcc:	4803      	ldr	r0, [pc, #12]	; (8000ddc <MX_TIM3_Init+0xe4>)
 8000dce:	f000 f97d 	bl	80010cc <HAL_TIM_MspPostInit>

}
 8000dd2:	bf00      	nop
 8000dd4:	3738      	adds	r7, #56	; 0x38
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	bd80      	pop	{r7, pc}
 8000dda:	bf00      	nop
 8000ddc:	20000188 	.word	0x20000188
 8000de0:	40000400 	.word	0x40000400

08000de4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000de8:	4b11      	ldr	r3, [pc, #68]	; (8000e30 <MX_USART2_UART_Init+0x4c>)
 8000dea:	4a12      	ldr	r2, [pc, #72]	; (8000e34 <MX_USART2_UART_Init+0x50>)
 8000dec:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000dee:	4b10      	ldr	r3, [pc, #64]	; (8000e30 <MX_USART2_UART_Init+0x4c>)
 8000df0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000df4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000df6:	4b0e      	ldr	r3, [pc, #56]	; (8000e30 <MX_USART2_UART_Init+0x4c>)
 8000df8:	2200      	movs	r2, #0
 8000dfa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000dfc:	4b0c      	ldr	r3, [pc, #48]	; (8000e30 <MX_USART2_UART_Init+0x4c>)
 8000dfe:	2200      	movs	r2, #0
 8000e00:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000e02:	4b0b      	ldr	r3, [pc, #44]	; (8000e30 <MX_USART2_UART_Init+0x4c>)
 8000e04:	2200      	movs	r2, #0
 8000e06:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000e08:	4b09      	ldr	r3, [pc, #36]	; (8000e30 <MX_USART2_UART_Init+0x4c>)
 8000e0a:	220c      	movs	r2, #12
 8000e0c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e0e:	4b08      	ldr	r3, [pc, #32]	; (8000e30 <MX_USART2_UART_Init+0x4c>)
 8000e10:	2200      	movs	r2, #0
 8000e12:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e14:	4b06      	ldr	r3, [pc, #24]	; (8000e30 <MX_USART2_UART_Init+0x4c>)
 8000e16:	2200      	movs	r2, #0
 8000e18:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000e1a:	4805      	ldr	r0, [pc, #20]	; (8000e30 <MX_USART2_UART_Init+0x4c>)
 8000e1c:	f002 f8d4 	bl	8002fc8 <HAL_UART_Init>
 8000e20:	4603      	mov	r3, r0
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d001      	beq.n	8000e2a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000e26:	f000 f8a1 	bl	8000f6c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000e2a:	bf00      	nop
 8000e2c:	bd80      	pop	{r7, pc}
 8000e2e:	bf00      	nop
 8000e30:	20000218 	.word	0x20000218
 8000e34:	40004400 	.word	0x40004400

08000e38 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b086      	sub	sp, #24
 8000e3c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e3e:	f107 0308 	add.w	r3, r7, #8
 8000e42:	2200      	movs	r2, #0
 8000e44:	601a      	str	r2, [r3, #0]
 8000e46:	605a      	str	r2, [r3, #4]
 8000e48:	609a      	str	r2, [r3, #8]
 8000e4a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e4c:	4b2e      	ldr	r3, [pc, #184]	; (8000f08 <MX_GPIO_Init+0xd0>)
 8000e4e:	699b      	ldr	r3, [r3, #24]
 8000e50:	4a2d      	ldr	r2, [pc, #180]	; (8000f08 <MX_GPIO_Init+0xd0>)
 8000e52:	f043 0304 	orr.w	r3, r3, #4
 8000e56:	6193      	str	r3, [r2, #24]
 8000e58:	4b2b      	ldr	r3, [pc, #172]	; (8000f08 <MX_GPIO_Init+0xd0>)
 8000e5a:	699b      	ldr	r3, [r3, #24]
 8000e5c:	f003 0304 	and.w	r3, r3, #4
 8000e60:	607b      	str	r3, [r7, #4]
 8000e62:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e64:	4b28      	ldr	r3, [pc, #160]	; (8000f08 <MX_GPIO_Init+0xd0>)
 8000e66:	699b      	ldr	r3, [r3, #24]
 8000e68:	4a27      	ldr	r2, [pc, #156]	; (8000f08 <MX_GPIO_Init+0xd0>)
 8000e6a:	f043 0308 	orr.w	r3, r3, #8
 8000e6e:	6193      	str	r3, [r2, #24]
 8000e70:	4b25      	ldr	r3, [pc, #148]	; (8000f08 <MX_GPIO_Init+0xd0>)
 8000e72:	699b      	ldr	r3, [r3, #24]
 8000e74:	f003 0308 	and.w	r3, r3, #8
 8000e78:	603b      	str	r3, [r7, #0]
 8000e7a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, D6_Pin|D3_Pin|D5_Pin|D4_Pin, GPIO_PIN_RESET);
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	f44f 6187 	mov.w	r1, #1080	; 0x438
 8000e82:	4822      	ldr	r0, [pc, #136]	; (8000f0c <MX_GPIO_Init+0xd4>)
 8000e84:	f000 fda9 	bl	80019da <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, D7_Pin|D2_Pin, GPIO_PIN_RESET);
 8000e88:	2200      	movs	r2, #0
 8000e8a:	f44f 61a0 	mov.w	r1, #1280	; 0x500
 8000e8e:	4820      	ldr	r0, [pc, #128]	; (8000f10 <MX_GPIO_Init+0xd8>)
 8000e90:	f000 fda3 	bl	80019da <HAL_GPIO_WritePin>

  /*Configure GPIO pins : A0_Pin A1_Pin A2_Pin */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin;
 8000e94:	2313      	movs	r3, #19
 8000e96:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e98:	2300      	movs	r3, #0
 8000e9a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e9c:	2301      	movs	r3, #1
 8000e9e:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ea0:	f107 0308 	add.w	r3, r7, #8
 8000ea4:	4619      	mov	r1, r3
 8000ea6:	481a      	ldr	r0, [pc, #104]	; (8000f10 <MX_GPIO_Init+0xd8>)
 8000ea8:	f000 fbfc 	bl	80016a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : A3_Pin */
  GPIO_InitStruct.Pin = A3_Pin;
 8000eac:	2301      	movs	r3, #1
 8000eae:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000eb4:	2301      	movs	r3, #1
 8000eb6:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(A3_GPIO_Port, &GPIO_InitStruct);
 8000eb8:	f107 0308 	add.w	r3, r7, #8
 8000ebc:	4619      	mov	r1, r3
 8000ebe:	4813      	ldr	r0, [pc, #76]	; (8000f0c <MX_GPIO_Init+0xd4>)
 8000ec0:	f000 fbf0 	bl	80016a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : D6_Pin D3_Pin D5_Pin D4_Pin */
  GPIO_InitStruct.Pin = D6_Pin|D3_Pin|D5_Pin|D4_Pin;
 8000ec4:	f44f 6387 	mov.w	r3, #1080	; 0x438
 8000ec8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000eca:	2301      	movs	r3, #1
 8000ecc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ece:	2300      	movs	r3, #0
 8000ed0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ed2:	2302      	movs	r3, #2
 8000ed4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ed6:	f107 0308 	add.w	r3, r7, #8
 8000eda:	4619      	mov	r1, r3
 8000edc:	480b      	ldr	r0, [pc, #44]	; (8000f0c <MX_GPIO_Init+0xd4>)
 8000ede:	f000 fbe1 	bl	80016a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : D7_Pin D2_Pin */
  GPIO_InitStruct.Pin = D7_Pin|D2_Pin;
 8000ee2:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 8000ee6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ee8:	2301      	movs	r3, #1
 8000eea:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eec:	2300      	movs	r3, #0
 8000eee:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ef0:	2302      	movs	r3, #2
 8000ef2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ef4:	f107 0308 	add.w	r3, r7, #8
 8000ef8:	4619      	mov	r1, r3
 8000efa:	4805      	ldr	r0, [pc, #20]	; (8000f10 <MX_GPIO_Init+0xd8>)
 8000efc:	f000 fbd2 	bl	80016a4 <HAL_GPIO_Init>

}
 8000f00:	bf00      	nop
 8000f02:	3718      	adds	r7, #24
 8000f04:	46bd      	mov	sp, r7
 8000f06:	bd80      	pop	{r7, pc}
 8000f08:	40021000 	.word	0x40021000
 8000f0c:	40010c00 	.word	0x40010c00
 8000f10:	40010800 	.word	0x40010800

08000f14 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b082      	sub	sp, #8
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */
//////
  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	4a11      	ldr	r2, [pc, #68]	; (8000f68 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8000f22:	4293      	cmp	r3, r2
 8000f24:	d101      	bne.n	8000f2a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000f26:	f000 fac1 	bl	80014ac <HAL_IncTick>
  }
  if (htim->Instance == TIM2) {
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000f32:	d114      	bne.n	8000f5e <HAL_TIM_PeriodElapsedCallback+0x4a>
      timerRun(0); // led duration
 8000f34:	2000      	movs	r0, #0
 8000f36:	f000 f837 	bl	8000fa8 <timerRun>
      timerRun(1); //  7-segment counter 1s
 8000f3a:	2001      	movs	r0, #1
 8000f3c:	f000 f834 	bl	8000fa8 <timerRun>
      timerRun(3); // blinking led
 8000f40:	2003      	movs	r0, #3
 8000f42:	f000 f831 	bl	8000fa8 <timerRun>
      getKeyInput(0);
 8000f46:	2000      	movs	r0, #0
 8000f48:	f7ff f92a 	bl	80001a0 <getKeyInput>
      getKeyInput(1);
 8000f4c:	2001      	movs	r0, #1
 8000f4e:	f7ff f927 	bl	80001a0 <getKeyInput>
      getKeyInput(2);
 8000f52:	2002      	movs	r0, #2
 8000f54:	f7ff f924 	bl	80001a0 <getKeyInput>
      getKeyInput(3);
 8000f58:	2003      	movs	r0, #3
 8000f5a:	f7ff f921 	bl	80001a0 <getKeyInput>
  }
  /* USER CODE BEGIN Callback 1 */
//////
  /* USER CODE END Callback 1 */
}
 8000f5e:	bf00      	nop
 8000f60:	3708      	adds	r7, #8
 8000f62:	46bd      	mov	sp, r7
 8000f64:	bd80      	pop	{r7, pc}
 8000f66:	bf00      	nop
 8000f68:	40012c00 	.word	0x40012c00

08000f6c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f70:	b672      	cpsid	i
}
 8000f72:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f74:	e7fe      	b.n	8000f74 <Error_Handler+0x8>
	...

08000f78 <setTimer>:
#include "software_timer.h"

int timer_counter[10] = {0};
int timer_flag[10] = {0};

void setTimer(int duration, int timerId){
 8000f78:	b480      	push	{r7}
 8000f7a:	b083      	sub	sp, #12
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]
 8000f80:	6039      	str	r1, [r7, #0]
	timer_counter[timerId] = duration;
 8000f82:	4907      	ldr	r1, [pc, #28]	; (8000fa0 <setTimer+0x28>)
 8000f84:	683b      	ldr	r3, [r7, #0]
 8000f86:	687a      	ldr	r2, [r7, #4]
 8000f88:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	timer_flag[timerId] = 0;
 8000f8c:	4a05      	ldr	r2, [pc, #20]	; (8000fa4 <setTimer+0x2c>)
 8000f8e:	683b      	ldr	r3, [r7, #0]
 8000f90:	2100      	movs	r1, #0
 8000f92:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 8000f96:	bf00      	nop
 8000f98:	370c      	adds	r7, #12
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	bc80      	pop	{r7}
 8000f9e:	4770      	bx	lr
 8000fa0:	20000120 	.word	0x20000120
 8000fa4:	20000148 	.word	0x20000148

08000fa8 <timerRun>:
void timerRun(int timerId){
 8000fa8:	b480      	push	{r7}
 8000faa:	b083      	sub	sp, #12
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]
	if(timer_counter[timerId] > 0){
 8000fb0:	4a0f      	ldr	r2, [pc, #60]	; (8000ff0 <timerRun+0x48>)
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	dd13      	ble.n	8000fe4 <timerRun+0x3c>
		timer_counter[timerId]--;
 8000fbc:	4a0c      	ldr	r2, [pc, #48]	; (8000ff0 <timerRun+0x48>)
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fc4:	1e5a      	subs	r2, r3, #1
 8000fc6:	490a      	ldr	r1, [pc, #40]	; (8000ff0 <timerRun+0x48>)
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		if(timer_counter[timerId] <= 0){
 8000fce:	4a08      	ldr	r2, [pc, #32]	; (8000ff0 <timerRun+0x48>)
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	dc04      	bgt.n	8000fe4 <timerRun+0x3c>
			timer_flag[timerId] = 1;
 8000fda:	4a06      	ldr	r2, [pc, #24]	; (8000ff4 <timerRun+0x4c>)
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	2101      	movs	r1, #1
 8000fe0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		}
	}
}
 8000fe4:	bf00      	nop
 8000fe6:	370c      	adds	r7, #12
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	bc80      	pop	{r7}
 8000fec:	4770      	bx	lr
 8000fee:	bf00      	nop
 8000ff0:	20000120 	.word	0x20000120
 8000ff4:	20000148 	.word	0x20000148

08000ff8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	b085      	sub	sp, #20
 8000ffc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000ffe:	4b15      	ldr	r3, [pc, #84]	; (8001054 <HAL_MspInit+0x5c>)
 8001000:	699b      	ldr	r3, [r3, #24]
 8001002:	4a14      	ldr	r2, [pc, #80]	; (8001054 <HAL_MspInit+0x5c>)
 8001004:	f043 0301 	orr.w	r3, r3, #1
 8001008:	6193      	str	r3, [r2, #24]
 800100a:	4b12      	ldr	r3, [pc, #72]	; (8001054 <HAL_MspInit+0x5c>)
 800100c:	699b      	ldr	r3, [r3, #24]
 800100e:	f003 0301 	and.w	r3, r3, #1
 8001012:	60bb      	str	r3, [r7, #8]
 8001014:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001016:	4b0f      	ldr	r3, [pc, #60]	; (8001054 <HAL_MspInit+0x5c>)
 8001018:	69db      	ldr	r3, [r3, #28]
 800101a:	4a0e      	ldr	r2, [pc, #56]	; (8001054 <HAL_MspInit+0x5c>)
 800101c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001020:	61d3      	str	r3, [r2, #28]
 8001022:	4b0c      	ldr	r3, [pc, #48]	; (8001054 <HAL_MspInit+0x5c>)
 8001024:	69db      	ldr	r3, [r3, #28]
 8001026:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800102a:	607b      	str	r3, [r7, #4]
 800102c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800102e:	4b0a      	ldr	r3, [pc, #40]	; (8001058 <HAL_MspInit+0x60>)
 8001030:	685b      	ldr	r3, [r3, #4]
 8001032:	60fb      	str	r3, [r7, #12]
 8001034:	68fb      	ldr	r3, [r7, #12]
 8001036:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800103a:	60fb      	str	r3, [r7, #12]
 800103c:	68fb      	ldr	r3, [r7, #12]
 800103e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001042:	60fb      	str	r3, [r7, #12]
 8001044:	4a04      	ldr	r2, [pc, #16]	; (8001058 <HAL_MspInit+0x60>)
 8001046:	68fb      	ldr	r3, [r7, #12]
 8001048:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800104a:	bf00      	nop
 800104c:	3714      	adds	r7, #20
 800104e:	46bd      	mov	sp, r7
 8001050:	bc80      	pop	{r7}
 8001052:	4770      	bx	lr
 8001054:	40021000 	.word	0x40021000
 8001058:	40010000 	.word	0x40010000

0800105c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b084      	sub	sp, #16
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800106c:	d114      	bne.n	8001098 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800106e:	4b15      	ldr	r3, [pc, #84]	; (80010c4 <HAL_TIM_Base_MspInit+0x68>)
 8001070:	69db      	ldr	r3, [r3, #28]
 8001072:	4a14      	ldr	r2, [pc, #80]	; (80010c4 <HAL_TIM_Base_MspInit+0x68>)
 8001074:	f043 0301 	orr.w	r3, r3, #1
 8001078:	61d3      	str	r3, [r2, #28]
 800107a:	4b12      	ldr	r3, [pc, #72]	; (80010c4 <HAL_TIM_Base_MspInit+0x68>)
 800107c:	69db      	ldr	r3, [r3, #28]
 800107e:	f003 0301 	and.w	r3, r3, #1
 8001082:	60fb      	str	r3, [r7, #12]
 8001084:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001086:	2200      	movs	r2, #0
 8001088:	2100      	movs	r1, #0
 800108a:	201c      	movs	r0, #28
 800108c:	f000 fadf 	bl	800164e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001090:	201c      	movs	r0, #28
 8001092:	f000 faf8 	bl	8001686 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001096:	e010      	b.n	80010ba <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM3)
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	4a0a      	ldr	r2, [pc, #40]	; (80010c8 <HAL_TIM_Base_MspInit+0x6c>)
 800109e:	4293      	cmp	r3, r2
 80010a0:	d10b      	bne.n	80010ba <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80010a2:	4b08      	ldr	r3, [pc, #32]	; (80010c4 <HAL_TIM_Base_MspInit+0x68>)
 80010a4:	69db      	ldr	r3, [r3, #28]
 80010a6:	4a07      	ldr	r2, [pc, #28]	; (80010c4 <HAL_TIM_Base_MspInit+0x68>)
 80010a8:	f043 0302 	orr.w	r3, r3, #2
 80010ac:	61d3      	str	r3, [r2, #28]
 80010ae:	4b05      	ldr	r3, [pc, #20]	; (80010c4 <HAL_TIM_Base_MspInit+0x68>)
 80010b0:	69db      	ldr	r3, [r3, #28]
 80010b2:	f003 0302 	and.w	r3, r3, #2
 80010b6:	60bb      	str	r3, [r7, #8]
 80010b8:	68bb      	ldr	r3, [r7, #8]
}
 80010ba:	bf00      	nop
 80010bc:	3710      	adds	r7, #16
 80010be:	46bd      	mov	sp, r7
 80010c0:	bd80      	pop	{r7, pc}
 80010c2:	bf00      	nop
 80010c4:	40021000 	.word	0x40021000
 80010c8:	40000400 	.word	0x40000400

080010cc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b088      	sub	sp, #32
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010d4:	f107 0310 	add.w	r3, r7, #16
 80010d8:	2200      	movs	r2, #0
 80010da:	601a      	str	r2, [r3, #0]
 80010dc:	605a      	str	r2, [r3, #4]
 80010de:	609a      	str	r2, [r3, #8]
 80010e0:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM3)
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	4a0f      	ldr	r2, [pc, #60]	; (8001124 <HAL_TIM_MspPostInit+0x58>)
 80010e8:	4293      	cmp	r3, r2
 80010ea:	d117      	bne.n	800111c <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010ec:	4b0e      	ldr	r3, [pc, #56]	; (8001128 <HAL_TIM_MspPostInit+0x5c>)
 80010ee:	699b      	ldr	r3, [r3, #24]
 80010f0:	4a0d      	ldr	r2, [pc, #52]	; (8001128 <HAL_TIM_MspPostInit+0x5c>)
 80010f2:	f043 0304 	orr.w	r3, r3, #4
 80010f6:	6193      	str	r3, [r2, #24]
 80010f8:	4b0b      	ldr	r3, [pc, #44]	; (8001128 <HAL_TIM_MspPostInit+0x5c>)
 80010fa:	699b      	ldr	r3, [r3, #24]
 80010fc:	f003 0304 	and.w	r3, r3, #4
 8001100:	60fb      	str	r3, [r7, #12]
 8001102:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001104:	2340      	movs	r3, #64	; 0x40
 8001106:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001108:	2302      	movs	r3, #2
 800110a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800110c:	2302      	movs	r3, #2
 800110e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001110:	f107 0310 	add.w	r3, r7, #16
 8001114:	4619      	mov	r1, r3
 8001116:	4805      	ldr	r0, [pc, #20]	; (800112c <HAL_TIM_MspPostInit+0x60>)
 8001118:	f000 fac4 	bl	80016a4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800111c:	bf00      	nop
 800111e:	3720      	adds	r7, #32
 8001120:	46bd      	mov	sp, r7
 8001122:	bd80      	pop	{r7, pc}
 8001124:	40000400 	.word	0x40000400
 8001128:	40021000 	.word	0x40021000
 800112c:	40010800 	.word	0x40010800

08001130 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b088      	sub	sp, #32
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001138:	f107 0310 	add.w	r3, r7, #16
 800113c:	2200      	movs	r2, #0
 800113e:	601a      	str	r2, [r3, #0]
 8001140:	605a      	str	r2, [r3, #4]
 8001142:	609a      	str	r2, [r3, #8]
 8001144:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	4a1b      	ldr	r2, [pc, #108]	; (80011b8 <HAL_UART_MspInit+0x88>)
 800114c:	4293      	cmp	r3, r2
 800114e:	d12f      	bne.n	80011b0 <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001150:	4b1a      	ldr	r3, [pc, #104]	; (80011bc <HAL_UART_MspInit+0x8c>)
 8001152:	69db      	ldr	r3, [r3, #28]
 8001154:	4a19      	ldr	r2, [pc, #100]	; (80011bc <HAL_UART_MspInit+0x8c>)
 8001156:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800115a:	61d3      	str	r3, [r2, #28]
 800115c:	4b17      	ldr	r3, [pc, #92]	; (80011bc <HAL_UART_MspInit+0x8c>)
 800115e:	69db      	ldr	r3, [r3, #28]
 8001160:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001164:	60fb      	str	r3, [r7, #12]
 8001166:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001168:	4b14      	ldr	r3, [pc, #80]	; (80011bc <HAL_UART_MspInit+0x8c>)
 800116a:	699b      	ldr	r3, [r3, #24]
 800116c:	4a13      	ldr	r2, [pc, #76]	; (80011bc <HAL_UART_MspInit+0x8c>)
 800116e:	f043 0304 	orr.w	r3, r3, #4
 8001172:	6193      	str	r3, [r2, #24]
 8001174:	4b11      	ldr	r3, [pc, #68]	; (80011bc <HAL_UART_MspInit+0x8c>)
 8001176:	699b      	ldr	r3, [r3, #24]
 8001178:	f003 0304 	and.w	r3, r3, #4
 800117c:	60bb      	str	r3, [r7, #8]
 800117e:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001180:	2304      	movs	r3, #4
 8001182:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001184:	2302      	movs	r3, #2
 8001186:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001188:	2303      	movs	r3, #3
 800118a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800118c:	f107 0310 	add.w	r3, r7, #16
 8001190:	4619      	mov	r1, r3
 8001192:	480b      	ldr	r0, [pc, #44]	; (80011c0 <HAL_UART_MspInit+0x90>)
 8001194:	f000 fa86 	bl	80016a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001198:	2308      	movs	r3, #8
 800119a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800119c:	2300      	movs	r3, #0
 800119e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011a0:	2300      	movs	r3, #0
 80011a2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011a4:	f107 0310 	add.w	r3, r7, #16
 80011a8:	4619      	mov	r1, r3
 80011aa:	4805      	ldr	r0, [pc, #20]	; (80011c0 <HAL_UART_MspInit+0x90>)
 80011ac:	f000 fa7a 	bl	80016a4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80011b0:	bf00      	nop
 80011b2:	3720      	adds	r7, #32
 80011b4:	46bd      	mov	sp, r7
 80011b6:	bd80      	pop	{r7, pc}
 80011b8:	40004400 	.word	0x40004400
 80011bc:	40021000 	.word	0x40021000
 80011c0:	40010800 	.word	0x40010800

080011c4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b08c      	sub	sp, #48	; 0x30
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80011cc:	2300      	movs	r3, #0
 80011ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80011d0:	2300      	movs	r3, #0
 80011d2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0);
 80011d4:	2200      	movs	r2, #0
 80011d6:	6879      	ldr	r1, [r7, #4]
 80011d8:	2019      	movs	r0, #25
 80011da:	f000 fa38 	bl	800164e <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 80011de:	2019      	movs	r0, #25
 80011e0:	f000 fa51 	bl	8001686 <HAL_NVIC_EnableIRQ>

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80011e4:	4b1e      	ldr	r3, [pc, #120]	; (8001260 <HAL_InitTick+0x9c>)
 80011e6:	699b      	ldr	r3, [r3, #24]
 80011e8:	4a1d      	ldr	r2, [pc, #116]	; (8001260 <HAL_InitTick+0x9c>)
 80011ea:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80011ee:	6193      	str	r3, [r2, #24]
 80011f0:	4b1b      	ldr	r3, [pc, #108]	; (8001260 <HAL_InitTick+0x9c>)
 80011f2:	699b      	ldr	r3, [r3, #24]
 80011f4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80011f8:	60fb      	str	r3, [r7, #12]
 80011fa:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80011fc:	f107 0210 	add.w	r2, r7, #16
 8001200:	f107 0314 	add.w	r3, r7, #20
 8001204:	4611      	mov	r1, r2
 8001206:	4618      	mov	r0, r3
 8001208:	f000 fff0 	bl	80021ec <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 800120c:	f000 ffda 	bl	80021c4 <HAL_RCC_GetPCLK2Freq>
 8001210:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001212:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001214:	4a13      	ldr	r2, [pc, #76]	; (8001264 <HAL_InitTick+0xa0>)
 8001216:	fba2 2303 	umull	r2, r3, r2, r3
 800121a:	0c9b      	lsrs	r3, r3, #18
 800121c:	3b01      	subs	r3, #1
 800121e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001220:	4b11      	ldr	r3, [pc, #68]	; (8001268 <HAL_InitTick+0xa4>)
 8001222:	4a12      	ldr	r2, [pc, #72]	; (800126c <HAL_InitTick+0xa8>)
 8001224:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8001226:	4b10      	ldr	r3, [pc, #64]	; (8001268 <HAL_InitTick+0xa4>)
 8001228:	f240 32e7 	movw	r2, #999	; 0x3e7
 800122c:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 800122e:	4a0e      	ldr	r2, [pc, #56]	; (8001268 <HAL_InitTick+0xa4>)
 8001230:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001232:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001234:	4b0c      	ldr	r3, [pc, #48]	; (8001268 <HAL_InitTick+0xa4>)
 8001236:	2200      	movs	r2, #0
 8001238:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800123a:	4b0b      	ldr	r3, [pc, #44]	; (8001268 <HAL_InitTick+0xa4>)
 800123c:	2200      	movs	r2, #0
 800123e:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8001240:	4809      	ldr	r0, [pc, #36]	; (8001268 <HAL_InitTick+0xa4>)
 8001242:	f001 f821 	bl	8002288 <HAL_TIM_Base_Init>
 8001246:	4603      	mov	r3, r0
 8001248:	2b00      	cmp	r3, #0
 800124a:	d104      	bne.n	8001256 <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 800124c:	4806      	ldr	r0, [pc, #24]	; (8001268 <HAL_InitTick+0xa4>)
 800124e:	f001 f86b 	bl	8002328 <HAL_TIM_Base_Start_IT>
 8001252:	4603      	mov	r3, r0
 8001254:	e000      	b.n	8001258 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 8001256:	2301      	movs	r3, #1
}
 8001258:	4618      	mov	r0, r3
 800125a:	3730      	adds	r7, #48	; 0x30
 800125c:	46bd      	mov	sp, r7
 800125e:	bd80      	pop	{r7, pc}
 8001260:	40021000 	.word	0x40021000
 8001264:	431bde83 	.word	0x431bde83
 8001268:	20000260 	.word	0x20000260
 800126c:	40012c00 	.word	0x40012c00

08001270 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001270:	b480      	push	{r7}
 8001272:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001274:	e7fe      	b.n	8001274 <NMI_Handler+0x4>

08001276 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001276:	b480      	push	{r7}
 8001278:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800127a:	e7fe      	b.n	800127a <HardFault_Handler+0x4>

0800127c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800127c:	b480      	push	{r7}
 800127e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001280:	e7fe      	b.n	8001280 <MemManage_Handler+0x4>

08001282 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001282:	b480      	push	{r7}
 8001284:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001286:	e7fe      	b.n	8001286 <BusFault_Handler+0x4>

08001288 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001288:	b480      	push	{r7}
 800128a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800128c:	e7fe      	b.n	800128c <UsageFault_Handler+0x4>

0800128e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800128e:	b480      	push	{r7}
 8001290:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001292:	bf00      	nop
 8001294:	46bd      	mov	sp, r7
 8001296:	bc80      	pop	{r7}
 8001298:	4770      	bx	lr

0800129a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800129a:	b480      	push	{r7}
 800129c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800129e:	bf00      	nop
 80012a0:	46bd      	mov	sp, r7
 80012a2:	bc80      	pop	{r7}
 80012a4:	4770      	bx	lr

080012a6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80012a6:	b480      	push	{r7}
 80012a8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80012aa:	bf00      	nop
 80012ac:	46bd      	mov	sp, r7
 80012ae:	bc80      	pop	{r7}
 80012b0:	4770      	bx	lr

080012b2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80012b2:	b480      	push	{r7}
 80012b4:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80012b6:	bf00      	nop
 80012b8:	46bd      	mov	sp, r7
 80012ba:	bc80      	pop	{r7}
 80012bc:	4770      	bx	lr
	...

080012c0 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80012c4:	4802      	ldr	r0, [pc, #8]	; (80012d0 <TIM1_UP_IRQHandler+0x10>)
 80012c6:	f001 f8d9 	bl	800247c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 80012ca:	bf00      	nop
 80012cc:	bd80      	pop	{r7, pc}
 80012ce:	bf00      	nop
 80012d0:	20000260 	.word	0x20000260

080012d4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80012d8:	4802      	ldr	r0, [pc, #8]	; (80012e4 <TIM2_IRQHandler+0x10>)
 80012da:	f001 f8cf 	bl	800247c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80012de:	bf00      	nop
 80012e0:	bd80      	pop	{r7, pc}
 80012e2:	bf00      	nop
 80012e4:	200001d0 	.word	0x200001d0

080012e8 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b086      	sub	sp, #24
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	60f8      	str	r0, [r7, #12]
 80012f0:	60b9      	str	r1, [r7, #8]
 80012f2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012f4:	2300      	movs	r3, #0
 80012f6:	617b      	str	r3, [r7, #20]
 80012f8:	e00a      	b.n	8001310 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80012fa:	f3af 8000 	nop.w
 80012fe:	4601      	mov	r1, r0
 8001300:	68bb      	ldr	r3, [r7, #8]
 8001302:	1c5a      	adds	r2, r3, #1
 8001304:	60ba      	str	r2, [r7, #8]
 8001306:	b2ca      	uxtb	r2, r1
 8001308:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800130a:	697b      	ldr	r3, [r7, #20]
 800130c:	3301      	adds	r3, #1
 800130e:	617b      	str	r3, [r7, #20]
 8001310:	697a      	ldr	r2, [r7, #20]
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	429a      	cmp	r2, r3
 8001316:	dbf0      	blt.n	80012fa <_read+0x12>
	}

return len;
 8001318:	687b      	ldr	r3, [r7, #4]
}
 800131a:	4618      	mov	r0, r3
 800131c:	3718      	adds	r7, #24
 800131e:	46bd      	mov	sp, r7
 8001320:	bd80      	pop	{r7, pc}

08001322 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001322:	b580      	push	{r7, lr}
 8001324:	b086      	sub	sp, #24
 8001326:	af00      	add	r7, sp, #0
 8001328:	60f8      	str	r0, [r7, #12]
 800132a:	60b9      	str	r1, [r7, #8]
 800132c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800132e:	2300      	movs	r3, #0
 8001330:	617b      	str	r3, [r7, #20]
 8001332:	e009      	b.n	8001348 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001334:	68bb      	ldr	r3, [r7, #8]
 8001336:	1c5a      	adds	r2, r3, #1
 8001338:	60ba      	str	r2, [r7, #8]
 800133a:	781b      	ldrb	r3, [r3, #0]
 800133c:	4618      	mov	r0, r3
 800133e:	f7ff fb0d 	bl	800095c <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001342:	697b      	ldr	r3, [r7, #20]
 8001344:	3301      	adds	r3, #1
 8001346:	617b      	str	r3, [r7, #20]
 8001348:	697a      	ldr	r2, [r7, #20]
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	429a      	cmp	r2, r3
 800134e:	dbf1      	blt.n	8001334 <_write+0x12>
	}
	return len;
 8001350:	687b      	ldr	r3, [r7, #4]
}
 8001352:	4618      	mov	r0, r3
 8001354:	3718      	adds	r7, #24
 8001356:	46bd      	mov	sp, r7
 8001358:	bd80      	pop	{r7, pc}

0800135a <_close>:

int _close(int file)
{
 800135a:	b480      	push	{r7}
 800135c:	b083      	sub	sp, #12
 800135e:	af00      	add	r7, sp, #0
 8001360:	6078      	str	r0, [r7, #4]
	return -1;
 8001362:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001366:	4618      	mov	r0, r3
 8001368:	370c      	adds	r7, #12
 800136a:	46bd      	mov	sp, r7
 800136c:	bc80      	pop	{r7}
 800136e:	4770      	bx	lr

08001370 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001370:	b480      	push	{r7}
 8001372:	b083      	sub	sp, #12
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
 8001378:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800137a:	683b      	ldr	r3, [r7, #0]
 800137c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001380:	605a      	str	r2, [r3, #4]
	return 0;
 8001382:	2300      	movs	r3, #0
}
 8001384:	4618      	mov	r0, r3
 8001386:	370c      	adds	r7, #12
 8001388:	46bd      	mov	sp, r7
 800138a:	bc80      	pop	{r7}
 800138c:	4770      	bx	lr

0800138e <_isatty>:

int _isatty(int file)
{
 800138e:	b480      	push	{r7}
 8001390:	b083      	sub	sp, #12
 8001392:	af00      	add	r7, sp, #0
 8001394:	6078      	str	r0, [r7, #4]
	return 1;
 8001396:	2301      	movs	r3, #1
}
 8001398:	4618      	mov	r0, r3
 800139a:	370c      	adds	r7, #12
 800139c:	46bd      	mov	sp, r7
 800139e:	bc80      	pop	{r7}
 80013a0:	4770      	bx	lr

080013a2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80013a2:	b480      	push	{r7}
 80013a4:	b085      	sub	sp, #20
 80013a6:	af00      	add	r7, sp, #0
 80013a8:	60f8      	str	r0, [r7, #12]
 80013aa:	60b9      	str	r1, [r7, #8]
 80013ac:	607a      	str	r2, [r7, #4]
	return 0;
 80013ae:	2300      	movs	r3, #0
}
 80013b0:	4618      	mov	r0, r3
 80013b2:	3714      	adds	r7, #20
 80013b4:	46bd      	mov	sp, r7
 80013b6:	bc80      	pop	{r7}
 80013b8:	4770      	bx	lr
	...

080013bc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	b086      	sub	sp, #24
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80013c4:	4a14      	ldr	r2, [pc, #80]	; (8001418 <_sbrk+0x5c>)
 80013c6:	4b15      	ldr	r3, [pc, #84]	; (800141c <_sbrk+0x60>)
 80013c8:	1ad3      	subs	r3, r2, r3
 80013ca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80013cc:	697b      	ldr	r3, [r7, #20]
 80013ce:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80013d0:	4b13      	ldr	r3, [pc, #76]	; (8001420 <_sbrk+0x64>)
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d102      	bne.n	80013de <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80013d8:	4b11      	ldr	r3, [pc, #68]	; (8001420 <_sbrk+0x64>)
 80013da:	4a12      	ldr	r2, [pc, #72]	; (8001424 <_sbrk+0x68>)
 80013dc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80013de:	4b10      	ldr	r3, [pc, #64]	; (8001420 <_sbrk+0x64>)
 80013e0:	681a      	ldr	r2, [r3, #0]
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	4413      	add	r3, r2
 80013e6:	693a      	ldr	r2, [r7, #16]
 80013e8:	429a      	cmp	r2, r3
 80013ea:	d207      	bcs.n	80013fc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80013ec:	f001 ffbc 	bl	8003368 <__errno>
 80013f0:	4603      	mov	r3, r0
 80013f2:	220c      	movs	r2, #12
 80013f4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80013f6:	f04f 33ff 	mov.w	r3, #4294967295
 80013fa:	e009      	b.n	8001410 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80013fc:	4b08      	ldr	r3, [pc, #32]	; (8001420 <_sbrk+0x64>)
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001402:	4b07      	ldr	r3, [pc, #28]	; (8001420 <_sbrk+0x64>)
 8001404:	681a      	ldr	r2, [r3, #0]
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	4413      	add	r3, r2
 800140a:	4a05      	ldr	r2, [pc, #20]	; (8001420 <_sbrk+0x64>)
 800140c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800140e:	68fb      	ldr	r3, [r7, #12]
}
 8001410:	4618      	mov	r0, r3
 8001412:	3718      	adds	r7, #24
 8001414:	46bd      	mov	sp, r7
 8001416:	bd80      	pop	{r7, pc}
 8001418:	20005000 	.word	0x20005000
 800141c:	00000400 	.word	0x00000400
 8001420:	20000170 	.word	0x20000170
 8001424:	200002c0 	.word	0x200002c0

08001428 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001428:	b480      	push	{r7}
 800142a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800142c:	bf00      	nop
 800142e:	46bd      	mov	sp, r7
 8001430:	bc80      	pop	{r7}
 8001432:	4770      	bx	lr

08001434 <Reset_Handler>:
 8001434:	f7ff fff8 	bl	8001428 <SystemInit>
 8001438:	480b      	ldr	r0, [pc, #44]	; (8001468 <LoopFillZerobss+0xe>)
 800143a:	490c      	ldr	r1, [pc, #48]	; (800146c <LoopFillZerobss+0x12>)
 800143c:	4a0c      	ldr	r2, [pc, #48]	; (8001470 <LoopFillZerobss+0x16>)
 800143e:	2300      	movs	r3, #0
 8001440:	e002      	b.n	8001448 <LoopCopyDataInit>

08001442 <CopyDataInit>:
 8001442:	58d4      	ldr	r4, [r2, r3]
 8001444:	50c4      	str	r4, [r0, r3]
 8001446:	3304      	adds	r3, #4

08001448 <LoopCopyDataInit>:
 8001448:	18c4      	adds	r4, r0, r3
 800144a:	428c      	cmp	r4, r1
 800144c:	d3f9      	bcc.n	8001442 <CopyDataInit>
 800144e:	4a09      	ldr	r2, [pc, #36]	; (8001474 <LoopFillZerobss+0x1a>)
 8001450:	4c09      	ldr	r4, [pc, #36]	; (8001478 <LoopFillZerobss+0x1e>)
 8001452:	2300      	movs	r3, #0
 8001454:	e001      	b.n	800145a <LoopFillZerobss>

08001456 <FillZerobss>:
 8001456:	6013      	str	r3, [r2, #0]
 8001458:	3204      	adds	r2, #4

0800145a <LoopFillZerobss>:
 800145a:	42a2      	cmp	r2, r4
 800145c:	d3fb      	bcc.n	8001456 <FillZerobss>
 800145e:	f001 ff89 	bl	8003374 <__libc_init_array>
 8001462:	f7ff fb9f 	bl	8000ba4 <main>
 8001466:	4770      	bx	lr
 8001468:	20000000 	.word	0x20000000
 800146c:	200000e4 	.word	0x200000e4
 8001470:	080043c8 	.word	0x080043c8
 8001474:	200000e4 	.word	0x200000e4
 8001478:	200002bc 	.word	0x200002bc

0800147c <ADC1_2_IRQHandler>:
 800147c:	e7fe      	b.n	800147c <ADC1_2_IRQHandler>
	...

08001480 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001484:	4b08      	ldr	r3, [pc, #32]	; (80014a8 <HAL_Init+0x28>)
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	4a07      	ldr	r2, [pc, #28]	; (80014a8 <HAL_Init+0x28>)
 800148a:	f043 0310 	orr.w	r3, r3, #16
 800148e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001490:	2003      	movs	r0, #3
 8001492:	f000 f8d1 	bl	8001638 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001496:	200f      	movs	r0, #15
 8001498:	f7ff fe94 	bl	80011c4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800149c:	f7ff fdac 	bl	8000ff8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80014a0:	2300      	movs	r3, #0
}
 80014a2:	4618      	mov	r0, r3
 80014a4:	bd80      	pop	{r7, pc}
 80014a6:	bf00      	nop
 80014a8:	40022000 	.word	0x40022000

080014ac <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80014ac:	b480      	push	{r7}
 80014ae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80014b0:	4b05      	ldr	r3, [pc, #20]	; (80014c8 <HAL_IncTick+0x1c>)
 80014b2:	781b      	ldrb	r3, [r3, #0]
 80014b4:	461a      	mov	r2, r3
 80014b6:	4b05      	ldr	r3, [pc, #20]	; (80014cc <HAL_IncTick+0x20>)
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	4413      	add	r3, r2
 80014bc:	4a03      	ldr	r2, [pc, #12]	; (80014cc <HAL_IncTick+0x20>)
 80014be:	6013      	str	r3, [r2, #0]
}
 80014c0:	bf00      	nop
 80014c2:	46bd      	mov	sp, r7
 80014c4:	bc80      	pop	{r7}
 80014c6:	4770      	bx	lr
 80014c8:	2000007c 	.word	0x2000007c
 80014cc:	200002a8 	.word	0x200002a8

080014d0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80014d0:	b480      	push	{r7}
 80014d2:	af00      	add	r7, sp, #0
  return uwTick;
 80014d4:	4b02      	ldr	r3, [pc, #8]	; (80014e0 <HAL_GetTick+0x10>)
 80014d6:	681b      	ldr	r3, [r3, #0]
}
 80014d8:	4618      	mov	r0, r3
 80014da:	46bd      	mov	sp, r7
 80014dc:	bc80      	pop	{r7}
 80014de:	4770      	bx	lr
 80014e0:	200002a8 	.word	0x200002a8

080014e4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014e4:	b480      	push	{r7}
 80014e6:	b085      	sub	sp, #20
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	f003 0307 	and.w	r3, r3, #7
 80014f2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80014f4:	4b0c      	ldr	r3, [pc, #48]	; (8001528 <__NVIC_SetPriorityGrouping+0x44>)
 80014f6:	68db      	ldr	r3, [r3, #12]
 80014f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80014fa:	68ba      	ldr	r2, [r7, #8]
 80014fc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001500:	4013      	ands	r3, r2
 8001502:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001508:	68bb      	ldr	r3, [r7, #8]
 800150a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800150c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001510:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001514:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001516:	4a04      	ldr	r2, [pc, #16]	; (8001528 <__NVIC_SetPriorityGrouping+0x44>)
 8001518:	68bb      	ldr	r3, [r7, #8]
 800151a:	60d3      	str	r3, [r2, #12]
}
 800151c:	bf00      	nop
 800151e:	3714      	adds	r7, #20
 8001520:	46bd      	mov	sp, r7
 8001522:	bc80      	pop	{r7}
 8001524:	4770      	bx	lr
 8001526:	bf00      	nop
 8001528:	e000ed00 	.word	0xe000ed00

0800152c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800152c:	b480      	push	{r7}
 800152e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001530:	4b04      	ldr	r3, [pc, #16]	; (8001544 <__NVIC_GetPriorityGrouping+0x18>)
 8001532:	68db      	ldr	r3, [r3, #12]
 8001534:	0a1b      	lsrs	r3, r3, #8
 8001536:	f003 0307 	and.w	r3, r3, #7
}
 800153a:	4618      	mov	r0, r3
 800153c:	46bd      	mov	sp, r7
 800153e:	bc80      	pop	{r7}
 8001540:	4770      	bx	lr
 8001542:	bf00      	nop
 8001544:	e000ed00 	.word	0xe000ed00

08001548 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001548:	b480      	push	{r7}
 800154a:	b083      	sub	sp, #12
 800154c:	af00      	add	r7, sp, #0
 800154e:	4603      	mov	r3, r0
 8001550:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001552:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001556:	2b00      	cmp	r3, #0
 8001558:	db0b      	blt.n	8001572 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800155a:	79fb      	ldrb	r3, [r7, #7]
 800155c:	f003 021f 	and.w	r2, r3, #31
 8001560:	4906      	ldr	r1, [pc, #24]	; (800157c <__NVIC_EnableIRQ+0x34>)
 8001562:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001566:	095b      	lsrs	r3, r3, #5
 8001568:	2001      	movs	r0, #1
 800156a:	fa00 f202 	lsl.w	r2, r0, r2
 800156e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001572:	bf00      	nop
 8001574:	370c      	adds	r7, #12
 8001576:	46bd      	mov	sp, r7
 8001578:	bc80      	pop	{r7}
 800157a:	4770      	bx	lr
 800157c:	e000e100 	.word	0xe000e100

08001580 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001580:	b480      	push	{r7}
 8001582:	b083      	sub	sp, #12
 8001584:	af00      	add	r7, sp, #0
 8001586:	4603      	mov	r3, r0
 8001588:	6039      	str	r1, [r7, #0]
 800158a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800158c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001590:	2b00      	cmp	r3, #0
 8001592:	db0a      	blt.n	80015aa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001594:	683b      	ldr	r3, [r7, #0]
 8001596:	b2da      	uxtb	r2, r3
 8001598:	490c      	ldr	r1, [pc, #48]	; (80015cc <__NVIC_SetPriority+0x4c>)
 800159a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800159e:	0112      	lsls	r2, r2, #4
 80015a0:	b2d2      	uxtb	r2, r2
 80015a2:	440b      	add	r3, r1
 80015a4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80015a8:	e00a      	b.n	80015c0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015aa:	683b      	ldr	r3, [r7, #0]
 80015ac:	b2da      	uxtb	r2, r3
 80015ae:	4908      	ldr	r1, [pc, #32]	; (80015d0 <__NVIC_SetPriority+0x50>)
 80015b0:	79fb      	ldrb	r3, [r7, #7]
 80015b2:	f003 030f 	and.w	r3, r3, #15
 80015b6:	3b04      	subs	r3, #4
 80015b8:	0112      	lsls	r2, r2, #4
 80015ba:	b2d2      	uxtb	r2, r2
 80015bc:	440b      	add	r3, r1
 80015be:	761a      	strb	r2, [r3, #24]
}
 80015c0:	bf00      	nop
 80015c2:	370c      	adds	r7, #12
 80015c4:	46bd      	mov	sp, r7
 80015c6:	bc80      	pop	{r7}
 80015c8:	4770      	bx	lr
 80015ca:	bf00      	nop
 80015cc:	e000e100 	.word	0xe000e100
 80015d0:	e000ed00 	.word	0xe000ed00

080015d4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015d4:	b480      	push	{r7}
 80015d6:	b089      	sub	sp, #36	; 0x24
 80015d8:	af00      	add	r7, sp, #0
 80015da:	60f8      	str	r0, [r7, #12]
 80015dc:	60b9      	str	r1, [r7, #8]
 80015de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	f003 0307 	and.w	r3, r3, #7
 80015e6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80015e8:	69fb      	ldr	r3, [r7, #28]
 80015ea:	f1c3 0307 	rsb	r3, r3, #7
 80015ee:	2b04      	cmp	r3, #4
 80015f0:	bf28      	it	cs
 80015f2:	2304      	movcs	r3, #4
 80015f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80015f6:	69fb      	ldr	r3, [r7, #28]
 80015f8:	3304      	adds	r3, #4
 80015fa:	2b06      	cmp	r3, #6
 80015fc:	d902      	bls.n	8001604 <NVIC_EncodePriority+0x30>
 80015fe:	69fb      	ldr	r3, [r7, #28]
 8001600:	3b03      	subs	r3, #3
 8001602:	e000      	b.n	8001606 <NVIC_EncodePriority+0x32>
 8001604:	2300      	movs	r3, #0
 8001606:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001608:	f04f 32ff 	mov.w	r2, #4294967295
 800160c:	69bb      	ldr	r3, [r7, #24]
 800160e:	fa02 f303 	lsl.w	r3, r2, r3
 8001612:	43da      	mvns	r2, r3
 8001614:	68bb      	ldr	r3, [r7, #8]
 8001616:	401a      	ands	r2, r3
 8001618:	697b      	ldr	r3, [r7, #20]
 800161a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800161c:	f04f 31ff 	mov.w	r1, #4294967295
 8001620:	697b      	ldr	r3, [r7, #20]
 8001622:	fa01 f303 	lsl.w	r3, r1, r3
 8001626:	43d9      	mvns	r1, r3
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800162c:	4313      	orrs	r3, r2
         );
}
 800162e:	4618      	mov	r0, r3
 8001630:	3724      	adds	r7, #36	; 0x24
 8001632:	46bd      	mov	sp, r7
 8001634:	bc80      	pop	{r7}
 8001636:	4770      	bx	lr

08001638 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	b082      	sub	sp, #8
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001640:	6878      	ldr	r0, [r7, #4]
 8001642:	f7ff ff4f 	bl	80014e4 <__NVIC_SetPriorityGrouping>
}
 8001646:	bf00      	nop
 8001648:	3708      	adds	r7, #8
 800164a:	46bd      	mov	sp, r7
 800164c:	bd80      	pop	{r7, pc}

0800164e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800164e:	b580      	push	{r7, lr}
 8001650:	b086      	sub	sp, #24
 8001652:	af00      	add	r7, sp, #0
 8001654:	4603      	mov	r3, r0
 8001656:	60b9      	str	r1, [r7, #8]
 8001658:	607a      	str	r2, [r7, #4]
 800165a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800165c:	2300      	movs	r3, #0
 800165e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001660:	f7ff ff64 	bl	800152c <__NVIC_GetPriorityGrouping>
 8001664:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001666:	687a      	ldr	r2, [r7, #4]
 8001668:	68b9      	ldr	r1, [r7, #8]
 800166a:	6978      	ldr	r0, [r7, #20]
 800166c:	f7ff ffb2 	bl	80015d4 <NVIC_EncodePriority>
 8001670:	4602      	mov	r2, r0
 8001672:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001676:	4611      	mov	r1, r2
 8001678:	4618      	mov	r0, r3
 800167a:	f7ff ff81 	bl	8001580 <__NVIC_SetPriority>
}
 800167e:	bf00      	nop
 8001680:	3718      	adds	r7, #24
 8001682:	46bd      	mov	sp, r7
 8001684:	bd80      	pop	{r7, pc}

08001686 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001686:	b580      	push	{r7, lr}
 8001688:	b082      	sub	sp, #8
 800168a:	af00      	add	r7, sp, #0
 800168c:	4603      	mov	r3, r0
 800168e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001690:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001694:	4618      	mov	r0, r3
 8001696:	f7ff ff57 	bl	8001548 <__NVIC_EnableIRQ>
}
 800169a:	bf00      	nop
 800169c:	3708      	adds	r7, #8
 800169e:	46bd      	mov	sp, r7
 80016a0:	bd80      	pop	{r7, pc}
	...

080016a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80016a4:	b480      	push	{r7}
 80016a6:	b08b      	sub	sp, #44	; 0x2c
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	6078      	str	r0, [r7, #4]
 80016ac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80016ae:	2300      	movs	r3, #0
 80016b0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80016b2:	2300      	movs	r3, #0
 80016b4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80016b6:	e169      	b.n	800198c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80016b8:	2201      	movs	r2, #1
 80016ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016bc:	fa02 f303 	lsl.w	r3, r2, r3
 80016c0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80016c2:	683b      	ldr	r3, [r7, #0]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	69fa      	ldr	r2, [r7, #28]
 80016c8:	4013      	ands	r3, r2
 80016ca:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80016cc:	69ba      	ldr	r2, [r7, #24]
 80016ce:	69fb      	ldr	r3, [r7, #28]
 80016d0:	429a      	cmp	r2, r3
 80016d2:	f040 8158 	bne.w	8001986 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80016d6:	683b      	ldr	r3, [r7, #0]
 80016d8:	685b      	ldr	r3, [r3, #4]
 80016da:	4a9a      	ldr	r2, [pc, #616]	; (8001944 <HAL_GPIO_Init+0x2a0>)
 80016dc:	4293      	cmp	r3, r2
 80016de:	d05e      	beq.n	800179e <HAL_GPIO_Init+0xfa>
 80016e0:	4a98      	ldr	r2, [pc, #608]	; (8001944 <HAL_GPIO_Init+0x2a0>)
 80016e2:	4293      	cmp	r3, r2
 80016e4:	d875      	bhi.n	80017d2 <HAL_GPIO_Init+0x12e>
 80016e6:	4a98      	ldr	r2, [pc, #608]	; (8001948 <HAL_GPIO_Init+0x2a4>)
 80016e8:	4293      	cmp	r3, r2
 80016ea:	d058      	beq.n	800179e <HAL_GPIO_Init+0xfa>
 80016ec:	4a96      	ldr	r2, [pc, #600]	; (8001948 <HAL_GPIO_Init+0x2a4>)
 80016ee:	4293      	cmp	r3, r2
 80016f0:	d86f      	bhi.n	80017d2 <HAL_GPIO_Init+0x12e>
 80016f2:	4a96      	ldr	r2, [pc, #600]	; (800194c <HAL_GPIO_Init+0x2a8>)
 80016f4:	4293      	cmp	r3, r2
 80016f6:	d052      	beq.n	800179e <HAL_GPIO_Init+0xfa>
 80016f8:	4a94      	ldr	r2, [pc, #592]	; (800194c <HAL_GPIO_Init+0x2a8>)
 80016fa:	4293      	cmp	r3, r2
 80016fc:	d869      	bhi.n	80017d2 <HAL_GPIO_Init+0x12e>
 80016fe:	4a94      	ldr	r2, [pc, #592]	; (8001950 <HAL_GPIO_Init+0x2ac>)
 8001700:	4293      	cmp	r3, r2
 8001702:	d04c      	beq.n	800179e <HAL_GPIO_Init+0xfa>
 8001704:	4a92      	ldr	r2, [pc, #584]	; (8001950 <HAL_GPIO_Init+0x2ac>)
 8001706:	4293      	cmp	r3, r2
 8001708:	d863      	bhi.n	80017d2 <HAL_GPIO_Init+0x12e>
 800170a:	4a92      	ldr	r2, [pc, #584]	; (8001954 <HAL_GPIO_Init+0x2b0>)
 800170c:	4293      	cmp	r3, r2
 800170e:	d046      	beq.n	800179e <HAL_GPIO_Init+0xfa>
 8001710:	4a90      	ldr	r2, [pc, #576]	; (8001954 <HAL_GPIO_Init+0x2b0>)
 8001712:	4293      	cmp	r3, r2
 8001714:	d85d      	bhi.n	80017d2 <HAL_GPIO_Init+0x12e>
 8001716:	2b12      	cmp	r3, #18
 8001718:	d82a      	bhi.n	8001770 <HAL_GPIO_Init+0xcc>
 800171a:	2b12      	cmp	r3, #18
 800171c:	d859      	bhi.n	80017d2 <HAL_GPIO_Init+0x12e>
 800171e:	a201      	add	r2, pc, #4	; (adr r2, 8001724 <HAL_GPIO_Init+0x80>)
 8001720:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001724:	0800179f 	.word	0x0800179f
 8001728:	08001779 	.word	0x08001779
 800172c:	0800178b 	.word	0x0800178b
 8001730:	080017cd 	.word	0x080017cd
 8001734:	080017d3 	.word	0x080017d3
 8001738:	080017d3 	.word	0x080017d3
 800173c:	080017d3 	.word	0x080017d3
 8001740:	080017d3 	.word	0x080017d3
 8001744:	080017d3 	.word	0x080017d3
 8001748:	080017d3 	.word	0x080017d3
 800174c:	080017d3 	.word	0x080017d3
 8001750:	080017d3 	.word	0x080017d3
 8001754:	080017d3 	.word	0x080017d3
 8001758:	080017d3 	.word	0x080017d3
 800175c:	080017d3 	.word	0x080017d3
 8001760:	080017d3 	.word	0x080017d3
 8001764:	080017d3 	.word	0x080017d3
 8001768:	08001781 	.word	0x08001781
 800176c:	08001795 	.word	0x08001795
 8001770:	4a79      	ldr	r2, [pc, #484]	; (8001958 <HAL_GPIO_Init+0x2b4>)
 8001772:	4293      	cmp	r3, r2
 8001774:	d013      	beq.n	800179e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001776:	e02c      	b.n	80017d2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001778:	683b      	ldr	r3, [r7, #0]
 800177a:	68db      	ldr	r3, [r3, #12]
 800177c:	623b      	str	r3, [r7, #32]
          break;
 800177e:	e029      	b.n	80017d4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001780:	683b      	ldr	r3, [r7, #0]
 8001782:	68db      	ldr	r3, [r3, #12]
 8001784:	3304      	adds	r3, #4
 8001786:	623b      	str	r3, [r7, #32]
          break;
 8001788:	e024      	b.n	80017d4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800178a:	683b      	ldr	r3, [r7, #0]
 800178c:	68db      	ldr	r3, [r3, #12]
 800178e:	3308      	adds	r3, #8
 8001790:	623b      	str	r3, [r7, #32]
          break;
 8001792:	e01f      	b.n	80017d4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001794:	683b      	ldr	r3, [r7, #0]
 8001796:	68db      	ldr	r3, [r3, #12]
 8001798:	330c      	adds	r3, #12
 800179a:	623b      	str	r3, [r7, #32]
          break;
 800179c:	e01a      	b.n	80017d4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800179e:	683b      	ldr	r3, [r7, #0]
 80017a0:	689b      	ldr	r3, [r3, #8]
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d102      	bne.n	80017ac <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80017a6:	2304      	movs	r3, #4
 80017a8:	623b      	str	r3, [r7, #32]
          break;
 80017aa:	e013      	b.n	80017d4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80017ac:	683b      	ldr	r3, [r7, #0]
 80017ae:	689b      	ldr	r3, [r3, #8]
 80017b0:	2b01      	cmp	r3, #1
 80017b2:	d105      	bne.n	80017c0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80017b4:	2308      	movs	r3, #8
 80017b6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	69fa      	ldr	r2, [r7, #28]
 80017bc:	611a      	str	r2, [r3, #16]
          break;
 80017be:	e009      	b.n	80017d4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80017c0:	2308      	movs	r3, #8
 80017c2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	69fa      	ldr	r2, [r7, #28]
 80017c8:	615a      	str	r2, [r3, #20]
          break;
 80017ca:	e003      	b.n	80017d4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80017cc:	2300      	movs	r3, #0
 80017ce:	623b      	str	r3, [r7, #32]
          break;
 80017d0:	e000      	b.n	80017d4 <HAL_GPIO_Init+0x130>
          break;
 80017d2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80017d4:	69bb      	ldr	r3, [r7, #24]
 80017d6:	2bff      	cmp	r3, #255	; 0xff
 80017d8:	d801      	bhi.n	80017de <HAL_GPIO_Init+0x13a>
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	e001      	b.n	80017e2 <HAL_GPIO_Init+0x13e>
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	3304      	adds	r3, #4
 80017e2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80017e4:	69bb      	ldr	r3, [r7, #24]
 80017e6:	2bff      	cmp	r3, #255	; 0xff
 80017e8:	d802      	bhi.n	80017f0 <HAL_GPIO_Init+0x14c>
 80017ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017ec:	009b      	lsls	r3, r3, #2
 80017ee:	e002      	b.n	80017f6 <HAL_GPIO_Init+0x152>
 80017f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017f2:	3b08      	subs	r3, #8
 80017f4:	009b      	lsls	r3, r3, #2
 80017f6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80017f8:	697b      	ldr	r3, [r7, #20]
 80017fa:	681a      	ldr	r2, [r3, #0]
 80017fc:	210f      	movs	r1, #15
 80017fe:	693b      	ldr	r3, [r7, #16]
 8001800:	fa01 f303 	lsl.w	r3, r1, r3
 8001804:	43db      	mvns	r3, r3
 8001806:	401a      	ands	r2, r3
 8001808:	6a39      	ldr	r1, [r7, #32]
 800180a:	693b      	ldr	r3, [r7, #16]
 800180c:	fa01 f303 	lsl.w	r3, r1, r3
 8001810:	431a      	orrs	r2, r3
 8001812:	697b      	ldr	r3, [r7, #20]
 8001814:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001816:	683b      	ldr	r3, [r7, #0]
 8001818:	685b      	ldr	r3, [r3, #4]
 800181a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800181e:	2b00      	cmp	r3, #0
 8001820:	f000 80b1 	beq.w	8001986 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001824:	4b4d      	ldr	r3, [pc, #308]	; (800195c <HAL_GPIO_Init+0x2b8>)
 8001826:	699b      	ldr	r3, [r3, #24]
 8001828:	4a4c      	ldr	r2, [pc, #304]	; (800195c <HAL_GPIO_Init+0x2b8>)
 800182a:	f043 0301 	orr.w	r3, r3, #1
 800182e:	6193      	str	r3, [r2, #24]
 8001830:	4b4a      	ldr	r3, [pc, #296]	; (800195c <HAL_GPIO_Init+0x2b8>)
 8001832:	699b      	ldr	r3, [r3, #24]
 8001834:	f003 0301 	and.w	r3, r3, #1
 8001838:	60bb      	str	r3, [r7, #8]
 800183a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800183c:	4a48      	ldr	r2, [pc, #288]	; (8001960 <HAL_GPIO_Init+0x2bc>)
 800183e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001840:	089b      	lsrs	r3, r3, #2
 8001842:	3302      	adds	r3, #2
 8001844:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001848:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800184a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800184c:	f003 0303 	and.w	r3, r3, #3
 8001850:	009b      	lsls	r3, r3, #2
 8001852:	220f      	movs	r2, #15
 8001854:	fa02 f303 	lsl.w	r3, r2, r3
 8001858:	43db      	mvns	r3, r3
 800185a:	68fa      	ldr	r2, [r7, #12]
 800185c:	4013      	ands	r3, r2
 800185e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	4a40      	ldr	r2, [pc, #256]	; (8001964 <HAL_GPIO_Init+0x2c0>)
 8001864:	4293      	cmp	r3, r2
 8001866:	d013      	beq.n	8001890 <HAL_GPIO_Init+0x1ec>
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	4a3f      	ldr	r2, [pc, #252]	; (8001968 <HAL_GPIO_Init+0x2c4>)
 800186c:	4293      	cmp	r3, r2
 800186e:	d00d      	beq.n	800188c <HAL_GPIO_Init+0x1e8>
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	4a3e      	ldr	r2, [pc, #248]	; (800196c <HAL_GPIO_Init+0x2c8>)
 8001874:	4293      	cmp	r3, r2
 8001876:	d007      	beq.n	8001888 <HAL_GPIO_Init+0x1e4>
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	4a3d      	ldr	r2, [pc, #244]	; (8001970 <HAL_GPIO_Init+0x2cc>)
 800187c:	4293      	cmp	r3, r2
 800187e:	d101      	bne.n	8001884 <HAL_GPIO_Init+0x1e0>
 8001880:	2303      	movs	r3, #3
 8001882:	e006      	b.n	8001892 <HAL_GPIO_Init+0x1ee>
 8001884:	2304      	movs	r3, #4
 8001886:	e004      	b.n	8001892 <HAL_GPIO_Init+0x1ee>
 8001888:	2302      	movs	r3, #2
 800188a:	e002      	b.n	8001892 <HAL_GPIO_Init+0x1ee>
 800188c:	2301      	movs	r3, #1
 800188e:	e000      	b.n	8001892 <HAL_GPIO_Init+0x1ee>
 8001890:	2300      	movs	r3, #0
 8001892:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001894:	f002 0203 	and.w	r2, r2, #3
 8001898:	0092      	lsls	r2, r2, #2
 800189a:	4093      	lsls	r3, r2
 800189c:	68fa      	ldr	r2, [r7, #12]
 800189e:	4313      	orrs	r3, r2
 80018a0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80018a2:	492f      	ldr	r1, [pc, #188]	; (8001960 <HAL_GPIO_Init+0x2bc>)
 80018a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018a6:	089b      	lsrs	r3, r3, #2
 80018a8:	3302      	adds	r3, #2
 80018aa:	68fa      	ldr	r2, [r7, #12]
 80018ac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80018b0:	683b      	ldr	r3, [r7, #0]
 80018b2:	685b      	ldr	r3, [r3, #4]
 80018b4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d006      	beq.n	80018ca <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80018bc:	4b2d      	ldr	r3, [pc, #180]	; (8001974 <HAL_GPIO_Init+0x2d0>)
 80018be:	689a      	ldr	r2, [r3, #8]
 80018c0:	492c      	ldr	r1, [pc, #176]	; (8001974 <HAL_GPIO_Init+0x2d0>)
 80018c2:	69bb      	ldr	r3, [r7, #24]
 80018c4:	4313      	orrs	r3, r2
 80018c6:	608b      	str	r3, [r1, #8]
 80018c8:	e006      	b.n	80018d8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80018ca:	4b2a      	ldr	r3, [pc, #168]	; (8001974 <HAL_GPIO_Init+0x2d0>)
 80018cc:	689a      	ldr	r2, [r3, #8]
 80018ce:	69bb      	ldr	r3, [r7, #24]
 80018d0:	43db      	mvns	r3, r3
 80018d2:	4928      	ldr	r1, [pc, #160]	; (8001974 <HAL_GPIO_Init+0x2d0>)
 80018d4:	4013      	ands	r3, r2
 80018d6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80018d8:	683b      	ldr	r3, [r7, #0]
 80018da:	685b      	ldr	r3, [r3, #4]
 80018dc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d006      	beq.n	80018f2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80018e4:	4b23      	ldr	r3, [pc, #140]	; (8001974 <HAL_GPIO_Init+0x2d0>)
 80018e6:	68da      	ldr	r2, [r3, #12]
 80018e8:	4922      	ldr	r1, [pc, #136]	; (8001974 <HAL_GPIO_Init+0x2d0>)
 80018ea:	69bb      	ldr	r3, [r7, #24]
 80018ec:	4313      	orrs	r3, r2
 80018ee:	60cb      	str	r3, [r1, #12]
 80018f0:	e006      	b.n	8001900 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80018f2:	4b20      	ldr	r3, [pc, #128]	; (8001974 <HAL_GPIO_Init+0x2d0>)
 80018f4:	68da      	ldr	r2, [r3, #12]
 80018f6:	69bb      	ldr	r3, [r7, #24]
 80018f8:	43db      	mvns	r3, r3
 80018fa:	491e      	ldr	r1, [pc, #120]	; (8001974 <HAL_GPIO_Init+0x2d0>)
 80018fc:	4013      	ands	r3, r2
 80018fe:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001900:	683b      	ldr	r3, [r7, #0]
 8001902:	685b      	ldr	r3, [r3, #4]
 8001904:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001908:	2b00      	cmp	r3, #0
 800190a:	d006      	beq.n	800191a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800190c:	4b19      	ldr	r3, [pc, #100]	; (8001974 <HAL_GPIO_Init+0x2d0>)
 800190e:	685a      	ldr	r2, [r3, #4]
 8001910:	4918      	ldr	r1, [pc, #96]	; (8001974 <HAL_GPIO_Init+0x2d0>)
 8001912:	69bb      	ldr	r3, [r7, #24]
 8001914:	4313      	orrs	r3, r2
 8001916:	604b      	str	r3, [r1, #4]
 8001918:	e006      	b.n	8001928 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800191a:	4b16      	ldr	r3, [pc, #88]	; (8001974 <HAL_GPIO_Init+0x2d0>)
 800191c:	685a      	ldr	r2, [r3, #4]
 800191e:	69bb      	ldr	r3, [r7, #24]
 8001920:	43db      	mvns	r3, r3
 8001922:	4914      	ldr	r1, [pc, #80]	; (8001974 <HAL_GPIO_Init+0x2d0>)
 8001924:	4013      	ands	r3, r2
 8001926:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001928:	683b      	ldr	r3, [r7, #0]
 800192a:	685b      	ldr	r3, [r3, #4]
 800192c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001930:	2b00      	cmp	r3, #0
 8001932:	d021      	beq.n	8001978 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001934:	4b0f      	ldr	r3, [pc, #60]	; (8001974 <HAL_GPIO_Init+0x2d0>)
 8001936:	681a      	ldr	r2, [r3, #0]
 8001938:	490e      	ldr	r1, [pc, #56]	; (8001974 <HAL_GPIO_Init+0x2d0>)
 800193a:	69bb      	ldr	r3, [r7, #24]
 800193c:	4313      	orrs	r3, r2
 800193e:	600b      	str	r3, [r1, #0]
 8001940:	e021      	b.n	8001986 <HAL_GPIO_Init+0x2e2>
 8001942:	bf00      	nop
 8001944:	10320000 	.word	0x10320000
 8001948:	10310000 	.word	0x10310000
 800194c:	10220000 	.word	0x10220000
 8001950:	10210000 	.word	0x10210000
 8001954:	10120000 	.word	0x10120000
 8001958:	10110000 	.word	0x10110000
 800195c:	40021000 	.word	0x40021000
 8001960:	40010000 	.word	0x40010000
 8001964:	40010800 	.word	0x40010800
 8001968:	40010c00 	.word	0x40010c00
 800196c:	40011000 	.word	0x40011000
 8001970:	40011400 	.word	0x40011400
 8001974:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001978:	4b0b      	ldr	r3, [pc, #44]	; (80019a8 <HAL_GPIO_Init+0x304>)
 800197a:	681a      	ldr	r2, [r3, #0]
 800197c:	69bb      	ldr	r3, [r7, #24]
 800197e:	43db      	mvns	r3, r3
 8001980:	4909      	ldr	r1, [pc, #36]	; (80019a8 <HAL_GPIO_Init+0x304>)
 8001982:	4013      	ands	r3, r2
 8001984:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001986:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001988:	3301      	adds	r3, #1
 800198a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800198c:	683b      	ldr	r3, [r7, #0]
 800198e:	681a      	ldr	r2, [r3, #0]
 8001990:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001992:	fa22 f303 	lsr.w	r3, r2, r3
 8001996:	2b00      	cmp	r3, #0
 8001998:	f47f ae8e 	bne.w	80016b8 <HAL_GPIO_Init+0x14>
  }
}
 800199c:	bf00      	nop
 800199e:	bf00      	nop
 80019a0:	372c      	adds	r7, #44	; 0x2c
 80019a2:	46bd      	mov	sp, r7
 80019a4:	bc80      	pop	{r7}
 80019a6:	4770      	bx	lr
 80019a8:	40010400 	.word	0x40010400

080019ac <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80019ac:	b480      	push	{r7}
 80019ae:	b085      	sub	sp, #20
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
 80019b4:	460b      	mov	r3, r1
 80019b6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	689a      	ldr	r2, [r3, #8]
 80019bc:	887b      	ldrh	r3, [r7, #2]
 80019be:	4013      	ands	r3, r2
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d002      	beq.n	80019ca <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80019c4:	2301      	movs	r3, #1
 80019c6:	73fb      	strb	r3, [r7, #15]
 80019c8:	e001      	b.n	80019ce <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80019ca:	2300      	movs	r3, #0
 80019cc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80019ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80019d0:	4618      	mov	r0, r3
 80019d2:	3714      	adds	r7, #20
 80019d4:	46bd      	mov	sp, r7
 80019d6:	bc80      	pop	{r7}
 80019d8:	4770      	bx	lr

080019da <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80019da:	b480      	push	{r7}
 80019dc:	b083      	sub	sp, #12
 80019de:	af00      	add	r7, sp, #0
 80019e0:	6078      	str	r0, [r7, #4]
 80019e2:	460b      	mov	r3, r1
 80019e4:	807b      	strh	r3, [r7, #2]
 80019e6:	4613      	mov	r3, r2
 80019e8:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80019ea:	787b      	ldrb	r3, [r7, #1]
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d003      	beq.n	80019f8 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80019f0:	887a      	ldrh	r2, [r7, #2]
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80019f6:	e003      	b.n	8001a00 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80019f8:	887b      	ldrh	r3, [r7, #2]
 80019fa:	041a      	lsls	r2, r3, #16
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	611a      	str	r2, [r3, #16]
}
 8001a00:	bf00      	nop
 8001a02:	370c      	adds	r7, #12
 8001a04:	46bd      	mov	sp, r7
 8001a06:	bc80      	pop	{r7}
 8001a08:	4770      	bx	lr
	...

08001a0c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b086      	sub	sp, #24
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d101      	bne.n	8001a1e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001a1a:	2301      	movs	r3, #1
 8001a1c:	e26c      	b.n	8001ef8 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	f003 0301 	and.w	r3, r3, #1
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	f000 8087 	beq.w	8001b3a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001a2c:	4b92      	ldr	r3, [pc, #584]	; (8001c78 <HAL_RCC_OscConfig+0x26c>)
 8001a2e:	685b      	ldr	r3, [r3, #4]
 8001a30:	f003 030c 	and.w	r3, r3, #12
 8001a34:	2b04      	cmp	r3, #4
 8001a36:	d00c      	beq.n	8001a52 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001a38:	4b8f      	ldr	r3, [pc, #572]	; (8001c78 <HAL_RCC_OscConfig+0x26c>)
 8001a3a:	685b      	ldr	r3, [r3, #4]
 8001a3c:	f003 030c 	and.w	r3, r3, #12
 8001a40:	2b08      	cmp	r3, #8
 8001a42:	d112      	bne.n	8001a6a <HAL_RCC_OscConfig+0x5e>
 8001a44:	4b8c      	ldr	r3, [pc, #560]	; (8001c78 <HAL_RCC_OscConfig+0x26c>)
 8001a46:	685b      	ldr	r3, [r3, #4]
 8001a48:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a4c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a50:	d10b      	bne.n	8001a6a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a52:	4b89      	ldr	r3, [pc, #548]	; (8001c78 <HAL_RCC_OscConfig+0x26c>)
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d06c      	beq.n	8001b38 <HAL_RCC_OscConfig+0x12c>
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	685b      	ldr	r3, [r3, #4]
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d168      	bne.n	8001b38 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001a66:	2301      	movs	r3, #1
 8001a68:	e246      	b.n	8001ef8 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	685b      	ldr	r3, [r3, #4]
 8001a6e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a72:	d106      	bne.n	8001a82 <HAL_RCC_OscConfig+0x76>
 8001a74:	4b80      	ldr	r3, [pc, #512]	; (8001c78 <HAL_RCC_OscConfig+0x26c>)
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	4a7f      	ldr	r2, [pc, #508]	; (8001c78 <HAL_RCC_OscConfig+0x26c>)
 8001a7a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a7e:	6013      	str	r3, [r2, #0]
 8001a80:	e02e      	b.n	8001ae0 <HAL_RCC_OscConfig+0xd4>
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	685b      	ldr	r3, [r3, #4]
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d10c      	bne.n	8001aa4 <HAL_RCC_OscConfig+0x98>
 8001a8a:	4b7b      	ldr	r3, [pc, #492]	; (8001c78 <HAL_RCC_OscConfig+0x26c>)
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	4a7a      	ldr	r2, [pc, #488]	; (8001c78 <HAL_RCC_OscConfig+0x26c>)
 8001a90:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a94:	6013      	str	r3, [r2, #0]
 8001a96:	4b78      	ldr	r3, [pc, #480]	; (8001c78 <HAL_RCC_OscConfig+0x26c>)
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	4a77      	ldr	r2, [pc, #476]	; (8001c78 <HAL_RCC_OscConfig+0x26c>)
 8001a9c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001aa0:	6013      	str	r3, [r2, #0]
 8001aa2:	e01d      	b.n	8001ae0 <HAL_RCC_OscConfig+0xd4>
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	685b      	ldr	r3, [r3, #4]
 8001aa8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001aac:	d10c      	bne.n	8001ac8 <HAL_RCC_OscConfig+0xbc>
 8001aae:	4b72      	ldr	r3, [pc, #456]	; (8001c78 <HAL_RCC_OscConfig+0x26c>)
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	4a71      	ldr	r2, [pc, #452]	; (8001c78 <HAL_RCC_OscConfig+0x26c>)
 8001ab4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ab8:	6013      	str	r3, [r2, #0]
 8001aba:	4b6f      	ldr	r3, [pc, #444]	; (8001c78 <HAL_RCC_OscConfig+0x26c>)
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	4a6e      	ldr	r2, [pc, #440]	; (8001c78 <HAL_RCC_OscConfig+0x26c>)
 8001ac0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ac4:	6013      	str	r3, [r2, #0]
 8001ac6:	e00b      	b.n	8001ae0 <HAL_RCC_OscConfig+0xd4>
 8001ac8:	4b6b      	ldr	r3, [pc, #428]	; (8001c78 <HAL_RCC_OscConfig+0x26c>)
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	4a6a      	ldr	r2, [pc, #424]	; (8001c78 <HAL_RCC_OscConfig+0x26c>)
 8001ace:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ad2:	6013      	str	r3, [r2, #0]
 8001ad4:	4b68      	ldr	r3, [pc, #416]	; (8001c78 <HAL_RCC_OscConfig+0x26c>)
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	4a67      	ldr	r2, [pc, #412]	; (8001c78 <HAL_RCC_OscConfig+0x26c>)
 8001ada:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ade:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	685b      	ldr	r3, [r3, #4]
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d013      	beq.n	8001b10 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ae8:	f7ff fcf2 	bl	80014d0 <HAL_GetTick>
 8001aec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001aee:	e008      	b.n	8001b02 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001af0:	f7ff fcee 	bl	80014d0 <HAL_GetTick>
 8001af4:	4602      	mov	r2, r0
 8001af6:	693b      	ldr	r3, [r7, #16]
 8001af8:	1ad3      	subs	r3, r2, r3
 8001afa:	2b64      	cmp	r3, #100	; 0x64
 8001afc:	d901      	bls.n	8001b02 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001afe:	2303      	movs	r3, #3
 8001b00:	e1fa      	b.n	8001ef8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b02:	4b5d      	ldr	r3, [pc, #372]	; (8001c78 <HAL_RCC_OscConfig+0x26c>)
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d0f0      	beq.n	8001af0 <HAL_RCC_OscConfig+0xe4>
 8001b0e:	e014      	b.n	8001b3a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b10:	f7ff fcde 	bl	80014d0 <HAL_GetTick>
 8001b14:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b16:	e008      	b.n	8001b2a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b18:	f7ff fcda 	bl	80014d0 <HAL_GetTick>
 8001b1c:	4602      	mov	r2, r0
 8001b1e:	693b      	ldr	r3, [r7, #16]
 8001b20:	1ad3      	subs	r3, r2, r3
 8001b22:	2b64      	cmp	r3, #100	; 0x64
 8001b24:	d901      	bls.n	8001b2a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001b26:	2303      	movs	r3, #3
 8001b28:	e1e6      	b.n	8001ef8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b2a:	4b53      	ldr	r3, [pc, #332]	; (8001c78 <HAL_RCC_OscConfig+0x26c>)
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d1f0      	bne.n	8001b18 <HAL_RCC_OscConfig+0x10c>
 8001b36:	e000      	b.n	8001b3a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b38:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	f003 0302 	and.w	r3, r3, #2
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d063      	beq.n	8001c0e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001b46:	4b4c      	ldr	r3, [pc, #304]	; (8001c78 <HAL_RCC_OscConfig+0x26c>)
 8001b48:	685b      	ldr	r3, [r3, #4]
 8001b4a:	f003 030c 	and.w	r3, r3, #12
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d00b      	beq.n	8001b6a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001b52:	4b49      	ldr	r3, [pc, #292]	; (8001c78 <HAL_RCC_OscConfig+0x26c>)
 8001b54:	685b      	ldr	r3, [r3, #4]
 8001b56:	f003 030c 	and.w	r3, r3, #12
 8001b5a:	2b08      	cmp	r3, #8
 8001b5c:	d11c      	bne.n	8001b98 <HAL_RCC_OscConfig+0x18c>
 8001b5e:	4b46      	ldr	r3, [pc, #280]	; (8001c78 <HAL_RCC_OscConfig+0x26c>)
 8001b60:	685b      	ldr	r3, [r3, #4]
 8001b62:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d116      	bne.n	8001b98 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b6a:	4b43      	ldr	r3, [pc, #268]	; (8001c78 <HAL_RCC_OscConfig+0x26c>)
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	f003 0302 	and.w	r3, r3, #2
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d005      	beq.n	8001b82 <HAL_RCC_OscConfig+0x176>
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	691b      	ldr	r3, [r3, #16]
 8001b7a:	2b01      	cmp	r3, #1
 8001b7c:	d001      	beq.n	8001b82 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001b7e:	2301      	movs	r3, #1
 8001b80:	e1ba      	b.n	8001ef8 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b82:	4b3d      	ldr	r3, [pc, #244]	; (8001c78 <HAL_RCC_OscConfig+0x26c>)
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	695b      	ldr	r3, [r3, #20]
 8001b8e:	00db      	lsls	r3, r3, #3
 8001b90:	4939      	ldr	r1, [pc, #228]	; (8001c78 <HAL_RCC_OscConfig+0x26c>)
 8001b92:	4313      	orrs	r3, r2
 8001b94:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b96:	e03a      	b.n	8001c0e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	691b      	ldr	r3, [r3, #16]
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d020      	beq.n	8001be2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001ba0:	4b36      	ldr	r3, [pc, #216]	; (8001c7c <HAL_RCC_OscConfig+0x270>)
 8001ba2:	2201      	movs	r2, #1
 8001ba4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ba6:	f7ff fc93 	bl	80014d0 <HAL_GetTick>
 8001baa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001bac:	e008      	b.n	8001bc0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001bae:	f7ff fc8f 	bl	80014d0 <HAL_GetTick>
 8001bb2:	4602      	mov	r2, r0
 8001bb4:	693b      	ldr	r3, [r7, #16]
 8001bb6:	1ad3      	subs	r3, r2, r3
 8001bb8:	2b02      	cmp	r3, #2
 8001bba:	d901      	bls.n	8001bc0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001bbc:	2303      	movs	r3, #3
 8001bbe:	e19b      	b.n	8001ef8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001bc0:	4b2d      	ldr	r3, [pc, #180]	; (8001c78 <HAL_RCC_OscConfig+0x26c>)
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	f003 0302 	and.w	r3, r3, #2
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d0f0      	beq.n	8001bae <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bcc:	4b2a      	ldr	r3, [pc, #168]	; (8001c78 <HAL_RCC_OscConfig+0x26c>)
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	695b      	ldr	r3, [r3, #20]
 8001bd8:	00db      	lsls	r3, r3, #3
 8001bda:	4927      	ldr	r1, [pc, #156]	; (8001c78 <HAL_RCC_OscConfig+0x26c>)
 8001bdc:	4313      	orrs	r3, r2
 8001bde:	600b      	str	r3, [r1, #0]
 8001be0:	e015      	b.n	8001c0e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001be2:	4b26      	ldr	r3, [pc, #152]	; (8001c7c <HAL_RCC_OscConfig+0x270>)
 8001be4:	2200      	movs	r2, #0
 8001be6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001be8:	f7ff fc72 	bl	80014d0 <HAL_GetTick>
 8001bec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001bee:	e008      	b.n	8001c02 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001bf0:	f7ff fc6e 	bl	80014d0 <HAL_GetTick>
 8001bf4:	4602      	mov	r2, r0
 8001bf6:	693b      	ldr	r3, [r7, #16]
 8001bf8:	1ad3      	subs	r3, r2, r3
 8001bfa:	2b02      	cmp	r3, #2
 8001bfc:	d901      	bls.n	8001c02 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001bfe:	2303      	movs	r3, #3
 8001c00:	e17a      	b.n	8001ef8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c02:	4b1d      	ldr	r3, [pc, #116]	; (8001c78 <HAL_RCC_OscConfig+0x26c>)
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	f003 0302 	and.w	r3, r3, #2
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d1f0      	bne.n	8001bf0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f003 0308 	and.w	r3, r3, #8
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d03a      	beq.n	8001c90 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	699b      	ldr	r3, [r3, #24]
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d019      	beq.n	8001c56 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001c22:	4b17      	ldr	r3, [pc, #92]	; (8001c80 <HAL_RCC_OscConfig+0x274>)
 8001c24:	2201      	movs	r2, #1
 8001c26:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c28:	f7ff fc52 	bl	80014d0 <HAL_GetTick>
 8001c2c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c2e:	e008      	b.n	8001c42 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c30:	f7ff fc4e 	bl	80014d0 <HAL_GetTick>
 8001c34:	4602      	mov	r2, r0
 8001c36:	693b      	ldr	r3, [r7, #16]
 8001c38:	1ad3      	subs	r3, r2, r3
 8001c3a:	2b02      	cmp	r3, #2
 8001c3c:	d901      	bls.n	8001c42 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001c3e:	2303      	movs	r3, #3
 8001c40:	e15a      	b.n	8001ef8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c42:	4b0d      	ldr	r3, [pc, #52]	; (8001c78 <HAL_RCC_OscConfig+0x26c>)
 8001c44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c46:	f003 0302 	and.w	r3, r3, #2
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d0f0      	beq.n	8001c30 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001c4e:	2001      	movs	r0, #1
 8001c50:	f000 fafc 	bl	800224c <RCC_Delay>
 8001c54:	e01c      	b.n	8001c90 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001c56:	4b0a      	ldr	r3, [pc, #40]	; (8001c80 <HAL_RCC_OscConfig+0x274>)
 8001c58:	2200      	movs	r2, #0
 8001c5a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c5c:	f7ff fc38 	bl	80014d0 <HAL_GetTick>
 8001c60:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c62:	e00f      	b.n	8001c84 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c64:	f7ff fc34 	bl	80014d0 <HAL_GetTick>
 8001c68:	4602      	mov	r2, r0
 8001c6a:	693b      	ldr	r3, [r7, #16]
 8001c6c:	1ad3      	subs	r3, r2, r3
 8001c6e:	2b02      	cmp	r3, #2
 8001c70:	d908      	bls.n	8001c84 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001c72:	2303      	movs	r3, #3
 8001c74:	e140      	b.n	8001ef8 <HAL_RCC_OscConfig+0x4ec>
 8001c76:	bf00      	nop
 8001c78:	40021000 	.word	0x40021000
 8001c7c:	42420000 	.word	0x42420000
 8001c80:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c84:	4b9e      	ldr	r3, [pc, #632]	; (8001f00 <HAL_RCC_OscConfig+0x4f4>)
 8001c86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c88:	f003 0302 	and.w	r3, r3, #2
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d1e9      	bne.n	8001c64 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	f003 0304 	and.w	r3, r3, #4
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	f000 80a6 	beq.w	8001dea <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001ca2:	4b97      	ldr	r3, [pc, #604]	; (8001f00 <HAL_RCC_OscConfig+0x4f4>)
 8001ca4:	69db      	ldr	r3, [r3, #28]
 8001ca6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d10d      	bne.n	8001cca <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001cae:	4b94      	ldr	r3, [pc, #592]	; (8001f00 <HAL_RCC_OscConfig+0x4f4>)
 8001cb0:	69db      	ldr	r3, [r3, #28]
 8001cb2:	4a93      	ldr	r2, [pc, #588]	; (8001f00 <HAL_RCC_OscConfig+0x4f4>)
 8001cb4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001cb8:	61d3      	str	r3, [r2, #28]
 8001cba:	4b91      	ldr	r3, [pc, #580]	; (8001f00 <HAL_RCC_OscConfig+0x4f4>)
 8001cbc:	69db      	ldr	r3, [r3, #28]
 8001cbe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cc2:	60bb      	str	r3, [r7, #8]
 8001cc4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001cc6:	2301      	movs	r3, #1
 8001cc8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cca:	4b8e      	ldr	r3, [pc, #568]	; (8001f04 <HAL_RCC_OscConfig+0x4f8>)
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d118      	bne.n	8001d08 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001cd6:	4b8b      	ldr	r3, [pc, #556]	; (8001f04 <HAL_RCC_OscConfig+0x4f8>)
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	4a8a      	ldr	r2, [pc, #552]	; (8001f04 <HAL_RCC_OscConfig+0x4f8>)
 8001cdc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ce0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001ce2:	f7ff fbf5 	bl	80014d0 <HAL_GetTick>
 8001ce6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ce8:	e008      	b.n	8001cfc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001cea:	f7ff fbf1 	bl	80014d0 <HAL_GetTick>
 8001cee:	4602      	mov	r2, r0
 8001cf0:	693b      	ldr	r3, [r7, #16]
 8001cf2:	1ad3      	subs	r3, r2, r3
 8001cf4:	2b64      	cmp	r3, #100	; 0x64
 8001cf6:	d901      	bls.n	8001cfc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001cf8:	2303      	movs	r3, #3
 8001cfa:	e0fd      	b.n	8001ef8 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cfc:	4b81      	ldr	r3, [pc, #516]	; (8001f04 <HAL_RCC_OscConfig+0x4f8>)
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d0f0      	beq.n	8001cea <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	68db      	ldr	r3, [r3, #12]
 8001d0c:	2b01      	cmp	r3, #1
 8001d0e:	d106      	bne.n	8001d1e <HAL_RCC_OscConfig+0x312>
 8001d10:	4b7b      	ldr	r3, [pc, #492]	; (8001f00 <HAL_RCC_OscConfig+0x4f4>)
 8001d12:	6a1b      	ldr	r3, [r3, #32]
 8001d14:	4a7a      	ldr	r2, [pc, #488]	; (8001f00 <HAL_RCC_OscConfig+0x4f4>)
 8001d16:	f043 0301 	orr.w	r3, r3, #1
 8001d1a:	6213      	str	r3, [r2, #32]
 8001d1c:	e02d      	b.n	8001d7a <HAL_RCC_OscConfig+0x36e>
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	68db      	ldr	r3, [r3, #12]
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d10c      	bne.n	8001d40 <HAL_RCC_OscConfig+0x334>
 8001d26:	4b76      	ldr	r3, [pc, #472]	; (8001f00 <HAL_RCC_OscConfig+0x4f4>)
 8001d28:	6a1b      	ldr	r3, [r3, #32]
 8001d2a:	4a75      	ldr	r2, [pc, #468]	; (8001f00 <HAL_RCC_OscConfig+0x4f4>)
 8001d2c:	f023 0301 	bic.w	r3, r3, #1
 8001d30:	6213      	str	r3, [r2, #32]
 8001d32:	4b73      	ldr	r3, [pc, #460]	; (8001f00 <HAL_RCC_OscConfig+0x4f4>)
 8001d34:	6a1b      	ldr	r3, [r3, #32]
 8001d36:	4a72      	ldr	r2, [pc, #456]	; (8001f00 <HAL_RCC_OscConfig+0x4f4>)
 8001d38:	f023 0304 	bic.w	r3, r3, #4
 8001d3c:	6213      	str	r3, [r2, #32]
 8001d3e:	e01c      	b.n	8001d7a <HAL_RCC_OscConfig+0x36e>
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	68db      	ldr	r3, [r3, #12]
 8001d44:	2b05      	cmp	r3, #5
 8001d46:	d10c      	bne.n	8001d62 <HAL_RCC_OscConfig+0x356>
 8001d48:	4b6d      	ldr	r3, [pc, #436]	; (8001f00 <HAL_RCC_OscConfig+0x4f4>)
 8001d4a:	6a1b      	ldr	r3, [r3, #32]
 8001d4c:	4a6c      	ldr	r2, [pc, #432]	; (8001f00 <HAL_RCC_OscConfig+0x4f4>)
 8001d4e:	f043 0304 	orr.w	r3, r3, #4
 8001d52:	6213      	str	r3, [r2, #32]
 8001d54:	4b6a      	ldr	r3, [pc, #424]	; (8001f00 <HAL_RCC_OscConfig+0x4f4>)
 8001d56:	6a1b      	ldr	r3, [r3, #32]
 8001d58:	4a69      	ldr	r2, [pc, #420]	; (8001f00 <HAL_RCC_OscConfig+0x4f4>)
 8001d5a:	f043 0301 	orr.w	r3, r3, #1
 8001d5e:	6213      	str	r3, [r2, #32]
 8001d60:	e00b      	b.n	8001d7a <HAL_RCC_OscConfig+0x36e>
 8001d62:	4b67      	ldr	r3, [pc, #412]	; (8001f00 <HAL_RCC_OscConfig+0x4f4>)
 8001d64:	6a1b      	ldr	r3, [r3, #32]
 8001d66:	4a66      	ldr	r2, [pc, #408]	; (8001f00 <HAL_RCC_OscConfig+0x4f4>)
 8001d68:	f023 0301 	bic.w	r3, r3, #1
 8001d6c:	6213      	str	r3, [r2, #32]
 8001d6e:	4b64      	ldr	r3, [pc, #400]	; (8001f00 <HAL_RCC_OscConfig+0x4f4>)
 8001d70:	6a1b      	ldr	r3, [r3, #32]
 8001d72:	4a63      	ldr	r2, [pc, #396]	; (8001f00 <HAL_RCC_OscConfig+0x4f4>)
 8001d74:	f023 0304 	bic.w	r3, r3, #4
 8001d78:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	68db      	ldr	r3, [r3, #12]
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d015      	beq.n	8001dae <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d82:	f7ff fba5 	bl	80014d0 <HAL_GetTick>
 8001d86:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d88:	e00a      	b.n	8001da0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d8a:	f7ff fba1 	bl	80014d0 <HAL_GetTick>
 8001d8e:	4602      	mov	r2, r0
 8001d90:	693b      	ldr	r3, [r7, #16]
 8001d92:	1ad3      	subs	r3, r2, r3
 8001d94:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d98:	4293      	cmp	r3, r2
 8001d9a:	d901      	bls.n	8001da0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001d9c:	2303      	movs	r3, #3
 8001d9e:	e0ab      	b.n	8001ef8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001da0:	4b57      	ldr	r3, [pc, #348]	; (8001f00 <HAL_RCC_OscConfig+0x4f4>)
 8001da2:	6a1b      	ldr	r3, [r3, #32]
 8001da4:	f003 0302 	and.w	r3, r3, #2
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d0ee      	beq.n	8001d8a <HAL_RCC_OscConfig+0x37e>
 8001dac:	e014      	b.n	8001dd8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001dae:	f7ff fb8f 	bl	80014d0 <HAL_GetTick>
 8001db2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001db4:	e00a      	b.n	8001dcc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001db6:	f7ff fb8b 	bl	80014d0 <HAL_GetTick>
 8001dba:	4602      	mov	r2, r0
 8001dbc:	693b      	ldr	r3, [r7, #16]
 8001dbe:	1ad3      	subs	r3, r2, r3
 8001dc0:	f241 3288 	movw	r2, #5000	; 0x1388
 8001dc4:	4293      	cmp	r3, r2
 8001dc6:	d901      	bls.n	8001dcc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001dc8:	2303      	movs	r3, #3
 8001dca:	e095      	b.n	8001ef8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001dcc:	4b4c      	ldr	r3, [pc, #304]	; (8001f00 <HAL_RCC_OscConfig+0x4f4>)
 8001dce:	6a1b      	ldr	r3, [r3, #32]
 8001dd0:	f003 0302 	and.w	r3, r3, #2
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d1ee      	bne.n	8001db6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001dd8:	7dfb      	ldrb	r3, [r7, #23]
 8001dda:	2b01      	cmp	r3, #1
 8001ddc:	d105      	bne.n	8001dea <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001dde:	4b48      	ldr	r3, [pc, #288]	; (8001f00 <HAL_RCC_OscConfig+0x4f4>)
 8001de0:	69db      	ldr	r3, [r3, #28]
 8001de2:	4a47      	ldr	r2, [pc, #284]	; (8001f00 <HAL_RCC_OscConfig+0x4f4>)
 8001de4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001de8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	69db      	ldr	r3, [r3, #28]
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	f000 8081 	beq.w	8001ef6 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001df4:	4b42      	ldr	r3, [pc, #264]	; (8001f00 <HAL_RCC_OscConfig+0x4f4>)
 8001df6:	685b      	ldr	r3, [r3, #4]
 8001df8:	f003 030c 	and.w	r3, r3, #12
 8001dfc:	2b08      	cmp	r3, #8
 8001dfe:	d061      	beq.n	8001ec4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	69db      	ldr	r3, [r3, #28]
 8001e04:	2b02      	cmp	r3, #2
 8001e06:	d146      	bne.n	8001e96 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e08:	4b3f      	ldr	r3, [pc, #252]	; (8001f08 <HAL_RCC_OscConfig+0x4fc>)
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e0e:	f7ff fb5f 	bl	80014d0 <HAL_GetTick>
 8001e12:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e14:	e008      	b.n	8001e28 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e16:	f7ff fb5b 	bl	80014d0 <HAL_GetTick>
 8001e1a:	4602      	mov	r2, r0
 8001e1c:	693b      	ldr	r3, [r7, #16]
 8001e1e:	1ad3      	subs	r3, r2, r3
 8001e20:	2b02      	cmp	r3, #2
 8001e22:	d901      	bls.n	8001e28 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001e24:	2303      	movs	r3, #3
 8001e26:	e067      	b.n	8001ef8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e28:	4b35      	ldr	r3, [pc, #212]	; (8001f00 <HAL_RCC_OscConfig+0x4f4>)
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d1f0      	bne.n	8001e16 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	6a1b      	ldr	r3, [r3, #32]
 8001e38:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e3c:	d108      	bne.n	8001e50 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001e3e:	4b30      	ldr	r3, [pc, #192]	; (8001f00 <HAL_RCC_OscConfig+0x4f4>)
 8001e40:	685b      	ldr	r3, [r3, #4]
 8001e42:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	689b      	ldr	r3, [r3, #8]
 8001e4a:	492d      	ldr	r1, [pc, #180]	; (8001f00 <HAL_RCC_OscConfig+0x4f4>)
 8001e4c:	4313      	orrs	r3, r2
 8001e4e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001e50:	4b2b      	ldr	r3, [pc, #172]	; (8001f00 <HAL_RCC_OscConfig+0x4f4>)
 8001e52:	685b      	ldr	r3, [r3, #4]
 8001e54:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	6a19      	ldr	r1, [r3, #32]
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e60:	430b      	orrs	r3, r1
 8001e62:	4927      	ldr	r1, [pc, #156]	; (8001f00 <HAL_RCC_OscConfig+0x4f4>)
 8001e64:	4313      	orrs	r3, r2
 8001e66:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001e68:	4b27      	ldr	r3, [pc, #156]	; (8001f08 <HAL_RCC_OscConfig+0x4fc>)
 8001e6a:	2201      	movs	r2, #1
 8001e6c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e6e:	f7ff fb2f 	bl	80014d0 <HAL_GetTick>
 8001e72:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001e74:	e008      	b.n	8001e88 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e76:	f7ff fb2b 	bl	80014d0 <HAL_GetTick>
 8001e7a:	4602      	mov	r2, r0
 8001e7c:	693b      	ldr	r3, [r7, #16]
 8001e7e:	1ad3      	subs	r3, r2, r3
 8001e80:	2b02      	cmp	r3, #2
 8001e82:	d901      	bls.n	8001e88 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001e84:	2303      	movs	r3, #3
 8001e86:	e037      	b.n	8001ef8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001e88:	4b1d      	ldr	r3, [pc, #116]	; (8001f00 <HAL_RCC_OscConfig+0x4f4>)
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d0f0      	beq.n	8001e76 <HAL_RCC_OscConfig+0x46a>
 8001e94:	e02f      	b.n	8001ef6 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e96:	4b1c      	ldr	r3, [pc, #112]	; (8001f08 <HAL_RCC_OscConfig+0x4fc>)
 8001e98:	2200      	movs	r2, #0
 8001e9a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e9c:	f7ff fb18 	bl	80014d0 <HAL_GetTick>
 8001ea0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ea2:	e008      	b.n	8001eb6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ea4:	f7ff fb14 	bl	80014d0 <HAL_GetTick>
 8001ea8:	4602      	mov	r2, r0
 8001eaa:	693b      	ldr	r3, [r7, #16]
 8001eac:	1ad3      	subs	r3, r2, r3
 8001eae:	2b02      	cmp	r3, #2
 8001eb0:	d901      	bls.n	8001eb6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001eb2:	2303      	movs	r3, #3
 8001eb4:	e020      	b.n	8001ef8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001eb6:	4b12      	ldr	r3, [pc, #72]	; (8001f00 <HAL_RCC_OscConfig+0x4f4>)
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d1f0      	bne.n	8001ea4 <HAL_RCC_OscConfig+0x498>
 8001ec2:	e018      	b.n	8001ef6 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	69db      	ldr	r3, [r3, #28]
 8001ec8:	2b01      	cmp	r3, #1
 8001eca:	d101      	bne.n	8001ed0 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001ecc:	2301      	movs	r3, #1
 8001ece:	e013      	b.n	8001ef8 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001ed0:	4b0b      	ldr	r3, [pc, #44]	; (8001f00 <HAL_RCC_OscConfig+0x4f4>)
 8001ed2:	685b      	ldr	r3, [r3, #4]
 8001ed4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	6a1b      	ldr	r3, [r3, #32]
 8001ee0:	429a      	cmp	r2, r3
 8001ee2:	d106      	bne.n	8001ef2 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001eee:	429a      	cmp	r2, r3
 8001ef0:	d001      	beq.n	8001ef6 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001ef2:	2301      	movs	r3, #1
 8001ef4:	e000      	b.n	8001ef8 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001ef6:	2300      	movs	r3, #0
}
 8001ef8:	4618      	mov	r0, r3
 8001efa:	3718      	adds	r7, #24
 8001efc:	46bd      	mov	sp, r7
 8001efe:	bd80      	pop	{r7, pc}
 8001f00:	40021000 	.word	0x40021000
 8001f04:	40007000 	.word	0x40007000
 8001f08:	42420060 	.word	0x42420060

08001f0c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	b084      	sub	sp, #16
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
 8001f14:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d101      	bne.n	8001f20 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001f1c:	2301      	movs	r3, #1
 8001f1e:	e0d0      	b.n	80020c2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001f20:	4b6a      	ldr	r3, [pc, #424]	; (80020cc <HAL_RCC_ClockConfig+0x1c0>)
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	f003 0307 	and.w	r3, r3, #7
 8001f28:	683a      	ldr	r2, [r7, #0]
 8001f2a:	429a      	cmp	r2, r3
 8001f2c:	d910      	bls.n	8001f50 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f2e:	4b67      	ldr	r3, [pc, #412]	; (80020cc <HAL_RCC_ClockConfig+0x1c0>)
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	f023 0207 	bic.w	r2, r3, #7
 8001f36:	4965      	ldr	r1, [pc, #404]	; (80020cc <HAL_RCC_ClockConfig+0x1c0>)
 8001f38:	683b      	ldr	r3, [r7, #0]
 8001f3a:	4313      	orrs	r3, r2
 8001f3c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f3e:	4b63      	ldr	r3, [pc, #396]	; (80020cc <HAL_RCC_ClockConfig+0x1c0>)
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f003 0307 	and.w	r3, r3, #7
 8001f46:	683a      	ldr	r2, [r7, #0]
 8001f48:	429a      	cmp	r2, r3
 8001f4a:	d001      	beq.n	8001f50 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001f4c:	2301      	movs	r3, #1
 8001f4e:	e0b8      	b.n	80020c2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	f003 0302 	and.w	r3, r3, #2
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d020      	beq.n	8001f9e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	f003 0304 	and.w	r3, r3, #4
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d005      	beq.n	8001f74 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001f68:	4b59      	ldr	r3, [pc, #356]	; (80020d0 <HAL_RCC_ClockConfig+0x1c4>)
 8001f6a:	685b      	ldr	r3, [r3, #4]
 8001f6c:	4a58      	ldr	r2, [pc, #352]	; (80020d0 <HAL_RCC_ClockConfig+0x1c4>)
 8001f6e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001f72:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	f003 0308 	and.w	r3, r3, #8
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d005      	beq.n	8001f8c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001f80:	4b53      	ldr	r3, [pc, #332]	; (80020d0 <HAL_RCC_ClockConfig+0x1c4>)
 8001f82:	685b      	ldr	r3, [r3, #4]
 8001f84:	4a52      	ldr	r2, [pc, #328]	; (80020d0 <HAL_RCC_ClockConfig+0x1c4>)
 8001f86:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001f8a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f8c:	4b50      	ldr	r3, [pc, #320]	; (80020d0 <HAL_RCC_ClockConfig+0x1c4>)
 8001f8e:	685b      	ldr	r3, [r3, #4]
 8001f90:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	689b      	ldr	r3, [r3, #8]
 8001f98:	494d      	ldr	r1, [pc, #308]	; (80020d0 <HAL_RCC_ClockConfig+0x1c4>)
 8001f9a:	4313      	orrs	r3, r2
 8001f9c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f003 0301 	and.w	r3, r3, #1
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d040      	beq.n	800202c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	685b      	ldr	r3, [r3, #4]
 8001fae:	2b01      	cmp	r3, #1
 8001fb0:	d107      	bne.n	8001fc2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fb2:	4b47      	ldr	r3, [pc, #284]	; (80020d0 <HAL_RCC_ClockConfig+0x1c4>)
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d115      	bne.n	8001fea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001fbe:	2301      	movs	r3, #1
 8001fc0:	e07f      	b.n	80020c2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	685b      	ldr	r3, [r3, #4]
 8001fc6:	2b02      	cmp	r3, #2
 8001fc8:	d107      	bne.n	8001fda <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001fca:	4b41      	ldr	r3, [pc, #260]	; (80020d0 <HAL_RCC_ClockConfig+0x1c4>)
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d109      	bne.n	8001fea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001fd6:	2301      	movs	r3, #1
 8001fd8:	e073      	b.n	80020c2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fda:	4b3d      	ldr	r3, [pc, #244]	; (80020d0 <HAL_RCC_ClockConfig+0x1c4>)
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f003 0302 	and.w	r3, r3, #2
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d101      	bne.n	8001fea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001fe6:	2301      	movs	r3, #1
 8001fe8:	e06b      	b.n	80020c2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001fea:	4b39      	ldr	r3, [pc, #228]	; (80020d0 <HAL_RCC_ClockConfig+0x1c4>)
 8001fec:	685b      	ldr	r3, [r3, #4]
 8001fee:	f023 0203 	bic.w	r2, r3, #3
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	685b      	ldr	r3, [r3, #4]
 8001ff6:	4936      	ldr	r1, [pc, #216]	; (80020d0 <HAL_RCC_ClockConfig+0x1c4>)
 8001ff8:	4313      	orrs	r3, r2
 8001ffa:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001ffc:	f7ff fa68 	bl	80014d0 <HAL_GetTick>
 8002000:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002002:	e00a      	b.n	800201a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002004:	f7ff fa64 	bl	80014d0 <HAL_GetTick>
 8002008:	4602      	mov	r2, r0
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	1ad3      	subs	r3, r2, r3
 800200e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002012:	4293      	cmp	r3, r2
 8002014:	d901      	bls.n	800201a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002016:	2303      	movs	r3, #3
 8002018:	e053      	b.n	80020c2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800201a:	4b2d      	ldr	r3, [pc, #180]	; (80020d0 <HAL_RCC_ClockConfig+0x1c4>)
 800201c:	685b      	ldr	r3, [r3, #4]
 800201e:	f003 020c 	and.w	r2, r3, #12
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	685b      	ldr	r3, [r3, #4]
 8002026:	009b      	lsls	r3, r3, #2
 8002028:	429a      	cmp	r2, r3
 800202a:	d1eb      	bne.n	8002004 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800202c:	4b27      	ldr	r3, [pc, #156]	; (80020cc <HAL_RCC_ClockConfig+0x1c0>)
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f003 0307 	and.w	r3, r3, #7
 8002034:	683a      	ldr	r2, [r7, #0]
 8002036:	429a      	cmp	r2, r3
 8002038:	d210      	bcs.n	800205c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800203a:	4b24      	ldr	r3, [pc, #144]	; (80020cc <HAL_RCC_ClockConfig+0x1c0>)
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f023 0207 	bic.w	r2, r3, #7
 8002042:	4922      	ldr	r1, [pc, #136]	; (80020cc <HAL_RCC_ClockConfig+0x1c0>)
 8002044:	683b      	ldr	r3, [r7, #0]
 8002046:	4313      	orrs	r3, r2
 8002048:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800204a:	4b20      	ldr	r3, [pc, #128]	; (80020cc <HAL_RCC_ClockConfig+0x1c0>)
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f003 0307 	and.w	r3, r3, #7
 8002052:	683a      	ldr	r2, [r7, #0]
 8002054:	429a      	cmp	r2, r3
 8002056:	d001      	beq.n	800205c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002058:	2301      	movs	r3, #1
 800205a:	e032      	b.n	80020c2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f003 0304 	and.w	r3, r3, #4
 8002064:	2b00      	cmp	r3, #0
 8002066:	d008      	beq.n	800207a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002068:	4b19      	ldr	r3, [pc, #100]	; (80020d0 <HAL_RCC_ClockConfig+0x1c4>)
 800206a:	685b      	ldr	r3, [r3, #4]
 800206c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	68db      	ldr	r3, [r3, #12]
 8002074:	4916      	ldr	r1, [pc, #88]	; (80020d0 <HAL_RCC_ClockConfig+0x1c4>)
 8002076:	4313      	orrs	r3, r2
 8002078:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f003 0308 	and.w	r3, r3, #8
 8002082:	2b00      	cmp	r3, #0
 8002084:	d009      	beq.n	800209a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002086:	4b12      	ldr	r3, [pc, #72]	; (80020d0 <HAL_RCC_ClockConfig+0x1c4>)
 8002088:	685b      	ldr	r3, [r3, #4]
 800208a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	691b      	ldr	r3, [r3, #16]
 8002092:	00db      	lsls	r3, r3, #3
 8002094:	490e      	ldr	r1, [pc, #56]	; (80020d0 <HAL_RCC_ClockConfig+0x1c4>)
 8002096:	4313      	orrs	r3, r2
 8002098:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800209a:	f000 f821 	bl	80020e0 <HAL_RCC_GetSysClockFreq>
 800209e:	4602      	mov	r2, r0
 80020a0:	4b0b      	ldr	r3, [pc, #44]	; (80020d0 <HAL_RCC_ClockConfig+0x1c4>)
 80020a2:	685b      	ldr	r3, [r3, #4]
 80020a4:	091b      	lsrs	r3, r3, #4
 80020a6:	f003 030f 	and.w	r3, r3, #15
 80020aa:	490a      	ldr	r1, [pc, #40]	; (80020d4 <HAL_RCC_ClockConfig+0x1c8>)
 80020ac:	5ccb      	ldrb	r3, [r1, r3]
 80020ae:	fa22 f303 	lsr.w	r3, r2, r3
 80020b2:	4a09      	ldr	r2, [pc, #36]	; (80020d8 <HAL_RCC_ClockConfig+0x1cc>)
 80020b4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80020b6:	4b09      	ldr	r3, [pc, #36]	; (80020dc <HAL_RCC_ClockConfig+0x1d0>)
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	4618      	mov	r0, r3
 80020bc:	f7ff f882 	bl	80011c4 <HAL_InitTick>

  return HAL_OK;
 80020c0:	2300      	movs	r3, #0
}
 80020c2:	4618      	mov	r0, r3
 80020c4:	3710      	adds	r7, #16
 80020c6:	46bd      	mov	sp, r7
 80020c8:	bd80      	pop	{r7, pc}
 80020ca:	bf00      	nop
 80020cc:	40022000 	.word	0x40022000
 80020d0:	40021000 	.word	0x40021000
 80020d4:	080042fc 	.word	0x080042fc
 80020d8:	20000074 	.word	0x20000074
 80020dc:	20000078 	.word	0x20000078

080020e0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80020e0:	b480      	push	{r7}
 80020e2:	b087      	sub	sp, #28
 80020e4:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80020e6:	2300      	movs	r3, #0
 80020e8:	60fb      	str	r3, [r7, #12]
 80020ea:	2300      	movs	r3, #0
 80020ec:	60bb      	str	r3, [r7, #8]
 80020ee:	2300      	movs	r3, #0
 80020f0:	617b      	str	r3, [r7, #20]
 80020f2:	2300      	movs	r3, #0
 80020f4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80020f6:	2300      	movs	r3, #0
 80020f8:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80020fa:	4b1e      	ldr	r3, [pc, #120]	; (8002174 <HAL_RCC_GetSysClockFreq+0x94>)
 80020fc:	685b      	ldr	r3, [r3, #4]
 80020fe:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	f003 030c 	and.w	r3, r3, #12
 8002106:	2b04      	cmp	r3, #4
 8002108:	d002      	beq.n	8002110 <HAL_RCC_GetSysClockFreq+0x30>
 800210a:	2b08      	cmp	r3, #8
 800210c:	d003      	beq.n	8002116 <HAL_RCC_GetSysClockFreq+0x36>
 800210e:	e027      	b.n	8002160 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002110:	4b19      	ldr	r3, [pc, #100]	; (8002178 <HAL_RCC_GetSysClockFreq+0x98>)
 8002112:	613b      	str	r3, [r7, #16]
      break;
 8002114:	e027      	b.n	8002166 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	0c9b      	lsrs	r3, r3, #18
 800211a:	f003 030f 	and.w	r3, r3, #15
 800211e:	4a17      	ldr	r2, [pc, #92]	; (800217c <HAL_RCC_GetSysClockFreq+0x9c>)
 8002120:	5cd3      	ldrb	r3, [r2, r3]
 8002122:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800212a:	2b00      	cmp	r3, #0
 800212c:	d010      	beq.n	8002150 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800212e:	4b11      	ldr	r3, [pc, #68]	; (8002174 <HAL_RCC_GetSysClockFreq+0x94>)
 8002130:	685b      	ldr	r3, [r3, #4]
 8002132:	0c5b      	lsrs	r3, r3, #17
 8002134:	f003 0301 	and.w	r3, r3, #1
 8002138:	4a11      	ldr	r2, [pc, #68]	; (8002180 <HAL_RCC_GetSysClockFreq+0xa0>)
 800213a:	5cd3      	ldrb	r3, [r2, r3]
 800213c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	4a0d      	ldr	r2, [pc, #52]	; (8002178 <HAL_RCC_GetSysClockFreq+0x98>)
 8002142:	fb02 f203 	mul.w	r2, r2, r3
 8002146:	68bb      	ldr	r3, [r7, #8]
 8002148:	fbb2 f3f3 	udiv	r3, r2, r3
 800214c:	617b      	str	r3, [r7, #20]
 800214e:	e004      	b.n	800215a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	4a0c      	ldr	r2, [pc, #48]	; (8002184 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002154:	fb02 f303 	mul.w	r3, r2, r3
 8002158:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800215a:	697b      	ldr	r3, [r7, #20]
 800215c:	613b      	str	r3, [r7, #16]
      break;
 800215e:	e002      	b.n	8002166 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002160:	4b05      	ldr	r3, [pc, #20]	; (8002178 <HAL_RCC_GetSysClockFreq+0x98>)
 8002162:	613b      	str	r3, [r7, #16]
      break;
 8002164:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002166:	693b      	ldr	r3, [r7, #16]
}
 8002168:	4618      	mov	r0, r3
 800216a:	371c      	adds	r7, #28
 800216c:	46bd      	mov	sp, r7
 800216e:	bc80      	pop	{r7}
 8002170:	4770      	bx	lr
 8002172:	bf00      	nop
 8002174:	40021000 	.word	0x40021000
 8002178:	007a1200 	.word	0x007a1200
 800217c:	08004314 	.word	0x08004314
 8002180:	08004324 	.word	0x08004324
 8002184:	003d0900 	.word	0x003d0900

08002188 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002188:	b480      	push	{r7}
 800218a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800218c:	4b02      	ldr	r3, [pc, #8]	; (8002198 <HAL_RCC_GetHCLKFreq+0x10>)
 800218e:	681b      	ldr	r3, [r3, #0]
}
 8002190:	4618      	mov	r0, r3
 8002192:	46bd      	mov	sp, r7
 8002194:	bc80      	pop	{r7}
 8002196:	4770      	bx	lr
 8002198:	20000074 	.word	0x20000074

0800219c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800219c:	b580      	push	{r7, lr}
 800219e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80021a0:	f7ff fff2 	bl	8002188 <HAL_RCC_GetHCLKFreq>
 80021a4:	4602      	mov	r2, r0
 80021a6:	4b05      	ldr	r3, [pc, #20]	; (80021bc <HAL_RCC_GetPCLK1Freq+0x20>)
 80021a8:	685b      	ldr	r3, [r3, #4]
 80021aa:	0a1b      	lsrs	r3, r3, #8
 80021ac:	f003 0307 	and.w	r3, r3, #7
 80021b0:	4903      	ldr	r1, [pc, #12]	; (80021c0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80021b2:	5ccb      	ldrb	r3, [r1, r3]
 80021b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80021b8:	4618      	mov	r0, r3
 80021ba:	bd80      	pop	{r7, pc}
 80021bc:	40021000 	.word	0x40021000
 80021c0:	0800430c 	.word	0x0800430c

080021c4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80021c8:	f7ff ffde 	bl	8002188 <HAL_RCC_GetHCLKFreq>
 80021cc:	4602      	mov	r2, r0
 80021ce:	4b05      	ldr	r3, [pc, #20]	; (80021e4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80021d0:	685b      	ldr	r3, [r3, #4]
 80021d2:	0adb      	lsrs	r3, r3, #11
 80021d4:	f003 0307 	and.w	r3, r3, #7
 80021d8:	4903      	ldr	r1, [pc, #12]	; (80021e8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80021da:	5ccb      	ldrb	r3, [r1, r3]
 80021dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80021e0:	4618      	mov	r0, r3
 80021e2:	bd80      	pop	{r7, pc}
 80021e4:	40021000 	.word	0x40021000
 80021e8:	0800430c 	.word	0x0800430c

080021ec <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80021ec:	b480      	push	{r7}
 80021ee:	b083      	sub	sp, #12
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	6078      	str	r0, [r7, #4]
 80021f4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	220f      	movs	r2, #15
 80021fa:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80021fc:	4b11      	ldr	r3, [pc, #68]	; (8002244 <HAL_RCC_GetClockConfig+0x58>)
 80021fe:	685b      	ldr	r3, [r3, #4]
 8002200:	f003 0203 	and.w	r2, r3, #3
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002208:	4b0e      	ldr	r3, [pc, #56]	; (8002244 <HAL_RCC_GetClockConfig+0x58>)
 800220a:	685b      	ldr	r3, [r3, #4]
 800220c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002214:	4b0b      	ldr	r3, [pc, #44]	; (8002244 <HAL_RCC_GetClockConfig+0x58>)
 8002216:	685b      	ldr	r3, [r3, #4]
 8002218:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8002220:	4b08      	ldr	r3, [pc, #32]	; (8002244 <HAL_RCC_GetClockConfig+0x58>)
 8002222:	685b      	ldr	r3, [r3, #4]
 8002224:	08db      	lsrs	r3, r3, #3
 8002226:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800222e:	4b06      	ldr	r3, [pc, #24]	; (8002248 <HAL_RCC_GetClockConfig+0x5c>)
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f003 0207 	and.w	r2, r3, #7
 8002236:	683b      	ldr	r3, [r7, #0]
 8002238:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 800223a:	bf00      	nop
 800223c:	370c      	adds	r7, #12
 800223e:	46bd      	mov	sp, r7
 8002240:	bc80      	pop	{r7}
 8002242:	4770      	bx	lr
 8002244:	40021000 	.word	0x40021000
 8002248:	40022000 	.word	0x40022000

0800224c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800224c:	b480      	push	{r7}
 800224e:	b085      	sub	sp, #20
 8002250:	af00      	add	r7, sp, #0
 8002252:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002254:	4b0a      	ldr	r3, [pc, #40]	; (8002280 <RCC_Delay+0x34>)
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	4a0a      	ldr	r2, [pc, #40]	; (8002284 <RCC_Delay+0x38>)
 800225a:	fba2 2303 	umull	r2, r3, r2, r3
 800225e:	0a5b      	lsrs	r3, r3, #9
 8002260:	687a      	ldr	r2, [r7, #4]
 8002262:	fb02 f303 	mul.w	r3, r2, r3
 8002266:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002268:	bf00      	nop
  }
  while (Delay --);
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	1e5a      	subs	r2, r3, #1
 800226e:	60fa      	str	r2, [r7, #12]
 8002270:	2b00      	cmp	r3, #0
 8002272:	d1f9      	bne.n	8002268 <RCC_Delay+0x1c>
}
 8002274:	bf00      	nop
 8002276:	bf00      	nop
 8002278:	3714      	adds	r7, #20
 800227a:	46bd      	mov	sp, r7
 800227c:	bc80      	pop	{r7}
 800227e:	4770      	bx	lr
 8002280:	20000074 	.word	0x20000074
 8002284:	10624dd3 	.word	0x10624dd3

08002288 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002288:	b580      	push	{r7, lr}
 800228a:	b082      	sub	sp, #8
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	2b00      	cmp	r3, #0
 8002294:	d101      	bne.n	800229a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002296:	2301      	movs	r3, #1
 8002298:	e041      	b.n	800231e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80022a0:	b2db      	uxtb	r3, r3
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d106      	bne.n	80022b4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	2200      	movs	r2, #0
 80022aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80022ae:	6878      	ldr	r0, [r7, #4]
 80022b0:	f7fe fed4 	bl	800105c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	2202      	movs	r2, #2
 80022b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681a      	ldr	r2, [r3, #0]
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	3304      	adds	r3, #4
 80022c4:	4619      	mov	r1, r3
 80022c6:	4610      	mov	r0, r2
 80022c8:	f000 fb8e 	bl	80029e8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	2201      	movs	r2, #1
 80022d0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	2201      	movs	r2, #1
 80022d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	2201      	movs	r2, #1
 80022e0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	2201      	movs	r2, #1
 80022e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	2201      	movs	r2, #1
 80022f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	2201      	movs	r2, #1
 80022f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	2201      	movs	r2, #1
 8002300:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	2201      	movs	r2, #1
 8002308:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	2201      	movs	r2, #1
 8002310:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	2201      	movs	r2, #1
 8002318:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800231c:	2300      	movs	r3, #0
}
 800231e:	4618      	mov	r0, r3
 8002320:	3708      	adds	r7, #8
 8002322:	46bd      	mov	sp, r7
 8002324:	bd80      	pop	{r7, pc}
	...

08002328 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002328:	b480      	push	{r7}
 800232a:	b085      	sub	sp, #20
 800232c:	af00      	add	r7, sp, #0
 800232e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002336:	b2db      	uxtb	r3, r3
 8002338:	2b01      	cmp	r3, #1
 800233a:	d001      	beq.n	8002340 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800233c:	2301      	movs	r3, #1
 800233e:	e03a      	b.n	80023b6 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	2202      	movs	r2, #2
 8002344:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	68da      	ldr	r2, [r3, #12]
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f042 0201 	orr.w	r2, r2, #1
 8002356:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	4a18      	ldr	r2, [pc, #96]	; (80023c0 <HAL_TIM_Base_Start_IT+0x98>)
 800235e:	4293      	cmp	r3, r2
 8002360:	d00e      	beq.n	8002380 <HAL_TIM_Base_Start_IT+0x58>
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800236a:	d009      	beq.n	8002380 <HAL_TIM_Base_Start_IT+0x58>
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	4a14      	ldr	r2, [pc, #80]	; (80023c4 <HAL_TIM_Base_Start_IT+0x9c>)
 8002372:	4293      	cmp	r3, r2
 8002374:	d004      	beq.n	8002380 <HAL_TIM_Base_Start_IT+0x58>
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	4a13      	ldr	r2, [pc, #76]	; (80023c8 <HAL_TIM_Base_Start_IT+0xa0>)
 800237c:	4293      	cmp	r3, r2
 800237e:	d111      	bne.n	80023a4 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	689b      	ldr	r3, [r3, #8]
 8002386:	f003 0307 	and.w	r3, r3, #7
 800238a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	2b06      	cmp	r3, #6
 8002390:	d010      	beq.n	80023b4 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	681a      	ldr	r2, [r3, #0]
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	f042 0201 	orr.w	r2, r2, #1
 80023a0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80023a2:	e007      	b.n	80023b4 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	681a      	ldr	r2, [r3, #0]
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f042 0201 	orr.w	r2, r2, #1
 80023b2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80023b4:	2300      	movs	r3, #0
}
 80023b6:	4618      	mov	r0, r3
 80023b8:	3714      	adds	r7, #20
 80023ba:	46bd      	mov	sp, r7
 80023bc:	bc80      	pop	{r7}
 80023be:	4770      	bx	lr
 80023c0:	40012c00 	.word	0x40012c00
 80023c4:	40000400 	.word	0x40000400
 80023c8:	40000800 	.word	0x40000800

080023cc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80023cc:	b580      	push	{r7, lr}
 80023ce:	b082      	sub	sp, #8
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d101      	bne.n	80023de <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80023da:	2301      	movs	r3, #1
 80023dc:	e041      	b.n	8002462 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80023e4:	b2db      	uxtb	r3, r3
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d106      	bne.n	80023f8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	2200      	movs	r2, #0
 80023ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80023f2:	6878      	ldr	r0, [r7, #4]
 80023f4:	f000 f839 	bl	800246a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	2202      	movs	r2, #2
 80023fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681a      	ldr	r2, [r3, #0]
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	3304      	adds	r3, #4
 8002408:	4619      	mov	r1, r3
 800240a:	4610      	mov	r0, r2
 800240c:	f000 faec 	bl	80029e8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	2201      	movs	r2, #1
 8002414:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	2201      	movs	r2, #1
 800241c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	2201      	movs	r2, #1
 8002424:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	2201      	movs	r2, #1
 800242c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	2201      	movs	r2, #1
 8002434:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	2201      	movs	r2, #1
 800243c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	2201      	movs	r2, #1
 8002444:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	2201      	movs	r2, #1
 800244c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	2201      	movs	r2, #1
 8002454:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	2201      	movs	r2, #1
 800245c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002460:	2300      	movs	r3, #0
}
 8002462:	4618      	mov	r0, r3
 8002464:	3708      	adds	r7, #8
 8002466:	46bd      	mov	sp, r7
 8002468:	bd80      	pop	{r7, pc}

0800246a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800246a:	b480      	push	{r7}
 800246c:	b083      	sub	sp, #12
 800246e:	af00      	add	r7, sp, #0
 8002470:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002472:	bf00      	nop
 8002474:	370c      	adds	r7, #12
 8002476:	46bd      	mov	sp, r7
 8002478:	bc80      	pop	{r7}
 800247a:	4770      	bx	lr

0800247c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800247c:	b580      	push	{r7, lr}
 800247e:	b082      	sub	sp, #8
 8002480:	af00      	add	r7, sp, #0
 8002482:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	691b      	ldr	r3, [r3, #16]
 800248a:	f003 0302 	and.w	r3, r3, #2
 800248e:	2b02      	cmp	r3, #2
 8002490:	d122      	bne.n	80024d8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	68db      	ldr	r3, [r3, #12]
 8002498:	f003 0302 	and.w	r3, r3, #2
 800249c:	2b02      	cmp	r3, #2
 800249e:	d11b      	bne.n	80024d8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	f06f 0202 	mvn.w	r2, #2
 80024a8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	2201      	movs	r2, #1
 80024ae:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	699b      	ldr	r3, [r3, #24]
 80024b6:	f003 0303 	and.w	r3, r3, #3
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d003      	beq.n	80024c6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80024be:	6878      	ldr	r0, [r7, #4]
 80024c0:	f000 fa76 	bl	80029b0 <HAL_TIM_IC_CaptureCallback>
 80024c4:	e005      	b.n	80024d2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80024c6:	6878      	ldr	r0, [r7, #4]
 80024c8:	f000 fa69 	bl	800299e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80024cc:	6878      	ldr	r0, [r7, #4]
 80024ce:	f000 fa78 	bl	80029c2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	2200      	movs	r2, #0
 80024d6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	691b      	ldr	r3, [r3, #16]
 80024de:	f003 0304 	and.w	r3, r3, #4
 80024e2:	2b04      	cmp	r3, #4
 80024e4:	d122      	bne.n	800252c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	68db      	ldr	r3, [r3, #12]
 80024ec:	f003 0304 	and.w	r3, r3, #4
 80024f0:	2b04      	cmp	r3, #4
 80024f2:	d11b      	bne.n	800252c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	f06f 0204 	mvn.w	r2, #4
 80024fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	2202      	movs	r2, #2
 8002502:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	699b      	ldr	r3, [r3, #24]
 800250a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800250e:	2b00      	cmp	r3, #0
 8002510:	d003      	beq.n	800251a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002512:	6878      	ldr	r0, [r7, #4]
 8002514:	f000 fa4c 	bl	80029b0 <HAL_TIM_IC_CaptureCallback>
 8002518:	e005      	b.n	8002526 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800251a:	6878      	ldr	r0, [r7, #4]
 800251c:	f000 fa3f 	bl	800299e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002520:	6878      	ldr	r0, [r7, #4]
 8002522:	f000 fa4e 	bl	80029c2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	2200      	movs	r2, #0
 800252a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	691b      	ldr	r3, [r3, #16]
 8002532:	f003 0308 	and.w	r3, r3, #8
 8002536:	2b08      	cmp	r3, #8
 8002538:	d122      	bne.n	8002580 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	68db      	ldr	r3, [r3, #12]
 8002540:	f003 0308 	and.w	r3, r3, #8
 8002544:	2b08      	cmp	r3, #8
 8002546:	d11b      	bne.n	8002580 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	f06f 0208 	mvn.w	r2, #8
 8002550:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	2204      	movs	r2, #4
 8002556:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	69db      	ldr	r3, [r3, #28]
 800255e:	f003 0303 	and.w	r3, r3, #3
 8002562:	2b00      	cmp	r3, #0
 8002564:	d003      	beq.n	800256e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002566:	6878      	ldr	r0, [r7, #4]
 8002568:	f000 fa22 	bl	80029b0 <HAL_TIM_IC_CaptureCallback>
 800256c:	e005      	b.n	800257a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800256e:	6878      	ldr	r0, [r7, #4]
 8002570:	f000 fa15 	bl	800299e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002574:	6878      	ldr	r0, [r7, #4]
 8002576:	f000 fa24 	bl	80029c2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	2200      	movs	r2, #0
 800257e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	691b      	ldr	r3, [r3, #16]
 8002586:	f003 0310 	and.w	r3, r3, #16
 800258a:	2b10      	cmp	r3, #16
 800258c:	d122      	bne.n	80025d4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	68db      	ldr	r3, [r3, #12]
 8002594:	f003 0310 	and.w	r3, r3, #16
 8002598:	2b10      	cmp	r3, #16
 800259a:	d11b      	bne.n	80025d4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	f06f 0210 	mvn.w	r2, #16
 80025a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	2208      	movs	r2, #8
 80025aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	69db      	ldr	r3, [r3, #28]
 80025b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d003      	beq.n	80025c2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80025ba:	6878      	ldr	r0, [r7, #4]
 80025bc:	f000 f9f8 	bl	80029b0 <HAL_TIM_IC_CaptureCallback>
 80025c0:	e005      	b.n	80025ce <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80025c2:	6878      	ldr	r0, [r7, #4]
 80025c4:	f000 f9eb 	bl	800299e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80025c8:	6878      	ldr	r0, [r7, #4]
 80025ca:	f000 f9fa 	bl	80029c2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	2200      	movs	r2, #0
 80025d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	691b      	ldr	r3, [r3, #16]
 80025da:	f003 0301 	and.w	r3, r3, #1
 80025de:	2b01      	cmp	r3, #1
 80025e0:	d10e      	bne.n	8002600 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	68db      	ldr	r3, [r3, #12]
 80025e8:	f003 0301 	and.w	r3, r3, #1
 80025ec:	2b01      	cmp	r3, #1
 80025ee:	d107      	bne.n	8002600 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f06f 0201 	mvn.w	r2, #1
 80025f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80025fa:	6878      	ldr	r0, [r7, #4]
 80025fc:	f7fe fc8a 	bl	8000f14 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	691b      	ldr	r3, [r3, #16]
 8002606:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800260a:	2b80      	cmp	r3, #128	; 0x80
 800260c:	d10e      	bne.n	800262c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	68db      	ldr	r3, [r3, #12]
 8002614:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002618:	2b80      	cmp	r3, #128	; 0x80
 800261a:	d107      	bne.n	800262c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002624:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002626:	6878      	ldr	r0, [r7, #4]
 8002628:	f000 fcc5 	bl	8002fb6 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	691b      	ldr	r3, [r3, #16]
 8002632:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002636:	2b40      	cmp	r3, #64	; 0x40
 8002638:	d10e      	bne.n	8002658 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	68db      	ldr	r3, [r3, #12]
 8002640:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002644:	2b40      	cmp	r3, #64	; 0x40
 8002646:	d107      	bne.n	8002658 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002650:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002652:	6878      	ldr	r0, [r7, #4]
 8002654:	f000 f9be 	bl	80029d4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	691b      	ldr	r3, [r3, #16]
 800265e:	f003 0320 	and.w	r3, r3, #32
 8002662:	2b20      	cmp	r3, #32
 8002664:	d10e      	bne.n	8002684 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	68db      	ldr	r3, [r3, #12]
 800266c:	f003 0320 	and.w	r3, r3, #32
 8002670:	2b20      	cmp	r3, #32
 8002672:	d107      	bne.n	8002684 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f06f 0220 	mvn.w	r2, #32
 800267c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800267e:	6878      	ldr	r0, [r7, #4]
 8002680:	f000 fc90 	bl	8002fa4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002684:	bf00      	nop
 8002686:	3708      	adds	r7, #8
 8002688:	46bd      	mov	sp, r7
 800268a:	bd80      	pop	{r7, pc}

0800268c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800268c:	b580      	push	{r7, lr}
 800268e:	b086      	sub	sp, #24
 8002690:	af00      	add	r7, sp, #0
 8002692:	60f8      	str	r0, [r7, #12]
 8002694:	60b9      	str	r1, [r7, #8]
 8002696:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002698:	2300      	movs	r3, #0
 800269a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80026a2:	2b01      	cmp	r3, #1
 80026a4:	d101      	bne.n	80026aa <HAL_TIM_PWM_ConfigChannel+0x1e>
 80026a6:	2302      	movs	r3, #2
 80026a8:	e0ae      	b.n	8002808 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	2201      	movs	r2, #1
 80026ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	2b0c      	cmp	r3, #12
 80026b6:	f200 809f 	bhi.w	80027f8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80026ba:	a201      	add	r2, pc, #4	; (adr r2, 80026c0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80026bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026c0:	080026f5 	.word	0x080026f5
 80026c4:	080027f9 	.word	0x080027f9
 80026c8:	080027f9 	.word	0x080027f9
 80026cc:	080027f9 	.word	0x080027f9
 80026d0:	08002735 	.word	0x08002735
 80026d4:	080027f9 	.word	0x080027f9
 80026d8:	080027f9 	.word	0x080027f9
 80026dc:	080027f9 	.word	0x080027f9
 80026e0:	08002777 	.word	0x08002777
 80026e4:	080027f9 	.word	0x080027f9
 80026e8:	080027f9 	.word	0x080027f9
 80026ec:	080027f9 	.word	0x080027f9
 80026f0:	080027b7 	.word	0x080027b7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	68b9      	ldr	r1, [r7, #8]
 80026fa:	4618      	mov	r0, r3
 80026fc:	f000 f9d6 	bl	8002aac <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	699a      	ldr	r2, [r3, #24]
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f042 0208 	orr.w	r2, r2, #8
 800270e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	699a      	ldr	r2, [r3, #24]
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f022 0204 	bic.w	r2, r2, #4
 800271e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	6999      	ldr	r1, [r3, #24]
 8002726:	68bb      	ldr	r3, [r7, #8]
 8002728:	691a      	ldr	r2, [r3, #16]
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	430a      	orrs	r2, r1
 8002730:	619a      	str	r2, [r3, #24]
      break;
 8002732:	e064      	b.n	80027fe <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	68b9      	ldr	r1, [r7, #8]
 800273a:	4618      	mov	r0, r3
 800273c:	f000 fa1c 	bl	8002b78 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	699a      	ldr	r2, [r3, #24]
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800274e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	699a      	ldr	r2, [r3, #24]
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800275e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	6999      	ldr	r1, [r3, #24]
 8002766:	68bb      	ldr	r3, [r7, #8]
 8002768:	691b      	ldr	r3, [r3, #16]
 800276a:	021a      	lsls	r2, r3, #8
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	430a      	orrs	r2, r1
 8002772:	619a      	str	r2, [r3, #24]
      break;
 8002774:	e043      	b.n	80027fe <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	68b9      	ldr	r1, [r7, #8]
 800277c:	4618      	mov	r0, r3
 800277e:	f000 fa65 	bl	8002c4c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	69da      	ldr	r2, [r3, #28]
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f042 0208 	orr.w	r2, r2, #8
 8002790:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	69da      	ldr	r2, [r3, #28]
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f022 0204 	bic.w	r2, r2, #4
 80027a0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	69d9      	ldr	r1, [r3, #28]
 80027a8:	68bb      	ldr	r3, [r7, #8]
 80027aa:	691a      	ldr	r2, [r3, #16]
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	430a      	orrs	r2, r1
 80027b2:	61da      	str	r2, [r3, #28]
      break;
 80027b4:	e023      	b.n	80027fe <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	68b9      	ldr	r1, [r7, #8]
 80027bc:	4618      	mov	r0, r3
 80027be:	f000 faaf 	bl	8002d20 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	69da      	ldr	r2, [r3, #28]
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80027d0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	69da      	ldr	r2, [r3, #28]
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80027e0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	69d9      	ldr	r1, [r3, #28]
 80027e8:	68bb      	ldr	r3, [r7, #8]
 80027ea:	691b      	ldr	r3, [r3, #16]
 80027ec:	021a      	lsls	r2, r3, #8
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	430a      	orrs	r2, r1
 80027f4:	61da      	str	r2, [r3, #28]
      break;
 80027f6:	e002      	b.n	80027fe <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80027f8:	2301      	movs	r3, #1
 80027fa:	75fb      	strb	r3, [r7, #23]
      break;
 80027fc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	2200      	movs	r2, #0
 8002802:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002806:	7dfb      	ldrb	r3, [r7, #23]
}
 8002808:	4618      	mov	r0, r3
 800280a:	3718      	adds	r7, #24
 800280c:	46bd      	mov	sp, r7
 800280e:	bd80      	pop	{r7, pc}

08002810 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002810:	b580      	push	{r7, lr}
 8002812:	b084      	sub	sp, #16
 8002814:	af00      	add	r7, sp, #0
 8002816:	6078      	str	r0, [r7, #4]
 8002818:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800281a:	2300      	movs	r3, #0
 800281c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002824:	2b01      	cmp	r3, #1
 8002826:	d101      	bne.n	800282c <HAL_TIM_ConfigClockSource+0x1c>
 8002828:	2302      	movs	r3, #2
 800282a:	e0b4      	b.n	8002996 <HAL_TIM_ConfigClockSource+0x186>
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	2201      	movs	r2, #1
 8002830:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	2202      	movs	r2, #2
 8002838:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	689b      	ldr	r3, [r3, #8]
 8002842:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002844:	68bb      	ldr	r3, [r7, #8]
 8002846:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800284a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800284c:	68bb      	ldr	r3, [r7, #8]
 800284e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002852:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	68ba      	ldr	r2, [r7, #8]
 800285a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800285c:	683b      	ldr	r3, [r7, #0]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002864:	d03e      	beq.n	80028e4 <HAL_TIM_ConfigClockSource+0xd4>
 8002866:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800286a:	f200 8087 	bhi.w	800297c <HAL_TIM_ConfigClockSource+0x16c>
 800286e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002872:	f000 8086 	beq.w	8002982 <HAL_TIM_ConfigClockSource+0x172>
 8002876:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800287a:	d87f      	bhi.n	800297c <HAL_TIM_ConfigClockSource+0x16c>
 800287c:	2b70      	cmp	r3, #112	; 0x70
 800287e:	d01a      	beq.n	80028b6 <HAL_TIM_ConfigClockSource+0xa6>
 8002880:	2b70      	cmp	r3, #112	; 0x70
 8002882:	d87b      	bhi.n	800297c <HAL_TIM_ConfigClockSource+0x16c>
 8002884:	2b60      	cmp	r3, #96	; 0x60
 8002886:	d050      	beq.n	800292a <HAL_TIM_ConfigClockSource+0x11a>
 8002888:	2b60      	cmp	r3, #96	; 0x60
 800288a:	d877      	bhi.n	800297c <HAL_TIM_ConfigClockSource+0x16c>
 800288c:	2b50      	cmp	r3, #80	; 0x50
 800288e:	d03c      	beq.n	800290a <HAL_TIM_ConfigClockSource+0xfa>
 8002890:	2b50      	cmp	r3, #80	; 0x50
 8002892:	d873      	bhi.n	800297c <HAL_TIM_ConfigClockSource+0x16c>
 8002894:	2b40      	cmp	r3, #64	; 0x40
 8002896:	d058      	beq.n	800294a <HAL_TIM_ConfigClockSource+0x13a>
 8002898:	2b40      	cmp	r3, #64	; 0x40
 800289a:	d86f      	bhi.n	800297c <HAL_TIM_ConfigClockSource+0x16c>
 800289c:	2b30      	cmp	r3, #48	; 0x30
 800289e:	d064      	beq.n	800296a <HAL_TIM_ConfigClockSource+0x15a>
 80028a0:	2b30      	cmp	r3, #48	; 0x30
 80028a2:	d86b      	bhi.n	800297c <HAL_TIM_ConfigClockSource+0x16c>
 80028a4:	2b20      	cmp	r3, #32
 80028a6:	d060      	beq.n	800296a <HAL_TIM_ConfigClockSource+0x15a>
 80028a8:	2b20      	cmp	r3, #32
 80028aa:	d867      	bhi.n	800297c <HAL_TIM_ConfigClockSource+0x16c>
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d05c      	beq.n	800296a <HAL_TIM_ConfigClockSource+0x15a>
 80028b0:	2b10      	cmp	r3, #16
 80028b2:	d05a      	beq.n	800296a <HAL_TIM_ConfigClockSource+0x15a>
 80028b4:	e062      	b.n	800297c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	6818      	ldr	r0, [r3, #0]
 80028ba:	683b      	ldr	r3, [r7, #0]
 80028bc:	6899      	ldr	r1, [r3, #8]
 80028be:	683b      	ldr	r3, [r7, #0]
 80028c0:	685a      	ldr	r2, [r3, #4]
 80028c2:	683b      	ldr	r3, [r7, #0]
 80028c4:	68db      	ldr	r3, [r3, #12]
 80028c6:	f000 faf0 	bl	8002eaa <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	689b      	ldr	r3, [r3, #8]
 80028d0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80028d2:	68bb      	ldr	r3, [r7, #8]
 80028d4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80028d8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	68ba      	ldr	r2, [r7, #8]
 80028e0:	609a      	str	r2, [r3, #8]
      break;
 80028e2:	e04f      	b.n	8002984 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	6818      	ldr	r0, [r3, #0]
 80028e8:	683b      	ldr	r3, [r7, #0]
 80028ea:	6899      	ldr	r1, [r3, #8]
 80028ec:	683b      	ldr	r3, [r7, #0]
 80028ee:	685a      	ldr	r2, [r3, #4]
 80028f0:	683b      	ldr	r3, [r7, #0]
 80028f2:	68db      	ldr	r3, [r3, #12]
 80028f4:	f000 fad9 	bl	8002eaa <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	689a      	ldr	r2, [r3, #8]
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002906:	609a      	str	r2, [r3, #8]
      break;
 8002908:	e03c      	b.n	8002984 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	6818      	ldr	r0, [r3, #0]
 800290e:	683b      	ldr	r3, [r7, #0]
 8002910:	6859      	ldr	r1, [r3, #4]
 8002912:	683b      	ldr	r3, [r7, #0]
 8002914:	68db      	ldr	r3, [r3, #12]
 8002916:	461a      	mov	r2, r3
 8002918:	f000 fa50 	bl	8002dbc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	2150      	movs	r1, #80	; 0x50
 8002922:	4618      	mov	r0, r3
 8002924:	f000 faa7 	bl	8002e76 <TIM_ITRx_SetConfig>
      break;
 8002928:	e02c      	b.n	8002984 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	6818      	ldr	r0, [r3, #0]
 800292e:	683b      	ldr	r3, [r7, #0]
 8002930:	6859      	ldr	r1, [r3, #4]
 8002932:	683b      	ldr	r3, [r7, #0]
 8002934:	68db      	ldr	r3, [r3, #12]
 8002936:	461a      	mov	r2, r3
 8002938:	f000 fa6e 	bl	8002e18 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	2160      	movs	r1, #96	; 0x60
 8002942:	4618      	mov	r0, r3
 8002944:	f000 fa97 	bl	8002e76 <TIM_ITRx_SetConfig>
      break;
 8002948:	e01c      	b.n	8002984 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	6818      	ldr	r0, [r3, #0]
 800294e:	683b      	ldr	r3, [r7, #0]
 8002950:	6859      	ldr	r1, [r3, #4]
 8002952:	683b      	ldr	r3, [r7, #0]
 8002954:	68db      	ldr	r3, [r3, #12]
 8002956:	461a      	mov	r2, r3
 8002958:	f000 fa30 	bl	8002dbc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	2140      	movs	r1, #64	; 0x40
 8002962:	4618      	mov	r0, r3
 8002964:	f000 fa87 	bl	8002e76 <TIM_ITRx_SetConfig>
      break;
 8002968:	e00c      	b.n	8002984 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681a      	ldr	r2, [r3, #0]
 800296e:	683b      	ldr	r3, [r7, #0]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	4619      	mov	r1, r3
 8002974:	4610      	mov	r0, r2
 8002976:	f000 fa7e 	bl	8002e76 <TIM_ITRx_SetConfig>
      break;
 800297a:	e003      	b.n	8002984 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800297c:	2301      	movs	r3, #1
 800297e:	73fb      	strb	r3, [r7, #15]
      break;
 8002980:	e000      	b.n	8002984 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002982:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	2201      	movs	r2, #1
 8002988:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	2200      	movs	r2, #0
 8002990:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002994:	7bfb      	ldrb	r3, [r7, #15]
}
 8002996:	4618      	mov	r0, r3
 8002998:	3710      	adds	r7, #16
 800299a:	46bd      	mov	sp, r7
 800299c:	bd80      	pop	{r7, pc}

0800299e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800299e:	b480      	push	{r7}
 80029a0:	b083      	sub	sp, #12
 80029a2:	af00      	add	r7, sp, #0
 80029a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80029a6:	bf00      	nop
 80029a8:	370c      	adds	r7, #12
 80029aa:	46bd      	mov	sp, r7
 80029ac:	bc80      	pop	{r7}
 80029ae:	4770      	bx	lr

080029b0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80029b0:	b480      	push	{r7}
 80029b2:	b083      	sub	sp, #12
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80029b8:	bf00      	nop
 80029ba:	370c      	adds	r7, #12
 80029bc:	46bd      	mov	sp, r7
 80029be:	bc80      	pop	{r7}
 80029c0:	4770      	bx	lr

080029c2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80029c2:	b480      	push	{r7}
 80029c4:	b083      	sub	sp, #12
 80029c6:	af00      	add	r7, sp, #0
 80029c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80029ca:	bf00      	nop
 80029cc:	370c      	adds	r7, #12
 80029ce:	46bd      	mov	sp, r7
 80029d0:	bc80      	pop	{r7}
 80029d2:	4770      	bx	lr

080029d4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80029d4:	b480      	push	{r7}
 80029d6:	b083      	sub	sp, #12
 80029d8:	af00      	add	r7, sp, #0
 80029da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80029dc:	bf00      	nop
 80029de:	370c      	adds	r7, #12
 80029e0:	46bd      	mov	sp, r7
 80029e2:	bc80      	pop	{r7}
 80029e4:	4770      	bx	lr
	...

080029e8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80029e8:	b480      	push	{r7}
 80029ea:	b085      	sub	sp, #20
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	6078      	str	r0, [r7, #4]
 80029f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	4a29      	ldr	r2, [pc, #164]	; (8002aa0 <TIM_Base_SetConfig+0xb8>)
 80029fc:	4293      	cmp	r3, r2
 80029fe:	d00b      	beq.n	8002a18 <TIM_Base_SetConfig+0x30>
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a06:	d007      	beq.n	8002a18 <TIM_Base_SetConfig+0x30>
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	4a26      	ldr	r2, [pc, #152]	; (8002aa4 <TIM_Base_SetConfig+0xbc>)
 8002a0c:	4293      	cmp	r3, r2
 8002a0e:	d003      	beq.n	8002a18 <TIM_Base_SetConfig+0x30>
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	4a25      	ldr	r2, [pc, #148]	; (8002aa8 <TIM_Base_SetConfig+0xc0>)
 8002a14:	4293      	cmp	r3, r2
 8002a16:	d108      	bne.n	8002a2a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a1e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002a20:	683b      	ldr	r3, [r7, #0]
 8002a22:	685b      	ldr	r3, [r3, #4]
 8002a24:	68fa      	ldr	r2, [r7, #12]
 8002a26:	4313      	orrs	r3, r2
 8002a28:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	4a1c      	ldr	r2, [pc, #112]	; (8002aa0 <TIM_Base_SetConfig+0xb8>)
 8002a2e:	4293      	cmp	r3, r2
 8002a30:	d00b      	beq.n	8002a4a <TIM_Base_SetConfig+0x62>
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a38:	d007      	beq.n	8002a4a <TIM_Base_SetConfig+0x62>
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	4a19      	ldr	r2, [pc, #100]	; (8002aa4 <TIM_Base_SetConfig+0xbc>)
 8002a3e:	4293      	cmp	r3, r2
 8002a40:	d003      	beq.n	8002a4a <TIM_Base_SetConfig+0x62>
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	4a18      	ldr	r2, [pc, #96]	; (8002aa8 <TIM_Base_SetConfig+0xc0>)
 8002a46:	4293      	cmp	r3, r2
 8002a48:	d108      	bne.n	8002a5c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002a50:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002a52:	683b      	ldr	r3, [r7, #0]
 8002a54:	68db      	ldr	r3, [r3, #12]
 8002a56:	68fa      	ldr	r2, [r7, #12]
 8002a58:	4313      	orrs	r3, r2
 8002a5a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002a62:	683b      	ldr	r3, [r7, #0]
 8002a64:	695b      	ldr	r3, [r3, #20]
 8002a66:	4313      	orrs	r3, r2
 8002a68:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	68fa      	ldr	r2, [r7, #12]
 8002a6e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002a70:	683b      	ldr	r3, [r7, #0]
 8002a72:	689a      	ldr	r2, [r3, #8]
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002a78:	683b      	ldr	r3, [r7, #0]
 8002a7a:	681a      	ldr	r2, [r3, #0]
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	4a07      	ldr	r2, [pc, #28]	; (8002aa0 <TIM_Base_SetConfig+0xb8>)
 8002a84:	4293      	cmp	r3, r2
 8002a86:	d103      	bne.n	8002a90 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002a88:	683b      	ldr	r3, [r7, #0]
 8002a8a:	691a      	ldr	r2, [r3, #16]
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	2201      	movs	r2, #1
 8002a94:	615a      	str	r2, [r3, #20]
}
 8002a96:	bf00      	nop
 8002a98:	3714      	adds	r7, #20
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	bc80      	pop	{r7}
 8002a9e:	4770      	bx	lr
 8002aa0:	40012c00 	.word	0x40012c00
 8002aa4:	40000400 	.word	0x40000400
 8002aa8:	40000800 	.word	0x40000800

08002aac <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002aac:	b480      	push	{r7}
 8002aae:	b087      	sub	sp, #28
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	6078      	str	r0, [r7, #4]
 8002ab4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	6a1b      	ldr	r3, [r3, #32]
 8002aba:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	6a1b      	ldr	r3, [r3, #32]
 8002ac0:	f023 0201 	bic.w	r2, r3, #1
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	685b      	ldr	r3, [r3, #4]
 8002acc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	699b      	ldr	r3, [r3, #24]
 8002ad2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ada:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	f023 0303 	bic.w	r3, r3, #3
 8002ae2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002ae4:	683b      	ldr	r3, [r7, #0]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	68fa      	ldr	r2, [r7, #12]
 8002aea:	4313      	orrs	r3, r2
 8002aec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002aee:	697b      	ldr	r3, [r7, #20]
 8002af0:	f023 0302 	bic.w	r3, r3, #2
 8002af4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002af6:	683b      	ldr	r3, [r7, #0]
 8002af8:	689b      	ldr	r3, [r3, #8]
 8002afa:	697a      	ldr	r2, [r7, #20]
 8002afc:	4313      	orrs	r3, r2
 8002afe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	4a1c      	ldr	r2, [pc, #112]	; (8002b74 <TIM_OC1_SetConfig+0xc8>)
 8002b04:	4293      	cmp	r3, r2
 8002b06:	d10c      	bne.n	8002b22 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002b08:	697b      	ldr	r3, [r7, #20]
 8002b0a:	f023 0308 	bic.w	r3, r3, #8
 8002b0e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002b10:	683b      	ldr	r3, [r7, #0]
 8002b12:	68db      	ldr	r3, [r3, #12]
 8002b14:	697a      	ldr	r2, [r7, #20]
 8002b16:	4313      	orrs	r3, r2
 8002b18:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002b1a:	697b      	ldr	r3, [r7, #20]
 8002b1c:	f023 0304 	bic.w	r3, r3, #4
 8002b20:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	4a13      	ldr	r2, [pc, #76]	; (8002b74 <TIM_OC1_SetConfig+0xc8>)
 8002b26:	4293      	cmp	r3, r2
 8002b28:	d111      	bne.n	8002b4e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002b2a:	693b      	ldr	r3, [r7, #16]
 8002b2c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002b30:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002b32:	693b      	ldr	r3, [r7, #16]
 8002b34:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002b38:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002b3a:	683b      	ldr	r3, [r7, #0]
 8002b3c:	695b      	ldr	r3, [r3, #20]
 8002b3e:	693a      	ldr	r2, [r7, #16]
 8002b40:	4313      	orrs	r3, r2
 8002b42:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002b44:	683b      	ldr	r3, [r7, #0]
 8002b46:	699b      	ldr	r3, [r3, #24]
 8002b48:	693a      	ldr	r2, [r7, #16]
 8002b4a:	4313      	orrs	r3, r2
 8002b4c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	693a      	ldr	r2, [r7, #16]
 8002b52:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	68fa      	ldr	r2, [r7, #12]
 8002b58:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002b5a:	683b      	ldr	r3, [r7, #0]
 8002b5c:	685a      	ldr	r2, [r3, #4]
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	697a      	ldr	r2, [r7, #20]
 8002b66:	621a      	str	r2, [r3, #32]
}
 8002b68:	bf00      	nop
 8002b6a:	371c      	adds	r7, #28
 8002b6c:	46bd      	mov	sp, r7
 8002b6e:	bc80      	pop	{r7}
 8002b70:	4770      	bx	lr
 8002b72:	bf00      	nop
 8002b74:	40012c00 	.word	0x40012c00

08002b78 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002b78:	b480      	push	{r7}
 8002b7a:	b087      	sub	sp, #28
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	6078      	str	r0, [r7, #4]
 8002b80:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	6a1b      	ldr	r3, [r3, #32]
 8002b86:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	6a1b      	ldr	r3, [r3, #32]
 8002b8c:	f023 0210 	bic.w	r2, r3, #16
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	685b      	ldr	r3, [r3, #4]
 8002b98:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	699b      	ldr	r3, [r3, #24]
 8002b9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002ba6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002bae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002bb0:	683b      	ldr	r3, [r7, #0]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	021b      	lsls	r3, r3, #8
 8002bb6:	68fa      	ldr	r2, [r7, #12]
 8002bb8:	4313      	orrs	r3, r2
 8002bba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002bbc:	697b      	ldr	r3, [r7, #20]
 8002bbe:	f023 0320 	bic.w	r3, r3, #32
 8002bc2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002bc4:	683b      	ldr	r3, [r7, #0]
 8002bc6:	689b      	ldr	r3, [r3, #8]
 8002bc8:	011b      	lsls	r3, r3, #4
 8002bca:	697a      	ldr	r2, [r7, #20]
 8002bcc:	4313      	orrs	r3, r2
 8002bce:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	4a1d      	ldr	r2, [pc, #116]	; (8002c48 <TIM_OC2_SetConfig+0xd0>)
 8002bd4:	4293      	cmp	r3, r2
 8002bd6:	d10d      	bne.n	8002bf4 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002bd8:	697b      	ldr	r3, [r7, #20]
 8002bda:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002bde:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002be0:	683b      	ldr	r3, [r7, #0]
 8002be2:	68db      	ldr	r3, [r3, #12]
 8002be4:	011b      	lsls	r3, r3, #4
 8002be6:	697a      	ldr	r2, [r7, #20]
 8002be8:	4313      	orrs	r3, r2
 8002bea:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002bec:	697b      	ldr	r3, [r7, #20]
 8002bee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002bf2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	4a14      	ldr	r2, [pc, #80]	; (8002c48 <TIM_OC2_SetConfig+0xd0>)
 8002bf8:	4293      	cmp	r3, r2
 8002bfa:	d113      	bne.n	8002c24 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002bfc:	693b      	ldr	r3, [r7, #16]
 8002bfe:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002c02:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002c04:	693b      	ldr	r3, [r7, #16]
 8002c06:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002c0a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002c0c:	683b      	ldr	r3, [r7, #0]
 8002c0e:	695b      	ldr	r3, [r3, #20]
 8002c10:	009b      	lsls	r3, r3, #2
 8002c12:	693a      	ldr	r2, [r7, #16]
 8002c14:	4313      	orrs	r3, r2
 8002c16:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002c18:	683b      	ldr	r3, [r7, #0]
 8002c1a:	699b      	ldr	r3, [r3, #24]
 8002c1c:	009b      	lsls	r3, r3, #2
 8002c1e:	693a      	ldr	r2, [r7, #16]
 8002c20:	4313      	orrs	r3, r2
 8002c22:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	693a      	ldr	r2, [r7, #16]
 8002c28:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	68fa      	ldr	r2, [r7, #12]
 8002c2e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002c30:	683b      	ldr	r3, [r7, #0]
 8002c32:	685a      	ldr	r2, [r3, #4]
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	697a      	ldr	r2, [r7, #20]
 8002c3c:	621a      	str	r2, [r3, #32]
}
 8002c3e:	bf00      	nop
 8002c40:	371c      	adds	r7, #28
 8002c42:	46bd      	mov	sp, r7
 8002c44:	bc80      	pop	{r7}
 8002c46:	4770      	bx	lr
 8002c48:	40012c00 	.word	0x40012c00

08002c4c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002c4c:	b480      	push	{r7}
 8002c4e:	b087      	sub	sp, #28
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	6078      	str	r0, [r7, #4]
 8002c54:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	6a1b      	ldr	r3, [r3, #32]
 8002c5a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	6a1b      	ldr	r3, [r3, #32]
 8002c60:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	685b      	ldr	r3, [r3, #4]
 8002c6c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	69db      	ldr	r3, [r3, #28]
 8002c72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c7a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	f023 0303 	bic.w	r3, r3, #3
 8002c82:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002c84:	683b      	ldr	r3, [r7, #0]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	68fa      	ldr	r2, [r7, #12]
 8002c8a:	4313      	orrs	r3, r2
 8002c8c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002c8e:	697b      	ldr	r3, [r7, #20]
 8002c90:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002c94:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002c96:	683b      	ldr	r3, [r7, #0]
 8002c98:	689b      	ldr	r3, [r3, #8]
 8002c9a:	021b      	lsls	r3, r3, #8
 8002c9c:	697a      	ldr	r2, [r7, #20]
 8002c9e:	4313      	orrs	r3, r2
 8002ca0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	4a1d      	ldr	r2, [pc, #116]	; (8002d1c <TIM_OC3_SetConfig+0xd0>)
 8002ca6:	4293      	cmp	r3, r2
 8002ca8:	d10d      	bne.n	8002cc6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002caa:	697b      	ldr	r3, [r7, #20]
 8002cac:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002cb0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002cb2:	683b      	ldr	r3, [r7, #0]
 8002cb4:	68db      	ldr	r3, [r3, #12]
 8002cb6:	021b      	lsls	r3, r3, #8
 8002cb8:	697a      	ldr	r2, [r7, #20]
 8002cba:	4313      	orrs	r3, r2
 8002cbc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002cbe:	697b      	ldr	r3, [r7, #20]
 8002cc0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002cc4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	4a14      	ldr	r2, [pc, #80]	; (8002d1c <TIM_OC3_SetConfig+0xd0>)
 8002cca:	4293      	cmp	r3, r2
 8002ccc:	d113      	bne.n	8002cf6 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002cce:	693b      	ldr	r3, [r7, #16]
 8002cd0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002cd4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002cd6:	693b      	ldr	r3, [r7, #16]
 8002cd8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002cdc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002cde:	683b      	ldr	r3, [r7, #0]
 8002ce0:	695b      	ldr	r3, [r3, #20]
 8002ce2:	011b      	lsls	r3, r3, #4
 8002ce4:	693a      	ldr	r2, [r7, #16]
 8002ce6:	4313      	orrs	r3, r2
 8002ce8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002cea:	683b      	ldr	r3, [r7, #0]
 8002cec:	699b      	ldr	r3, [r3, #24]
 8002cee:	011b      	lsls	r3, r3, #4
 8002cf0:	693a      	ldr	r2, [r7, #16]
 8002cf2:	4313      	orrs	r3, r2
 8002cf4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	693a      	ldr	r2, [r7, #16]
 8002cfa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	68fa      	ldr	r2, [r7, #12]
 8002d00:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002d02:	683b      	ldr	r3, [r7, #0]
 8002d04:	685a      	ldr	r2, [r3, #4]
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	697a      	ldr	r2, [r7, #20]
 8002d0e:	621a      	str	r2, [r3, #32]
}
 8002d10:	bf00      	nop
 8002d12:	371c      	adds	r7, #28
 8002d14:	46bd      	mov	sp, r7
 8002d16:	bc80      	pop	{r7}
 8002d18:	4770      	bx	lr
 8002d1a:	bf00      	nop
 8002d1c:	40012c00 	.word	0x40012c00

08002d20 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002d20:	b480      	push	{r7}
 8002d22:	b087      	sub	sp, #28
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	6078      	str	r0, [r7, #4]
 8002d28:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	6a1b      	ldr	r3, [r3, #32]
 8002d2e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	6a1b      	ldr	r3, [r3, #32]
 8002d34:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	685b      	ldr	r3, [r3, #4]
 8002d40:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	69db      	ldr	r3, [r3, #28]
 8002d46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002d4e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d56:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002d58:	683b      	ldr	r3, [r7, #0]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	021b      	lsls	r3, r3, #8
 8002d5e:	68fa      	ldr	r2, [r7, #12]
 8002d60:	4313      	orrs	r3, r2
 8002d62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002d64:	693b      	ldr	r3, [r7, #16]
 8002d66:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002d6a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002d6c:	683b      	ldr	r3, [r7, #0]
 8002d6e:	689b      	ldr	r3, [r3, #8]
 8002d70:	031b      	lsls	r3, r3, #12
 8002d72:	693a      	ldr	r2, [r7, #16]
 8002d74:	4313      	orrs	r3, r2
 8002d76:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	4a0f      	ldr	r2, [pc, #60]	; (8002db8 <TIM_OC4_SetConfig+0x98>)
 8002d7c:	4293      	cmp	r3, r2
 8002d7e:	d109      	bne.n	8002d94 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002d80:	697b      	ldr	r3, [r7, #20]
 8002d82:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002d86:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002d88:	683b      	ldr	r3, [r7, #0]
 8002d8a:	695b      	ldr	r3, [r3, #20]
 8002d8c:	019b      	lsls	r3, r3, #6
 8002d8e:	697a      	ldr	r2, [r7, #20]
 8002d90:	4313      	orrs	r3, r2
 8002d92:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	697a      	ldr	r2, [r7, #20]
 8002d98:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	68fa      	ldr	r2, [r7, #12]
 8002d9e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002da0:	683b      	ldr	r3, [r7, #0]
 8002da2:	685a      	ldr	r2, [r3, #4]
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	693a      	ldr	r2, [r7, #16]
 8002dac:	621a      	str	r2, [r3, #32]
}
 8002dae:	bf00      	nop
 8002db0:	371c      	adds	r7, #28
 8002db2:	46bd      	mov	sp, r7
 8002db4:	bc80      	pop	{r7}
 8002db6:	4770      	bx	lr
 8002db8:	40012c00 	.word	0x40012c00

08002dbc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002dbc:	b480      	push	{r7}
 8002dbe:	b087      	sub	sp, #28
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	60f8      	str	r0, [r7, #12]
 8002dc4:	60b9      	str	r1, [r7, #8]
 8002dc6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	6a1b      	ldr	r3, [r3, #32]
 8002dcc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	6a1b      	ldr	r3, [r3, #32]
 8002dd2:	f023 0201 	bic.w	r2, r3, #1
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	699b      	ldr	r3, [r3, #24]
 8002dde:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002de0:	693b      	ldr	r3, [r7, #16]
 8002de2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002de6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	011b      	lsls	r3, r3, #4
 8002dec:	693a      	ldr	r2, [r7, #16]
 8002dee:	4313      	orrs	r3, r2
 8002df0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002df2:	697b      	ldr	r3, [r7, #20]
 8002df4:	f023 030a 	bic.w	r3, r3, #10
 8002df8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002dfa:	697a      	ldr	r2, [r7, #20]
 8002dfc:	68bb      	ldr	r3, [r7, #8]
 8002dfe:	4313      	orrs	r3, r2
 8002e00:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	693a      	ldr	r2, [r7, #16]
 8002e06:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	697a      	ldr	r2, [r7, #20]
 8002e0c:	621a      	str	r2, [r3, #32]
}
 8002e0e:	bf00      	nop
 8002e10:	371c      	adds	r7, #28
 8002e12:	46bd      	mov	sp, r7
 8002e14:	bc80      	pop	{r7}
 8002e16:	4770      	bx	lr

08002e18 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002e18:	b480      	push	{r7}
 8002e1a:	b087      	sub	sp, #28
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	60f8      	str	r0, [r7, #12]
 8002e20:	60b9      	str	r1, [r7, #8]
 8002e22:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	6a1b      	ldr	r3, [r3, #32]
 8002e28:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	6a1b      	ldr	r3, [r3, #32]
 8002e2e:	f023 0210 	bic.w	r2, r3, #16
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	699b      	ldr	r3, [r3, #24]
 8002e3a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002e3c:	693b      	ldr	r3, [r7, #16]
 8002e3e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002e42:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	031b      	lsls	r3, r3, #12
 8002e48:	693a      	ldr	r2, [r7, #16]
 8002e4a:	4313      	orrs	r3, r2
 8002e4c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002e4e:	697b      	ldr	r3, [r7, #20]
 8002e50:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002e54:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002e56:	68bb      	ldr	r3, [r7, #8]
 8002e58:	011b      	lsls	r3, r3, #4
 8002e5a:	697a      	ldr	r2, [r7, #20]
 8002e5c:	4313      	orrs	r3, r2
 8002e5e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	693a      	ldr	r2, [r7, #16]
 8002e64:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	697a      	ldr	r2, [r7, #20]
 8002e6a:	621a      	str	r2, [r3, #32]
}
 8002e6c:	bf00      	nop
 8002e6e:	371c      	adds	r7, #28
 8002e70:	46bd      	mov	sp, r7
 8002e72:	bc80      	pop	{r7}
 8002e74:	4770      	bx	lr

08002e76 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002e76:	b480      	push	{r7}
 8002e78:	b085      	sub	sp, #20
 8002e7a:	af00      	add	r7, sp, #0
 8002e7c:	6078      	str	r0, [r7, #4]
 8002e7e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	689b      	ldr	r3, [r3, #8]
 8002e84:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e8c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002e8e:	683a      	ldr	r2, [r7, #0]
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	4313      	orrs	r3, r2
 8002e94:	f043 0307 	orr.w	r3, r3, #7
 8002e98:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	68fa      	ldr	r2, [r7, #12]
 8002e9e:	609a      	str	r2, [r3, #8]
}
 8002ea0:	bf00      	nop
 8002ea2:	3714      	adds	r7, #20
 8002ea4:	46bd      	mov	sp, r7
 8002ea6:	bc80      	pop	{r7}
 8002ea8:	4770      	bx	lr

08002eaa <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002eaa:	b480      	push	{r7}
 8002eac:	b087      	sub	sp, #28
 8002eae:	af00      	add	r7, sp, #0
 8002eb0:	60f8      	str	r0, [r7, #12]
 8002eb2:	60b9      	str	r1, [r7, #8]
 8002eb4:	607a      	str	r2, [r7, #4]
 8002eb6:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	689b      	ldr	r3, [r3, #8]
 8002ebc:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002ebe:	697b      	ldr	r3, [r7, #20]
 8002ec0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002ec4:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002ec6:	683b      	ldr	r3, [r7, #0]
 8002ec8:	021a      	lsls	r2, r3, #8
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	431a      	orrs	r2, r3
 8002ece:	68bb      	ldr	r3, [r7, #8]
 8002ed0:	4313      	orrs	r3, r2
 8002ed2:	697a      	ldr	r2, [r7, #20]
 8002ed4:	4313      	orrs	r3, r2
 8002ed6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	697a      	ldr	r2, [r7, #20]
 8002edc:	609a      	str	r2, [r3, #8]
}
 8002ede:	bf00      	nop
 8002ee0:	371c      	adds	r7, #28
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	bc80      	pop	{r7}
 8002ee6:	4770      	bx	lr

08002ee8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002ee8:	b480      	push	{r7}
 8002eea:	b085      	sub	sp, #20
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	6078      	str	r0, [r7, #4]
 8002ef0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ef8:	2b01      	cmp	r3, #1
 8002efa:	d101      	bne.n	8002f00 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002efc:	2302      	movs	r3, #2
 8002efe:	e046      	b.n	8002f8e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	2201      	movs	r2, #1
 8002f04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	2202      	movs	r2, #2
 8002f0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	685b      	ldr	r3, [r3, #4]
 8002f16:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	689b      	ldr	r3, [r3, #8]
 8002f1e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f26:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002f28:	683b      	ldr	r3, [r7, #0]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	68fa      	ldr	r2, [r7, #12]
 8002f2e:	4313      	orrs	r3, r2
 8002f30:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	68fa      	ldr	r2, [r7, #12]
 8002f38:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	4a16      	ldr	r2, [pc, #88]	; (8002f98 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8002f40:	4293      	cmp	r3, r2
 8002f42:	d00e      	beq.n	8002f62 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f4c:	d009      	beq.n	8002f62 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	4a12      	ldr	r2, [pc, #72]	; (8002f9c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002f54:	4293      	cmp	r3, r2
 8002f56:	d004      	beq.n	8002f62 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	4a10      	ldr	r2, [pc, #64]	; (8002fa0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002f5e:	4293      	cmp	r3, r2
 8002f60:	d10c      	bne.n	8002f7c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002f62:	68bb      	ldr	r3, [r7, #8]
 8002f64:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002f68:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002f6a:	683b      	ldr	r3, [r7, #0]
 8002f6c:	685b      	ldr	r3, [r3, #4]
 8002f6e:	68ba      	ldr	r2, [r7, #8]
 8002f70:	4313      	orrs	r3, r2
 8002f72:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	68ba      	ldr	r2, [r7, #8]
 8002f7a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	2201      	movs	r2, #1
 8002f80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	2200      	movs	r2, #0
 8002f88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002f8c:	2300      	movs	r3, #0
}
 8002f8e:	4618      	mov	r0, r3
 8002f90:	3714      	adds	r7, #20
 8002f92:	46bd      	mov	sp, r7
 8002f94:	bc80      	pop	{r7}
 8002f96:	4770      	bx	lr
 8002f98:	40012c00 	.word	0x40012c00
 8002f9c:	40000400 	.word	0x40000400
 8002fa0:	40000800 	.word	0x40000800

08002fa4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002fa4:	b480      	push	{r7}
 8002fa6:	b083      	sub	sp, #12
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002fac:	bf00      	nop
 8002fae:	370c      	adds	r7, #12
 8002fb0:	46bd      	mov	sp, r7
 8002fb2:	bc80      	pop	{r7}
 8002fb4:	4770      	bx	lr

08002fb6 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002fb6:	b480      	push	{r7}
 8002fb8:	b083      	sub	sp, #12
 8002fba:	af00      	add	r7, sp, #0
 8002fbc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002fbe:	bf00      	nop
 8002fc0:	370c      	adds	r7, #12
 8002fc2:	46bd      	mov	sp, r7
 8002fc4:	bc80      	pop	{r7}
 8002fc6:	4770      	bx	lr

08002fc8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002fc8:	b580      	push	{r7, lr}
 8002fca:	b082      	sub	sp, #8
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d101      	bne.n	8002fda <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002fd6:	2301      	movs	r3, #1
 8002fd8:	e042      	b.n	8003060 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002fe0:	b2db      	uxtb	r3, r3
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d106      	bne.n	8002ff4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	2200      	movs	r2, #0
 8002fea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002fee:	6878      	ldr	r0, [r7, #4]
 8002ff0:	f7fe f89e 	bl	8001130 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	2224      	movs	r2, #36	; 0x24
 8002ff8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	68da      	ldr	r2, [r3, #12]
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800300a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800300c:	6878      	ldr	r0, [r7, #4]
 800300e:	f000 f91d 	bl	800324c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	691a      	ldr	r2, [r3, #16]
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003020:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	695a      	ldr	r2, [r3, #20]
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003030:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	68da      	ldr	r2, [r3, #12]
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003040:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	2200      	movs	r2, #0
 8003046:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	2220      	movs	r2, #32
 800304c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	2220      	movs	r2, #32
 8003054:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	2200      	movs	r2, #0
 800305c:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800305e:	2300      	movs	r3, #0
}
 8003060:	4618      	mov	r0, r3
 8003062:	3708      	adds	r7, #8
 8003064:	46bd      	mov	sp, r7
 8003066:	bd80      	pop	{r7, pc}

08003068 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003068:	b580      	push	{r7, lr}
 800306a:	b08a      	sub	sp, #40	; 0x28
 800306c:	af02      	add	r7, sp, #8
 800306e:	60f8      	str	r0, [r7, #12]
 8003070:	60b9      	str	r1, [r7, #8]
 8003072:	603b      	str	r3, [r7, #0]
 8003074:	4613      	mov	r3, r2
 8003076:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003078:	2300      	movs	r3, #0
 800307a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003082:	b2db      	uxtb	r3, r3
 8003084:	2b20      	cmp	r3, #32
 8003086:	d16d      	bne.n	8003164 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8003088:	68bb      	ldr	r3, [r7, #8]
 800308a:	2b00      	cmp	r3, #0
 800308c:	d002      	beq.n	8003094 <HAL_UART_Transmit+0x2c>
 800308e:	88fb      	ldrh	r3, [r7, #6]
 8003090:	2b00      	cmp	r3, #0
 8003092:	d101      	bne.n	8003098 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003094:	2301      	movs	r3, #1
 8003096:	e066      	b.n	8003166 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	2200      	movs	r2, #0
 800309c:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	2221      	movs	r2, #33	; 0x21
 80030a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80030a6:	f7fe fa13 	bl	80014d0 <HAL_GetTick>
 80030aa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	88fa      	ldrh	r2, [r7, #6]
 80030b0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	88fa      	ldrh	r2, [r7, #6]
 80030b6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	689b      	ldr	r3, [r3, #8]
 80030bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80030c0:	d108      	bne.n	80030d4 <HAL_UART_Transmit+0x6c>
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	691b      	ldr	r3, [r3, #16]
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d104      	bne.n	80030d4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80030ca:	2300      	movs	r3, #0
 80030cc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80030ce:	68bb      	ldr	r3, [r7, #8]
 80030d0:	61bb      	str	r3, [r7, #24]
 80030d2:	e003      	b.n	80030dc <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80030d4:	68bb      	ldr	r3, [r7, #8]
 80030d6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80030d8:	2300      	movs	r3, #0
 80030da:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80030dc:	e02a      	b.n	8003134 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80030de:	683b      	ldr	r3, [r7, #0]
 80030e0:	9300      	str	r3, [sp, #0]
 80030e2:	697b      	ldr	r3, [r7, #20]
 80030e4:	2200      	movs	r2, #0
 80030e6:	2180      	movs	r1, #128	; 0x80
 80030e8:	68f8      	ldr	r0, [r7, #12]
 80030ea:	f000 f840 	bl	800316e <UART_WaitOnFlagUntilTimeout>
 80030ee:	4603      	mov	r3, r0
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d001      	beq.n	80030f8 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 80030f4:	2303      	movs	r3, #3
 80030f6:	e036      	b.n	8003166 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 80030f8:	69fb      	ldr	r3, [r7, #28]
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d10b      	bne.n	8003116 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80030fe:	69bb      	ldr	r3, [r7, #24]
 8003100:	881b      	ldrh	r3, [r3, #0]
 8003102:	461a      	mov	r2, r3
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800310c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800310e:	69bb      	ldr	r3, [r7, #24]
 8003110:	3302      	adds	r3, #2
 8003112:	61bb      	str	r3, [r7, #24]
 8003114:	e007      	b.n	8003126 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003116:	69fb      	ldr	r3, [r7, #28]
 8003118:	781a      	ldrb	r2, [r3, #0]
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003120:	69fb      	ldr	r3, [r7, #28]
 8003122:	3301      	adds	r3, #1
 8003124:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800312a:	b29b      	uxth	r3, r3
 800312c:	3b01      	subs	r3, #1
 800312e:	b29a      	uxth	r2, r3
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003138:	b29b      	uxth	r3, r3
 800313a:	2b00      	cmp	r3, #0
 800313c:	d1cf      	bne.n	80030de <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800313e:	683b      	ldr	r3, [r7, #0]
 8003140:	9300      	str	r3, [sp, #0]
 8003142:	697b      	ldr	r3, [r7, #20]
 8003144:	2200      	movs	r2, #0
 8003146:	2140      	movs	r1, #64	; 0x40
 8003148:	68f8      	ldr	r0, [r7, #12]
 800314a:	f000 f810 	bl	800316e <UART_WaitOnFlagUntilTimeout>
 800314e:	4603      	mov	r3, r0
 8003150:	2b00      	cmp	r3, #0
 8003152:	d001      	beq.n	8003158 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8003154:	2303      	movs	r3, #3
 8003156:	e006      	b.n	8003166 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	2220      	movs	r2, #32
 800315c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8003160:	2300      	movs	r3, #0
 8003162:	e000      	b.n	8003166 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8003164:	2302      	movs	r3, #2
  }
}
 8003166:	4618      	mov	r0, r3
 8003168:	3720      	adds	r7, #32
 800316a:	46bd      	mov	sp, r7
 800316c:	bd80      	pop	{r7, pc}

0800316e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800316e:	b580      	push	{r7, lr}
 8003170:	b090      	sub	sp, #64	; 0x40
 8003172:	af00      	add	r7, sp, #0
 8003174:	60f8      	str	r0, [r7, #12]
 8003176:	60b9      	str	r1, [r7, #8]
 8003178:	603b      	str	r3, [r7, #0]
 800317a:	4613      	mov	r3, r2
 800317c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800317e:	e050      	b.n	8003222 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003180:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003182:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003186:	d04c      	beq.n	8003222 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003188:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800318a:	2b00      	cmp	r3, #0
 800318c:	d007      	beq.n	800319e <UART_WaitOnFlagUntilTimeout+0x30>
 800318e:	f7fe f99f 	bl	80014d0 <HAL_GetTick>
 8003192:	4602      	mov	r2, r0
 8003194:	683b      	ldr	r3, [r7, #0]
 8003196:	1ad3      	subs	r3, r2, r3
 8003198:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800319a:	429a      	cmp	r2, r3
 800319c:	d241      	bcs.n	8003222 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	330c      	adds	r3, #12
 80031a4:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031a8:	e853 3f00 	ldrex	r3, [r3]
 80031ac:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80031ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031b0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80031b4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	330c      	adds	r3, #12
 80031bc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80031be:	637a      	str	r2, [r7, #52]	; 0x34
 80031c0:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031c2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80031c4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80031c6:	e841 2300 	strex	r3, r2, [r1]
 80031ca:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80031cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d1e5      	bne.n	800319e <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	3314      	adds	r3, #20
 80031d8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031da:	697b      	ldr	r3, [r7, #20]
 80031dc:	e853 3f00 	ldrex	r3, [r3]
 80031e0:	613b      	str	r3, [r7, #16]
   return(result);
 80031e2:	693b      	ldr	r3, [r7, #16]
 80031e4:	f023 0301 	bic.w	r3, r3, #1
 80031e8:	63bb      	str	r3, [r7, #56]	; 0x38
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	3314      	adds	r3, #20
 80031f0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80031f2:	623a      	str	r2, [r7, #32]
 80031f4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031f6:	69f9      	ldr	r1, [r7, #28]
 80031f8:	6a3a      	ldr	r2, [r7, #32]
 80031fa:	e841 2300 	strex	r3, r2, [r1]
 80031fe:	61bb      	str	r3, [r7, #24]
   return(result);
 8003200:	69bb      	ldr	r3, [r7, #24]
 8003202:	2b00      	cmp	r3, #0
 8003204:	d1e5      	bne.n	80031d2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	2220      	movs	r2, #32
 800320a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	2220      	movs	r2, #32
 8003212:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	2200      	movs	r2, #0
 800321a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 800321e:	2303      	movs	r3, #3
 8003220:	e00f      	b.n	8003242 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	681a      	ldr	r2, [r3, #0]
 8003228:	68bb      	ldr	r3, [r7, #8]
 800322a:	4013      	ands	r3, r2
 800322c:	68ba      	ldr	r2, [r7, #8]
 800322e:	429a      	cmp	r2, r3
 8003230:	bf0c      	ite	eq
 8003232:	2301      	moveq	r3, #1
 8003234:	2300      	movne	r3, #0
 8003236:	b2db      	uxtb	r3, r3
 8003238:	461a      	mov	r2, r3
 800323a:	79fb      	ldrb	r3, [r7, #7]
 800323c:	429a      	cmp	r2, r3
 800323e:	d09f      	beq.n	8003180 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003240:	2300      	movs	r3, #0
}
 8003242:	4618      	mov	r0, r3
 8003244:	3740      	adds	r7, #64	; 0x40
 8003246:	46bd      	mov	sp, r7
 8003248:	bd80      	pop	{r7, pc}
	...

0800324c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800324c:	b580      	push	{r7, lr}
 800324e:	b084      	sub	sp, #16
 8003250:	af00      	add	r7, sp, #0
 8003252:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	691b      	ldr	r3, [r3, #16]
 800325a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	68da      	ldr	r2, [r3, #12]
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	430a      	orrs	r2, r1
 8003268:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	689a      	ldr	r2, [r3, #8]
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	691b      	ldr	r3, [r3, #16]
 8003272:	431a      	orrs	r2, r3
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	695b      	ldr	r3, [r3, #20]
 8003278:	4313      	orrs	r3, r2
 800327a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	68db      	ldr	r3, [r3, #12]
 8003282:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003286:	f023 030c 	bic.w	r3, r3, #12
 800328a:	687a      	ldr	r2, [r7, #4]
 800328c:	6812      	ldr	r2, [r2, #0]
 800328e:	68b9      	ldr	r1, [r7, #8]
 8003290:	430b      	orrs	r3, r1
 8003292:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	695b      	ldr	r3, [r3, #20]
 800329a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	699a      	ldr	r2, [r3, #24]
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	430a      	orrs	r2, r1
 80032a8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	4a2c      	ldr	r2, [pc, #176]	; (8003360 <UART_SetConfig+0x114>)
 80032b0:	4293      	cmp	r3, r2
 80032b2:	d103      	bne.n	80032bc <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80032b4:	f7fe ff86 	bl	80021c4 <HAL_RCC_GetPCLK2Freq>
 80032b8:	60f8      	str	r0, [r7, #12]
 80032ba:	e002      	b.n	80032c2 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80032bc:	f7fe ff6e 	bl	800219c <HAL_RCC_GetPCLK1Freq>
 80032c0:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80032c2:	68fa      	ldr	r2, [r7, #12]
 80032c4:	4613      	mov	r3, r2
 80032c6:	009b      	lsls	r3, r3, #2
 80032c8:	4413      	add	r3, r2
 80032ca:	009a      	lsls	r2, r3, #2
 80032cc:	441a      	add	r2, r3
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	685b      	ldr	r3, [r3, #4]
 80032d2:	009b      	lsls	r3, r3, #2
 80032d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80032d8:	4a22      	ldr	r2, [pc, #136]	; (8003364 <UART_SetConfig+0x118>)
 80032da:	fba2 2303 	umull	r2, r3, r2, r3
 80032de:	095b      	lsrs	r3, r3, #5
 80032e0:	0119      	lsls	r1, r3, #4
 80032e2:	68fa      	ldr	r2, [r7, #12]
 80032e4:	4613      	mov	r3, r2
 80032e6:	009b      	lsls	r3, r3, #2
 80032e8:	4413      	add	r3, r2
 80032ea:	009a      	lsls	r2, r3, #2
 80032ec:	441a      	add	r2, r3
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	685b      	ldr	r3, [r3, #4]
 80032f2:	009b      	lsls	r3, r3, #2
 80032f4:	fbb2 f2f3 	udiv	r2, r2, r3
 80032f8:	4b1a      	ldr	r3, [pc, #104]	; (8003364 <UART_SetConfig+0x118>)
 80032fa:	fba3 0302 	umull	r0, r3, r3, r2
 80032fe:	095b      	lsrs	r3, r3, #5
 8003300:	2064      	movs	r0, #100	; 0x64
 8003302:	fb00 f303 	mul.w	r3, r0, r3
 8003306:	1ad3      	subs	r3, r2, r3
 8003308:	011b      	lsls	r3, r3, #4
 800330a:	3332      	adds	r3, #50	; 0x32
 800330c:	4a15      	ldr	r2, [pc, #84]	; (8003364 <UART_SetConfig+0x118>)
 800330e:	fba2 2303 	umull	r2, r3, r2, r3
 8003312:	095b      	lsrs	r3, r3, #5
 8003314:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003318:	4419      	add	r1, r3
 800331a:	68fa      	ldr	r2, [r7, #12]
 800331c:	4613      	mov	r3, r2
 800331e:	009b      	lsls	r3, r3, #2
 8003320:	4413      	add	r3, r2
 8003322:	009a      	lsls	r2, r3, #2
 8003324:	441a      	add	r2, r3
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	685b      	ldr	r3, [r3, #4]
 800332a:	009b      	lsls	r3, r3, #2
 800332c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003330:	4b0c      	ldr	r3, [pc, #48]	; (8003364 <UART_SetConfig+0x118>)
 8003332:	fba3 0302 	umull	r0, r3, r3, r2
 8003336:	095b      	lsrs	r3, r3, #5
 8003338:	2064      	movs	r0, #100	; 0x64
 800333a:	fb00 f303 	mul.w	r3, r0, r3
 800333e:	1ad3      	subs	r3, r2, r3
 8003340:	011b      	lsls	r3, r3, #4
 8003342:	3332      	adds	r3, #50	; 0x32
 8003344:	4a07      	ldr	r2, [pc, #28]	; (8003364 <UART_SetConfig+0x118>)
 8003346:	fba2 2303 	umull	r2, r3, r2, r3
 800334a:	095b      	lsrs	r3, r3, #5
 800334c:	f003 020f 	and.w	r2, r3, #15
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	440a      	add	r2, r1
 8003356:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003358:	bf00      	nop
 800335a:	3710      	adds	r7, #16
 800335c:	46bd      	mov	sp, r7
 800335e:	bd80      	pop	{r7, pc}
 8003360:	40013800 	.word	0x40013800
 8003364:	51eb851f 	.word	0x51eb851f

08003368 <__errno>:
 8003368:	4b01      	ldr	r3, [pc, #4]	; (8003370 <__errno+0x8>)
 800336a:	6818      	ldr	r0, [r3, #0]
 800336c:	4770      	bx	lr
 800336e:	bf00      	nop
 8003370:	20000080 	.word	0x20000080

08003374 <__libc_init_array>:
 8003374:	b570      	push	{r4, r5, r6, lr}
 8003376:	2600      	movs	r6, #0
 8003378:	4d0c      	ldr	r5, [pc, #48]	; (80033ac <__libc_init_array+0x38>)
 800337a:	4c0d      	ldr	r4, [pc, #52]	; (80033b0 <__libc_init_array+0x3c>)
 800337c:	1b64      	subs	r4, r4, r5
 800337e:	10a4      	asrs	r4, r4, #2
 8003380:	42a6      	cmp	r6, r4
 8003382:	d109      	bne.n	8003398 <__libc_init_array+0x24>
 8003384:	f000 ff82 	bl	800428c <_init>
 8003388:	2600      	movs	r6, #0
 800338a:	4d0a      	ldr	r5, [pc, #40]	; (80033b4 <__libc_init_array+0x40>)
 800338c:	4c0a      	ldr	r4, [pc, #40]	; (80033b8 <__libc_init_array+0x44>)
 800338e:	1b64      	subs	r4, r4, r5
 8003390:	10a4      	asrs	r4, r4, #2
 8003392:	42a6      	cmp	r6, r4
 8003394:	d105      	bne.n	80033a2 <__libc_init_array+0x2e>
 8003396:	bd70      	pop	{r4, r5, r6, pc}
 8003398:	f855 3b04 	ldr.w	r3, [r5], #4
 800339c:	4798      	blx	r3
 800339e:	3601      	adds	r6, #1
 80033a0:	e7ee      	b.n	8003380 <__libc_init_array+0xc>
 80033a2:	f855 3b04 	ldr.w	r3, [r5], #4
 80033a6:	4798      	blx	r3
 80033a8:	3601      	adds	r6, #1
 80033aa:	e7f2      	b.n	8003392 <__libc_init_array+0x1e>
 80033ac:	080043c0 	.word	0x080043c0
 80033b0:	080043c0 	.word	0x080043c0
 80033b4:	080043c0 	.word	0x080043c0
 80033b8:	080043c4 	.word	0x080043c4

080033bc <memset>:
 80033bc:	4603      	mov	r3, r0
 80033be:	4402      	add	r2, r0
 80033c0:	4293      	cmp	r3, r2
 80033c2:	d100      	bne.n	80033c6 <memset+0xa>
 80033c4:	4770      	bx	lr
 80033c6:	f803 1b01 	strb.w	r1, [r3], #1
 80033ca:	e7f9      	b.n	80033c0 <memset+0x4>

080033cc <iprintf>:
 80033cc:	b40f      	push	{r0, r1, r2, r3}
 80033ce:	4b0a      	ldr	r3, [pc, #40]	; (80033f8 <iprintf+0x2c>)
 80033d0:	b513      	push	{r0, r1, r4, lr}
 80033d2:	681c      	ldr	r4, [r3, #0]
 80033d4:	b124      	cbz	r4, 80033e0 <iprintf+0x14>
 80033d6:	69a3      	ldr	r3, [r4, #24]
 80033d8:	b913      	cbnz	r3, 80033e0 <iprintf+0x14>
 80033da:	4620      	mov	r0, r4
 80033dc:	f000 f866 	bl	80034ac <__sinit>
 80033e0:	ab05      	add	r3, sp, #20
 80033e2:	4620      	mov	r0, r4
 80033e4:	9a04      	ldr	r2, [sp, #16]
 80033e6:	68a1      	ldr	r1, [r4, #8]
 80033e8:	9301      	str	r3, [sp, #4]
 80033ea:	f000 f981 	bl	80036f0 <_vfiprintf_r>
 80033ee:	b002      	add	sp, #8
 80033f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80033f4:	b004      	add	sp, #16
 80033f6:	4770      	bx	lr
 80033f8:	20000080 	.word	0x20000080

080033fc <std>:
 80033fc:	2300      	movs	r3, #0
 80033fe:	b510      	push	{r4, lr}
 8003400:	4604      	mov	r4, r0
 8003402:	e9c0 3300 	strd	r3, r3, [r0]
 8003406:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800340a:	6083      	str	r3, [r0, #8]
 800340c:	8181      	strh	r1, [r0, #12]
 800340e:	6643      	str	r3, [r0, #100]	; 0x64
 8003410:	81c2      	strh	r2, [r0, #14]
 8003412:	6183      	str	r3, [r0, #24]
 8003414:	4619      	mov	r1, r3
 8003416:	2208      	movs	r2, #8
 8003418:	305c      	adds	r0, #92	; 0x5c
 800341a:	f7ff ffcf 	bl	80033bc <memset>
 800341e:	4b05      	ldr	r3, [pc, #20]	; (8003434 <std+0x38>)
 8003420:	6224      	str	r4, [r4, #32]
 8003422:	6263      	str	r3, [r4, #36]	; 0x24
 8003424:	4b04      	ldr	r3, [pc, #16]	; (8003438 <std+0x3c>)
 8003426:	62a3      	str	r3, [r4, #40]	; 0x28
 8003428:	4b04      	ldr	r3, [pc, #16]	; (800343c <std+0x40>)
 800342a:	62e3      	str	r3, [r4, #44]	; 0x2c
 800342c:	4b04      	ldr	r3, [pc, #16]	; (8003440 <std+0x44>)
 800342e:	6323      	str	r3, [r4, #48]	; 0x30
 8003430:	bd10      	pop	{r4, pc}
 8003432:	bf00      	nop
 8003434:	08003c9d 	.word	0x08003c9d
 8003438:	08003cbf 	.word	0x08003cbf
 800343c:	08003cf7 	.word	0x08003cf7
 8003440:	08003d1b 	.word	0x08003d1b

08003444 <_cleanup_r>:
 8003444:	4901      	ldr	r1, [pc, #4]	; (800344c <_cleanup_r+0x8>)
 8003446:	f000 b8af 	b.w	80035a8 <_fwalk_reent>
 800344a:	bf00      	nop
 800344c:	08003ff5 	.word	0x08003ff5

08003450 <__sfmoreglue>:
 8003450:	b570      	push	{r4, r5, r6, lr}
 8003452:	2568      	movs	r5, #104	; 0x68
 8003454:	1e4a      	subs	r2, r1, #1
 8003456:	4355      	muls	r5, r2
 8003458:	460e      	mov	r6, r1
 800345a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800345e:	f000 f8c5 	bl	80035ec <_malloc_r>
 8003462:	4604      	mov	r4, r0
 8003464:	b140      	cbz	r0, 8003478 <__sfmoreglue+0x28>
 8003466:	2100      	movs	r1, #0
 8003468:	e9c0 1600 	strd	r1, r6, [r0]
 800346c:	300c      	adds	r0, #12
 800346e:	60a0      	str	r0, [r4, #8]
 8003470:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8003474:	f7ff ffa2 	bl	80033bc <memset>
 8003478:	4620      	mov	r0, r4
 800347a:	bd70      	pop	{r4, r5, r6, pc}

0800347c <__sfp_lock_acquire>:
 800347c:	4801      	ldr	r0, [pc, #4]	; (8003484 <__sfp_lock_acquire+0x8>)
 800347e:	f000 b8b3 	b.w	80035e8 <__retarget_lock_acquire_recursive>
 8003482:	bf00      	nop
 8003484:	200002b4 	.word	0x200002b4

08003488 <__sfp_lock_release>:
 8003488:	4801      	ldr	r0, [pc, #4]	; (8003490 <__sfp_lock_release+0x8>)
 800348a:	f000 b8ae 	b.w	80035ea <__retarget_lock_release_recursive>
 800348e:	bf00      	nop
 8003490:	200002b4 	.word	0x200002b4

08003494 <__sinit_lock_acquire>:
 8003494:	4801      	ldr	r0, [pc, #4]	; (800349c <__sinit_lock_acquire+0x8>)
 8003496:	f000 b8a7 	b.w	80035e8 <__retarget_lock_acquire_recursive>
 800349a:	bf00      	nop
 800349c:	200002af 	.word	0x200002af

080034a0 <__sinit_lock_release>:
 80034a0:	4801      	ldr	r0, [pc, #4]	; (80034a8 <__sinit_lock_release+0x8>)
 80034a2:	f000 b8a2 	b.w	80035ea <__retarget_lock_release_recursive>
 80034a6:	bf00      	nop
 80034a8:	200002af 	.word	0x200002af

080034ac <__sinit>:
 80034ac:	b510      	push	{r4, lr}
 80034ae:	4604      	mov	r4, r0
 80034b0:	f7ff fff0 	bl	8003494 <__sinit_lock_acquire>
 80034b4:	69a3      	ldr	r3, [r4, #24]
 80034b6:	b11b      	cbz	r3, 80034c0 <__sinit+0x14>
 80034b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80034bc:	f7ff bff0 	b.w	80034a0 <__sinit_lock_release>
 80034c0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80034c4:	6523      	str	r3, [r4, #80]	; 0x50
 80034c6:	4b13      	ldr	r3, [pc, #76]	; (8003514 <__sinit+0x68>)
 80034c8:	4a13      	ldr	r2, [pc, #76]	; (8003518 <__sinit+0x6c>)
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	62a2      	str	r2, [r4, #40]	; 0x28
 80034ce:	42a3      	cmp	r3, r4
 80034d0:	bf08      	it	eq
 80034d2:	2301      	moveq	r3, #1
 80034d4:	4620      	mov	r0, r4
 80034d6:	bf08      	it	eq
 80034d8:	61a3      	streq	r3, [r4, #24]
 80034da:	f000 f81f 	bl	800351c <__sfp>
 80034de:	6060      	str	r0, [r4, #4]
 80034e0:	4620      	mov	r0, r4
 80034e2:	f000 f81b 	bl	800351c <__sfp>
 80034e6:	60a0      	str	r0, [r4, #8]
 80034e8:	4620      	mov	r0, r4
 80034ea:	f000 f817 	bl	800351c <__sfp>
 80034ee:	2200      	movs	r2, #0
 80034f0:	2104      	movs	r1, #4
 80034f2:	60e0      	str	r0, [r4, #12]
 80034f4:	6860      	ldr	r0, [r4, #4]
 80034f6:	f7ff ff81 	bl	80033fc <std>
 80034fa:	2201      	movs	r2, #1
 80034fc:	2109      	movs	r1, #9
 80034fe:	68a0      	ldr	r0, [r4, #8]
 8003500:	f7ff ff7c 	bl	80033fc <std>
 8003504:	2202      	movs	r2, #2
 8003506:	2112      	movs	r1, #18
 8003508:	68e0      	ldr	r0, [r4, #12]
 800350a:	f7ff ff77 	bl	80033fc <std>
 800350e:	2301      	movs	r3, #1
 8003510:	61a3      	str	r3, [r4, #24]
 8003512:	e7d1      	b.n	80034b8 <__sinit+0xc>
 8003514:	08004328 	.word	0x08004328
 8003518:	08003445 	.word	0x08003445

0800351c <__sfp>:
 800351c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800351e:	4607      	mov	r7, r0
 8003520:	f7ff ffac 	bl	800347c <__sfp_lock_acquire>
 8003524:	4b1e      	ldr	r3, [pc, #120]	; (80035a0 <__sfp+0x84>)
 8003526:	681e      	ldr	r6, [r3, #0]
 8003528:	69b3      	ldr	r3, [r6, #24]
 800352a:	b913      	cbnz	r3, 8003532 <__sfp+0x16>
 800352c:	4630      	mov	r0, r6
 800352e:	f7ff ffbd 	bl	80034ac <__sinit>
 8003532:	3648      	adds	r6, #72	; 0x48
 8003534:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8003538:	3b01      	subs	r3, #1
 800353a:	d503      	bpl.n	8003544 <__sfp+0x28>
 800353c:	6833      	ldr	r3, [r6, #0]
 800353e:	b30b      	cbz	r3, 8003584 <__sfp+0x68>
 8003540:	6836      	ldr	r6, [r6, #0]
 8003542:	e7f7      	b.n	8003534 <__sfp+0x18>
 8003544:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8003548:	b9d5      	cbnz	r5, 8003580 <__sfp+0x64>
 800354a:	4b16      	ldr	r3, [pc, #88]	; (80035a4 <__sfp+0x88>)
 800354c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8003550:	60e3      	str	r3, [r4, #12]
 8003552:	6665      	str	r5, [r4, #100]	; 0x64
 8003554:	f000 f847 	bl	80035e6 <__retarget_lock_init_recursive>
 8003558:	f7ff ff96 	bl	8003488 <__sfp_lock_release>
 800355c:	2208      	movs	r2, #8
 800355e:	4629      	mov	r1, r5
 8003560:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8003564:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8003568:	6025      	str	r5, [r4, #0]
 800356a:	61a5      	str	r5, [r4, #24]
 800356c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8003570:	f7ff ff24 	bl	80033bc <memset>
 8003574:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8003578:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800357c:	4620      	mov	r0, r4
 800357e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003580:	3468      	adds	r4, #104	; 0x68
 8003582:	e7d9      	b.n	8003538 <__sfp+0x1c>
 8003584:	2104      	movs	r1, #4
 8003586:	4638      	mov	r0, r7
 8003588:	f7ff ff62 	bl	8003450 <__sfmoreglue>
 800358c:	4604      	mov	r4, r0
 800358e:	6030      	str	r0, [r6, #0]
 8003590:	2800      	cmp	r0, #0
 8003592:	d1d5      	bne.n	8003540 <__sfp+0x24>
 8003594:	f7ff ff78 	bl	8003488 <__sfp_lock_release>
 8003598:	230c      	movs	r3, #12
 800359a:	603b      	str	r3, [r7, #0]
 800359c:	e7ee      	b.n	800357c <__sfp+0x60>
 800359e:	bf00      	nop
 80035a0:	08004328 	.word	0x08004328
 80035a4:	ffff0001 	.word	0xffff0001

080035a8 <_fwalk_reent>:
 80035a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80035ac:	4606      	mov	r6, r0
 80035ae:	4688      	mov	r8, r1
 80035b0:	2700      	movs	r7, #0
 80035b2:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80035b6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80035ba:	f1b9 0901 	subs.w	r9, r9, #1
 80035be:	d505      	bpl.n	80035cc <_fwalk_reent+0x24>
 80035c0:	6824      	ldr	r4, [r4, #0]
 80035c2:	2c00      	cmp	r4, #0
 80035c4:	d1f7      	bne.n	80035b6 <_fwalk_reent+0xe>
 80035c6:	4638      	mov	r0, r7
 80035c8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80035cc:	89ab      	ldrh	r3, [r5, #12]
 80035ce:	2b01      	cmp	r3, #1
 80035d0:	d907      	bls.n	80035e2 <_fwalk_reent+0x3a>
 80035d2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80035d6:	3301      	adds	r3, #1
 80035d8:	d003      	beq.n	80035e2 <_fwalk_reent+0x3a>
 80035da:	4629      	mov	r1, r5
 80035dc:	4630      	mov	r0, r6
 80035de:	47c0      	blx	r8
 80035e0:	4307      	orrs	r7, r0
 80035e2:	3568      	adds	r5, #104	; 0x68
 80035e4:	e7e9      	b.n	80035ba <_fwalk_reent+0x12>

080035e6 <__retarget_lock_init_recursive>:
 80035e6:	4770      	bx	lr

080035e8 <__retarget_lock_acquire_recursive>:
 80035e8:	4770      	bx	lr

080035ea <__retarget_lock_release_recursive>:
 80035ea:	4770      	bx	lr

080035ec <_malloc_r>:
 80035ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80035ee:	1ccd      	adds	r5, r1, #3
 80035f0:	f025 0503 	bic.w	r5, r5, #3
 80035f4:	3508      	adds	r5, #8
 80035f6:	2d0c      	cmp	r5, #12
 80035f8:	bf38      	it	cc
 80035fa:	250c      	movcc	r5, #12
 80035fc:	2d00      	cmp	r5, #0
 80035fe:	4606      	mov	r6, r0
 8003600:	db01      	blt.n	8003606 <_malloc_r+0x1a>
 8003602:	42a9      	cmp	r1, r5
 8003604:	d903      	bls.n	800360e <_malloc_r+0x22>
 8003606:	230c      	movs	r3, #12
 8003608:	6033      	str	r3, [r6, #0]
 800360a:	2000      	movs	r0, #0
 800360c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800360e:	f000 fdb1 	bl	8004174 <__malloc_lock>
 8003612:	4921      	ldr	r1, [pc, #132]	; (8003698 <_malloc_r+0xac>)
 8003614:	680a      	ldr	r2, [r1, #0]
 8003616:	4614      	mov	r4, r2
 8003618:	b99c      	cbnz	r4, 8003642 <_malloc_r+0x56>
 800361a:	4f20      	ldr	r7, [pc, #128]	; (800369c <_malloc_r+0xb0>)
 800361c:	683b      	ldr	r3, [r7, #0]
 800361e:	b923      	cbnz	r3, 800362a <_malloc_r+0x3e>
 8003620:	4621      	mov	r1, r4
 8003622:	4630      	mov	r0, r6
 8003624:	f000 fb2a 	bl	8003c7c <_sbrk_r>
 8003628:	6038      	str	r0, [r7, #0]
 800362a:	4629      	mov	r1, r5
 800362c:	4630      	mov	r0, r6
 800362e:	f000 fb25 	bl	8003c7c <_sbrk_r>
 8003632:	1c43      	adds	r3, r0, #1
 8003634:	d123      	bne.n	800367e <_malloc_r+0x92>
 8003636:	230c      	movs	r3, #12
 8003638:	4630      	mov	r0, r6
 800363a:	6033      	str	r3, [r6, #0]
 800363c:	f000 fda0 	bl	8004180 <__malloc_unlock>
 8003640:	e7e3      	b.n	800360a <_malloc_r+0x1e>
 8003642:	6823      	ldr	r3, [r4, #0]
 8003644:	1b5b      	subs	r3, r3, r5
 8003646:	d417      	bmi.n	8003678 <_malloc_r+0x8c>
 8003648:	2b0b      	cmp	r3, #11
 800364a:	d903      	bls.n	8003654 <_malloc_r+0x68>
 800364c:	6023      	str	r3, [r4, #0]
 800364e:	441c      	add	r4, r3
 8003650:	6025      	str	r5, [r4, #0]
 8003652:	e004      	b.n	800365e <_malloc_r+0x72>
 8003654:	6863      	ldr	r3, [r4, #4]
 8003656:	42a2      	cmp	r2, r4
 8003658:	bf0c      	ite	eq
 800365a:	600b      	streq	r3, [r1, #0]
 800365c:	6053      	strne	r3, [r2, #4]
 800365e:	4630      	mov	r0, r6
 8003660:	f000 fd8e 	bl	8004180 <__malloc_unlock>
 8003664:	f104 000b 	add.w	r0, r4, #11
 8003668:	1d23      	adds	r3, r4, #4
 800366a:	f020 0007 	bic.w	r0, r0, #7
 800366e:	1ac2      	subs	r2, r0, r3
 8003670:	d0cc      	beq.n	800360c <_malloc_r+0x20>
 8003672:	1a1b      	subs	r3, r3, r0
 8003674:	50a3      	str	r3, [r4, r2]
 8003676:	e7c9      	b.n	800360c <_malloc_r+0x20>
 8003678:	4622      	mov	r2, r4
 800367a:	6864      	ldr	r4, [r4, #4]
 800367c:	e7cc      	b.n	8003618 <_malloc_r+0x2c>
 800367e:	1cc4      	adds	r4, r0, #3
 8003680:	f024 0403 	bic.w	r4, r4, #3
 8003684:	42a0      	cmp	r0, r4
 8003686:	d0e3      	beq.n	8003650 <_malloc_r+0x64>
 8003688:	1a21      	subs	r1, r4, r0
 800368a:	4630      	mov	r0, r6
 800368c:	f000 faf6 	bl	8003c7c <_sbrk_r>
 8003690:	3001      	adds	r0, #1
 8003692:	d1dd      	bne.n	8003650 <_malloc_r+0x64>
 8003694:	e7cf      	b.n	8003636 <_malloc_r+0x4a>
 8003696:	bf00      	nop
 8003698:	20000174 	.word	0x20000174
 800369c:	20000178 	.word	0x20000178

080036a0 <__sfputc_r>:
 80036a0:	6893      	ldr	r3, [r2, #8]
 80036a2:	b410      	push	{r4}
 80036a4:	3b01      	subs	r3, #1
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	6093      	str	r3, [r2, #8]
 80036aa:	da07      	bge.n	80036bc <__sfputc_r+0x1c>
 80036ac:	6994      	ldr	r4, [r2, #24]
 80036ae:	42a3      	cmp	r3, r4
 80036b0:	db01      	blt.n	80036b6 <__sfputc_r+0x16>
 80036b2:	290a      	cmp	r1, #10
 80036b4:	d102      	bne.n	80036bc <__sfputc_r+0x1c>
 80036b6:	bc10      	pop	{r4}
 80036b8:	f000 bb34 	b.w	8003d24 <__swbuf_r>
 80036bc:	6813      	ldr	r3, [r2, #0]
 80036be:	1c58      	adds	r0, r3, #1
 80036c0:	6010      	str	r0, [r2, #0]
 80036c2:	7019      	strb	r1, [r3, #0]
 80036c4:	4608      	mov	r0, r1
 80036c6:	bc10      	pop	{r4}
 80036c8:	4770      	bx	lr

080036ca <__sfputs_r>:
 80036ca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80036cc:	4606      	mov	r6, r0
 80036ce:	460f      	mov	r7, r1
 80036d0:	4614      	mov	r4, r2
 80036d2:	18d5      	adds	r5, r2, r3
 80036d4:	42ac      	cmp	r4, r5
 80036d6:	d101      	bne.n	80036dc <__sfputs_r+0x12>
 80036d8:	2000      	movs	r0, #0
 80036da:	e007      	b.n	80036ec <__sfputs_r+0x22>
 80036dc:	463a      	mov	r2, r7
 80036de:	4630      	mov	r0, r6
 80036e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80036e4:	f7ff ffdc 	bl	80036a0 <__sfputc_r>
 80036e8:	1c43      	adds	r3, r0, #1
 80036ea:	d1f3      	bne.n	80036d4 <__sfputs_r+0xa>
 80036ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080036f0 <_vfiprintf_r>:
 80036f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80036f4:	460d      	mov	r5, r1
 80036f6:	4614      	mov	r4, r2
 80036f8:	4698      	mov	r8, r3
 80036fa:	4606      	mov	r6, r0
 80036fc:	b09d      	sub	sp, #116	; 0x74
 80036fe:	b118      	cbz	r0, 8003708 <_vfiprintf_r+0x18>
 8003700:	6983      	ldr	r3, [r0, #24]
 8003702:	b90b      	cbnz	r3, 8003708 <_vfiprintf_r+0x18>
 8003704:	f7ff fed2 	bl	80034ac <__sinit>
 8003708:	4b89      	ldr	r3, [pc, #548]	; (8003930 <_vfiprintf_r+0x240>)
 800370a:	429d      	cmp	r5, r3
 800370c:	d11b      	bne.n	8003746 <_vfiprintf_r+0x56>
 800370e:	6875      	ldr	r5, [r6, #4]
 8003710:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003712:	07d9      	lsls	r1, r3, #31
 8003714:	d405      	bmi.n	8003722 <_vfiprintf_r+0x32>
 8003716:	89ab      	ldrh	r3, [r5, #12]
 8003718:	059a      	lsls	r2, r3, #22
 800371a:	d402      	bmi.n	8003722 <_vfiprintf_r+0x32>
 800371c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800371e:	f7ff ff63 	bl	80035e8 <__retarget_lock_acquire_recursive>
 8003722:	89ab      	ldrh	r3, [r5, #12]
 8003724:	071b      	lsls	r3, r3, #28
 8003726:	d501      	bpl.n	800372c <_vfiprintf_r+0x3c>
 8003728:	692b      	ldr	r3, [r5, #16]
 800372a:	b9eb      	cbnz	r3, 8003768 <_vfiprintf_r+0x78>
 800372c:	4629      	mov	r1, r5
 800372e:	4630      	mov	r0, r6
 8003730:	f000 fb5c 	bl	8003dec <__swsetup_r>
 8003734:	b1c0      	cbz	r0, 8003768 <_vfiprintf_r+0x78>
 8003736:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003738:	07dc      	lsls	r4, r3, #31
 800373a:	d50e      	bpl.n	800375a <_vfiprintf_r+0x6a>
 800373c:	f04f 30ff 	mov.w	r0, #4294967295
 8003740:	b01d      	add	sp, #116	; 0x74
 8003742:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003746:	4b7b      	ldr	r3, [pc, #492]	; (8003934 <_vfiprintf_r+0x244>)
 8003748:	429d      	cmp	r5, r3
 800374a:	d101      	bne.n	8003750 <_vfiprintf_r+0x60>
 800374c:	68b5      	ldr	r5, [r6, #8]
 800374e:	e7df      	b.n	8003710 <_vfiprintf_r+0x20>
 8003750:	4b79      	ldr	r3, [pc, #484]	; (8003938 <_vfiprintf_r+0x248>)
 8003752:	429d      	cmp	r5, r3
 8003754:	bf08      	it	eq
 8003756:	68f5      	ldreq	r5, [r6, #12]
 8003758:	e7da      	b.n	8003710 <_vfiprintf_r+0x20>
 800375a:	89ab      	ldrh	r3, [r5, #12]
 800375c:	0598      	lsls	r0, r3, #22
 800375e:	d4ed      	bmi.n	800373c <_vfiprintf_r+0x4c>
 8003760:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003762:	f7ff ff42 	bl	80035ea <__retarget_lock_release_recursive>
 8003766:	e7e9      	b.n	800373c <_vfiprintf_r+0x4c>
 8003768:	2300      	movs	r3, #0
 800376a:	9309      	str	r3, [sp, #36]	; 0x24
 800376c:	2320      	movs	r3, #32
 800376e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003772:	2330      	movs	r3, #48	; 0x30
 8003774:	f04f 0901 	mov.w	r9, #1
 8003778:	f8cd 800c 	str.w	r8, [sp, #12]
 800377c:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 800393c <_vfiprintf_r+0x24c>
 8003780:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003784:	4623      	mov	r3, r4
 8003786:	469a      	mov	sl, r3
 8003788:	f813 2b01 	ldrb.w	r2, [r3], #1
 800378c:	b10a      	cbz	r2, 8003792 <_vfiprintf_r+0xa2>
 800378e:	2a25      	cmp	r2, #37	; 0x25
 8003790:	d1f9      	bne.n	8003786 <_vfiprintf_r+0x96>
 8003792:	ebba 0b04 	subs.w	fp, sl, r4
 8003796:	d00b      	beq.n	80037b0 <_vfiprintf_r+0xc0>
 8003798:	465b      	mov	r3, fp
 800379a:	4622      	mov	r2, r4
 800379c:	4629      	mov	r1, r5
 800379e:	4630      	mov	r0, r6
 80037a0:	f7ff ff93 	bl	80036ca <__sfputs_r>
 80037a4:	3001      	adds	r0, #1
 80037a6:	f000 80aa 	beq.w	80038fe <_vfiprintf_r+0x20e>
 80037aa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80037ac:	445a      	add	r2, fp
 80037ae:	9209      	str	r2, [sp, #36]	; 0x24
 80037b0:	f89a 3000 	ldrb.w	r3, [sl]
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	f000 80a2 	beq.w	80038fe <_vfiprintf_r+0x20e>
 80037ba:	2300      	movs	r3, #0
 80037bc:	f04f 32ff 	mov.w	r2, #4294967295
 80037c0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80037c4:	f10a 0a01 	add.w	sl, sl, #1
 80037c8:	9304      	str	r3, [sp, #16]
 80037ca:	9307      	str	r3, [sp, #28]
 80037cc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80037d0:	931a      	str	r3, [sp, #104]	; 0x68
 80037d2:	4654      	mov	r4, sl
 80037d4:	2205      	movs	r2, #5
 80037d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80037da:	4858      	ldr	r0, [pc, #352]	; (800393c <_vfiprintf_r+0x24c>)
 80037dc:	f000 fcbc 	bl	8004158 <memchr>
 80037e0:	9a04      	ldr	r2, [sp, #16]
 80037e2:	b9d8      	cbnz	r0, 800381c <_vfiprintf_r+0x12c>
 80037e4:	06d1      	lsls	r1, r2, #27
 80037e6:	bf44      	itt	mi
 80037e8:	2320      	movmi	r3, #32
 80037ea:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80037ee:	0713      	lsls	r3, r2, #28
 80037f0:	bf44      	itt	mi
 80037f2:	232b      	movmi	r3, #43	; 0x2b
 80037f4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80037f8:	f89a 3000 	ldrb.w	r3, [sl]
 80037fc:	2b2a      	cmp	r3, #42	; 0x2a
 80037fe:	d015      	beq.n	800382c <_vfiprintf_r+0x13c>
 8003800:	4654      	mov	r4, sl
 8003802:	2000      	movs	r0, #0
 8003804:	f04f 0c0a 	mov.w	ip, #10
 8003808:	9a07      	ldr	r2, [sp, #28]
 800380a:	4621      	mov	r1, r4
 800380c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003810:	3b30      	subs	r3, #48	; 0x30
 8003812:	2b09      	cmp	r3, #9
 8003814:	d94e      	bls.n	80038b4 <_vfiprintf_r+0x1c4>
 8003816:	b1b0      	cbz	r0, 8003846 <_vfiprintf_r+0x156>
 8003818:	9207      	str	r2, [sp, #28]
 800381a:	e014      	b.n	8003846 <_vfiprintf_r+0x156>
 800381c:	eba0 0308 	sub.w	r3, r0, r8
 8003820:	fa09 f303 	lsl.w	r3, r9, r3
 8003824:	4313      	orrs	r3, r2
 8003826:	46a2      	mov	sl, r4
 8003828:	9304      	str	r3, [sp, #16]
 800382a:	e7d2      	b.n	80037d2 <_vfiprintf_r+0xe2>
 800382c:	9b03      	ldr	r3, [sp, #12]
 800382e:	1d19      	adds	r1, r3, #4
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	9103      	str	r1, [sp, #12]
 8003834:	2b00      	cmp	r3, #0
 8003836:	bfbb      	ittet	lt
 8003838:	425b      	neglt	r3, r3
 800383a:	f042 0202 	orrlt.w	r2, r2, #2
 800383e:	9307      	strge	r3, [sp, #28]
 8003840:	9307      	strlt	r3, [sp, #28]
 8003842:	bfb8      	it	lt
 8003844:	9204      	strlt	r2, [sp, #16]
 8003846:	7823      	ldrb	r3, [r4, #0]
 8003848:	2b2e      	cmp	r3, #46	; 0x2e
 800384a:	d10c      	bne.n	8003866 <_vfiprintf_r+0x176>
 800384c:	7863      	ldrb	r3, [r4, #1]
 800384e:	2b2a      	cmp	r3, #42	; 0x2a
 8003850:	d135      	bne.n	80038be <_vfiprintf_r+0x1ce>
 8003852:	9b03      	ldr	r3, [sp, #12]
 8003854:	3402      	adds	r4, #2
 8003856:	1d1a      	adds	r2, r3, #4
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	9203      	str	r2, [sp, #12]
 800385c:	2b00      	cmp	r3, #0
 800385e:	bfb8      	it	lt
 8003860:	f04f 33ff 	movlt.w	r3, #4294967295
 8003864:	9305      	str	r3, [sp, #20]
 8003866:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800394c <_vfiprintf_r+0x25c>
 800386a:	2203      	movs	r2, #3
 800386c:	4650      	mov	r0, sl
 800386e:	7821      	ldrb	r1, [r4, #0]
 8003870:	f000 fc72 	bl	8004158 <memchr>
 8003874:	b140      	cbz	r0, 8003888 <_vfiprintf_r+0x198>
 8003876:	2340      	movs	r3, #64	; 0x40
 8003878:	eba0 000a 	sub.w	r0, r0, sl
 800387c:	fa03 f000 	lsl.w	r0, r3, r0
 8003880:	9b04      	ldr	r3, [sp, #16]
 8003882:	3401      	adds	r4, #1
 8003884:	4303      	orrs	r3, r0
 8003886:	9304      	str	r3, [sp, #16]
 8003888:	f814 1b01 	ldrb.w	r1, [r4], #1
 800388c:	2206      	movs	r2, #6
 800388e:	482c      	ldr	r0, [pc, #176]	; (8003940 <_vfiprintf_r+0x250>)
 8003890:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003894:	f000 fc60 	bl	8004158 <memchr>
 8003898:	2800      	cmp	r0, #0
 800389a:	d03f      	beq.n	800391c <_vfiprintf_r+0x22c>
 800389c:	4b29      	ldr	r3, [pc, #164]	; (8003944 <_vfiprintf_r+0x254>)
 800389e:	bb1b      	cbnz	r3, 80038e8 <_vfiprintf_r+0x1f8>
 80038a0:	9b03      	ldr	r3, [sp, #12]
 80038a2:	3307      	adds	r3, #7
 80038a4:	f023 0307 	bic.w	r3, r3, #7
 80038a8:	3308      	adds	r3, #8
 80038aa:	9303      	str	r3, [sp, #12]
 80038ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80038ae:	443b      	add	r3, r7
 80038b0:	9309      	str	r3, [sp, #36]	; 0x24
 80038b2:	e767      	b.n	8003784 <_vfiprintf_r+0x94>
 80038b4:	460c      	mov	r4, r1
 80038b6:	2001      	movs	r0, #1
 80038b8:	fb0c 3202 	mla	r2, ip, r2, r3
 80038bc:	e7a5      	b.n	800380a <_vfiprintf_r+0x11a>
 80038be:	2300      	movs	r3, #0
 80038c0:	f04f 0c0a 	mov.w	ip, #10
 80038c4:	4619      	mov	r1, r3
 80038c6:	3401      	adds	r4, #1
 80038c8:	9305      	str	r3, [sp, #20]
 80038ca:	4620      	mov	r0, r4
 80038cc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80038d0:	3a30      	subs	r2, #48	; 0x30
 80038d2:	2a09      	cmp	r2, #9
 80038d4:	d903      	bls.n	80038de <_vfiprintf_r+0x1ee>
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d0c5      	beq.n	8003866 <_vfiprintf_r+0x176>
 80038da:	9105      	str	r1, [sp, #20]
 80038dc:	e7c3      	b.n	8003866 <_vfiprintf_r+0x176>
 80038de:	4604      	mov	r4, r0
 80038e0:	2301      	movs	r3, #1
 80038e2:	fb0c 2101 	mla	r1, ip, r1, r2
 80038e6:	e7f0      	b.n	80038ca <_vfiprintf_r+0x1da>
 80038e8:	ab03      	add	r3, sp, #12
 80038ea:	9300      	str	r3, [sp, #0]
 80038ec:	462a      	mov	r2, r5
 80038ee:	4630      	mov	r0, r6
 80038f0:	4b15      	ldr	r3, [pc, #84]	; (8003948 <_vfiprintf_r+0x258>)
 80038f2:	a904      	add	r1, sp, #16
 80038f4:	f3af 8000 	nop.w
 80038f8:	4607      	mov	r7, r0
 80038fa:	1c78      	adds	r0, r7, #1
 80038fc:	d1d6      	bne.n	80038ac <_vfiprintf_r+0x1bc>
 80038fe:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003900:	07d9      	lsls	r1, r3, #31
 8003902:	d405      	bmi.n	8003910 <_vfiprintf_r+0x220>
 8003904:	89ab      	ldrh	r3, [r5, #12]
 8003906:	059a      	lsls	r2, r3, #22
 8003908:	d402      	bmi.n	8003910 <_vfiprintf_r+0x220>
 800390a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800390c:	f7ff fe6d 	bl	80035ea <__retarget_lock_release_recursive>
 8003910:	89ab      	ldrh	r3, [r5, #12]
 8003912:	065b      	lsls	r3, r3, #25
 8003914:	f53f af12 	bmi.w	800373c <_vfiprintf_r+0x4c>
 8003918:	9809      	ldr	r0, [sp, #36]	; 0x24
 800391a:	e711      	b.n	8003740 <_vfiprintf_r+0x50>
 800391c:	ab03      	add	r3, sp, #12
 800391e:	9300      	str	r3, [sp, #0]
 8003920:	462a      	mov	r2, r5
 8003922:	4630      	mov	r0, r6
 8003924:	4b08      	ldr	r3, [pc, #32]	; (8003948 <_vfiprintf_r+0x258>)
 8003926:	a904      	add	r1, sp, #16
 8003928:	f000 f882 	bl	8003a30 <_printf_i>
 800392c:	e7e4      	b.n	80038f8 <_vfiprintf_r+0x208>
 800392e:	bf00      	nop
 8003930:	0800434c 	.word	0x0800434c
 8003934:	0800436c 	.word	0x0800436c
 8003938:	0800432c 	.word	0x0800432c
 800393c:	0800438c 	.word	0x0800438c
 8003940:	08004396 	.word	0x08004396
 8003944:	00000000 	.word	0x00000000
 8003948:	080036cb 	.word	0x080036cb
 800394c:	08004392 	.word	0x08004392

08003950 <_printf_common>:
 8003950:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003954:	4616      	mov	r6, r2
 8003956:	4699      	mov	r9, r3
 8003958:	688a      	ldr	r2, [r1, #8]
 800395a:	690b      	ldr	r3, [r1, #16]
 800395c:	4607      	mov	r7, r0
 800395e:	4293      	cmp	r3, r2
 8003960:	bfb8      	it	lt
 8003962:	4613      	movlt	r3, r2
 8003964:	6033      	str	r3, [r6, #0]
 8003966:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800396a:	460c      	mov	r4, r1
 800396c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003970:	b10a      	cbz	r2, 8003976 <_printf_common+0x26>
 8003972:	3301      	adds	r3, #1
 8003974:	6033      	str	r3, [r6, #0]
 8003976:	6823      	ldr	r3, [r4, #0]
 8003978:	0699      	lsls	r1, r3, #26
 800397a:	bf42      	ittt	mi
 800397c:	6833      	ldrmi	r3, [r6, #0]
 800397e:	3302      	addmi	r3, #2
 8003980:	6033      	strmi	r3, [r6, #0]
 8003982:	6825      	ldr	r5, [r4, #0]
 8003984:	f015 0506 	ands.w	r5, r5, #6
 8003988:	d106      	bne.n	8003998 <_printf_common+0x48>
 800398a:	f104 0a19 	add.w	sl, r4, #25
 800398e:	68e3      	ldr	r3, [r4, #12]
 8003990:	6832      	ldr	r2, [r6, #0]
 8003992:	1a9b      	subs	r3, r3, r2
 8003994:	42ab      	cmp	r3, r5
 8003996:	dc28      	bgt.n	80039ea <_printf_common+0x9a>
 8003998:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800399c:	1e13      	subs	r3, r2, #0
 800399e:	6822      	ldr	r2, [r4, #0]
 80039a0:	bf18      	it	ne
 80039a2:	2301      	movne	r3, #1
 80039a4:	0692      	lsls	r2, r2, #26
 80039a6:	d42d      	bmi.n	8003a04 <_printf_common+0xb4>
 80039a8:	4649      	mov	r1, r9
 80039aa:	4638      	mov	r0, r7
 80039ac:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80039b0:	47c0      	blx	r8
 80039b2:	3001      	adds	r0, #1
 80039b4:	d020      	beq.n	80039f8 <_printf_common+0xa8>
 80039b6:	6823      	ldr	r3, [r4, #0]
 80039b8:	68e5      	ldr	r5, [r4, #12]
 80039ba:	f003 0306 	and.w	r3, r3, #6
 80039be:	2b04      	cmp	r3, #4
 80039c0:	bf18      	it	ne
 80039c2:	2500      	movne	r5, #0
 80039c4:	6832      	ldr	r2, [r6, #0]
 80039c6:	f04f 0600 	mov.w	r6, #0
 80039ca:	68a3      	ldr	r3, [r4, #8]
 80039cc:	bf08      	it	eq
 80039ce:	1aad      	subeq	r5, r5, r2
 80039d0:	6922      	ldr	r2, [r4, #16]
 80039d2:	bf08      	it	eq
 80039d4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80039d8:	4293      	cmp	r3, r2
 80039da:	bfc4      	itt	gt
 80039dc:	1a9b      	subgt	r3, r3, r2
 80039de:	18ed      	addgt	r5, r5, r3
 80039e0:	341a      	adds	r4, #26
 80039e2:	42b5      	cmp	r5, r6
 80039e4:	d11a      	bne.n	8003a1c <_printf_common+0xcc>
 80039e6:	2000      	movs	r0, #0
 80039e8:	e008      	b.n	80039fc <_printf_common+0xac>
 80039ea:	2301      	movs	r3, #1
 80039ec:	4652      	mov	r2, sl
 80039ee:	4649      	mov	r1, r9
 80039f0:	4638      	mov	r0, r7
 80039f2:	47c0      	blx	r8
 80039f4:	3001      	adds	r0, #1
 80039f6:	d103      	bne.n	8003a00 <_printf_common+0xb0>
 80039f8:	f04f 30ff 	mov.w	r0, #4294967295
 80039fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003a00:	3501      	adds	r5, #1
 8003a02:	e7c4      	b.n	800398e <_printf_common+0x3e>
 8003a04:	2030      	movs	r0, #48	; 0x30
 8003a06:	18e1      	adds	r1, r4, r3
 8003a08:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003a0c:	1c5a      	adds	r2, r3, #1
 8003a0e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003a12:	4422      	add	r2, r4
 8003a14:	3302      	adds	r3, #2
 8003a16:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003a1a:	e7c5      	b.n	80039a8 <_printf_common+0x58>
 8003a1c:	2301      	movs	r3, #1
 8003a1e:	4622      	mov	r2, r4
 8003a20:	4649      	mov	r1, r9
 8003a22:	4638      	mov	r0, r7
 8003a24:	47c0      	blx	r8
 8003a26:	3001      	adds	r0, #1
 8003a28:	d0e6      	beq.n	80039f8 <_printf_common+0xa8>
 8003a2a:	3601      	adds	r6, #1
 8003a2c:	e7d9      	b.n	80039e2 <_printf_common+0x92>
	...

08003a30 <_printf_i>:
 8003a30:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003a34:	460c      	mov	r4, r1
 8003a36:	7e27      	ldrb	r7, [r4, #24]
 8003a38:	4691      	mov	r9, r2
 8003a3a:	2f78      	cmp	r7, #120	; 0x78
 8003a3c:	4680      	mov	r8, r0
 8003a3e:	469a      	mov	sl, r3
 8003a40:	990c      	ldr	r1, [sp, #48]	; 0x30
 8003a42:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003a46:	d807      	bhi.n	8003a58 <_printf_i+0x28>
 8003a48:	2f62      	cmp	r7, #98	; 0x62
 8003a4a:	d80a      	bhi.n	8003a62 <_printf_i+0x32>
 8003a4c:	2f00      	cmp	r7, #0
 8003a4e:	f000 80d9 	beq.w	8003c04 <_printf_i+0x1d4>
 8003a52:	2f58      	cmp	r7, #88	; 0x58
 8003a54:	f000 80a4 	beq.w	8003ba0 <_printf_i+0x170>
 8003a58:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003a5c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003a60:	e03a      	b.n	8003ad8 <_printf_i+0xa8>
 8003a62:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003a66:	2b15      	cmp	r3, #21
 8003a68:	d8f6      	bhi.n	8003a58 <_printf_i+0x28>
 8003a6a:	a001      	add	r0, pc, #4	; (adr r0, 8003a70 <_printf_i+0x40>)
 8003a6c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8003a70:	08003ac9 	.word	0x08003ac9
 8003a74:	08003add 	.word	0x08003add
 8003a78:	08003a59 	.word	0x08003a59
 8003a7c:	08003a59 	.word	0x08003a59
 8003a80:	08003a59 	.word	0x08003a59
 8003a84:	08003a59 	.word	0x08003a59
 8003a88:	08003add 	.word	0x08003add
 8003a8c:	08003a59 	.word	0x08003a59
 8003a90:	08003a59 	.word	0x08003a59
 8003a94:	08003a59 	.word	0x08003a59
 8003a98:	08003a59 	.word	0x08003a59
 8003a9c:	08003beb 	.word	0x08003beb
 8003aa0:	08003b0d 	.word	0x08003b0d
 8003aa4:	08003bcd 	.word	0x08003bcd
 8003aa8:	08003a59 	.word	0x08003a59
 8003aac:	08003a59 	.word	0x08003a59
 8003ab0:	08003c0d 	.word	0x08003c0d
 8003ab4:	08003a59 	.word	0x08003a59
 8003ab8:	08003b0d 	.word	0x08003b0d
 8003abc:	08003a59 	.word	0x08003a59
 8003ac0:	08003a59 	.word	0x08003a59
 8003ac4:	08003bd5 	.word	0x08003bd5
 8003ac8:	680b      	ldr	r3, [r1, #0]
 8003aca:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003ace:	1d1a      	adds	r2, r3, #4
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	600a      	str	r2, [r1, #0]
 8003ad4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003ad8:	2301      	movs	r3, #1
 8003ada:	e0a4      	b.n	8003c26 <_printf_i+0x1f6>
 8003adc:	6825      	ldr	r5, [r4, #0]
 8003ade:	6808      	ldr	r0, [r1, #0]
 8003ae0:	062e      	lsls	r6, r5, #24
 8003ae2:	f100 0304 	add.w	r3, r0, #4
 8003ae6:	d50a      	bpl.n	8003afe <_printf_i+0xce>
 8003ae8:	6805      	ldr	r5, [r0, #0]
 8003aea:	600b      	str	r3, [r1, #0]
 8003aec:	2d00      	cmp	r5, #0
 8003aee:	da03      	bge.n	8003af8 <_printf_i+0xc8>
 8003af0:	232d      	movs	r3, #45	; 0x2d
 8003af2:	426d      	negs	r5, r5
 8003af4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003af8:	230a      	movs	r3, #10
 8003afa:	485e      	ldr	r0, [pc, #376]	; (8003c74 <_printf_i+0x244>)
 8003afc:	e019      	b.n	8003b32 <_printf_i+0x102>
 8003afe:	f015 0f40 	tst.w	r5, #64	; 0x40
 8003b02:	6805      	ldr	r5, [r0, #0]
 8003b04:	600b      	str	r3, [r1, #0]
 8003b06:	bf18      	it	ne
 8003b08:	b22d      	sxthne	r5, r5
 8003b0a:	e7ef      	b.n	8003aec <_printf_i+0xbc>
 8003b0c:	680b      	ldr	r3, [r1, #0]
 8003b0e:	6825      	ldr	r5, [r4, #0]
 8003b10:	1d18      	adds	r0, r3, #4
 8003b12:	6008      	str	r0, [r1, #0]
 8003b14:	0628      	lsls	r0, r5, #24
 8003b16:	d501      	bpl.n	8003b1c <_printf_i+0xec>
 8003b18:	681d      	ldr	r5, [r3, #0]
 8003b1a:	e002      	b.n	8003b22 <_printf_i+0xf2>
 8003b1c:	0669      	lsls	r1, r5, #25
 8003b1e:	d5fb      	bpl.n	8003b18 <_printf_i+0xe8>
 8003b20:	881d      	ldrh	r5, [r3, #0]
 8003b22:	2f6f      	cmp	r7, #111	; 0x6f
 8003b24:	bf0c      	ite	eq
 8003b26:	2308      	moveq	r3, #8
 8003b28:	230a      	movne	r3, #10
 8003b2a:	4852      	ldr	r0, [pc, #328]	; (8003c74 <_printf_i+0x244>)
 8003b2c:	2100      	movs	r1, #0
 8003b2e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003b32:	6866      	ldr	r6, [r4, #4]
 8003b34:	2e00      	cmp	r6, #0
 8003b36:	bfa8      	it	ge
 8003b38:	6821      	ldrge	r1, [r4, #0]
 8003b3a:	60a6      	str	r6, [r4, #8]
 8003b3c:	bfa4      	itt	ge
 8003b3e:	f021 0104 	bicge.w	r1, r1, #4
 8003b42:	6021      	strge	r1, [r4, #0]
 8003b44:	b90d      	cbnz	r5, 8003b4a <_printf_i+0x11a>
 8003b46:	2e00      	cmp	r6, #0
 8003b48:	d04d      	beq.n	8003be6 <_printf_i+0x1b6>
 8003b4a:	4616      	mov	r6, r2
 8003b4c:	fbb5 f1f3 	udiv	r1, r5, r3
 8003b50:	fb03 5711 	mls	r7, r3, r1, r5
 8003b54:	5dc7      	ldrb	r7, [r0, r7]
 8003b56:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003b5a:	462f      	mov	r7, r5
 8003b5c:	42bb      	cmp	r3, r7
 8003b5e:	460d      	mov	r5, r1
 8003b60:	d9f4      	bls.n	8003b4c <_printf_i+0x11c>
 8003b62:	2b08      	cmp	r3, #8
 8003b64:	d10b      	bne.n	8003b7e <_printf_i+0x14e>
 8003b66:	6823      	ldr	r3, [r4, #0]
 8003b68:	07df      	lsls	r7, r3, #31
 8003b6a:	d508      	bpl.n	8003b7e <_printf_i+0x14e>
 8003b6c:	6923      	ldr	r3, [r4, #16]
 8003b6e:	6861      	ldr	r1, [r4, #4]
 8003b70:	4299      	cmp	r1, r3
 8003b72:	bfde      	ittt	le
 8003b74:	2330      	movle	r3, #48	; 0x30
 8003b76:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003b7a:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003b7e:	1b92      	subs	r2, r2, r6
 8003b80:	6122      	str	r2, [r4, #16]
 8003b82:	464b      	mov	r3, r9
 8003b84:	4621      	mov	r1, r4
 8003b86:	4640      	mov	r0, r8
 8003b88:	f8cd a000 	str.w	sl, [sp]
 8003b8c:	aa03      	add	r2, sp, #12
 8003b8e:	f7ff fedf 	bl	8003950 <_printf_common>
 8003b92:	3001      	adds	r0, #1
 8003b94:	d14c      	bne.n	8003c30 <_printf_i+0x200>
 8003b96:	f04f 30ff 	mov.w	r0, #4294967295
 8003b9a:	b004      	add	sp, #16
 8003b9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003ba0:	4834      	ldr	r0, [pc, #208]	; (8003c74 <_printf_i+0x244>)
 8003ba2:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8003ba6:	680e      	ldr	r6, [r1, #0]
 8003ba8:	6823      	ldr	r3, [r4, #0]
 8003baa:	f856 5b04 	ldr.w	r5, [r6], #4
 8003bae:	061f      	lsls	r7, r3, #24
 8003bb0:	600e      	str	r6, [r1, #0]
 8003bb2:	d514      	bpl.n	8003bde <_printf_i+0x1ae>
 8003bb4:	07d9      	lsls	r1, r3, #31
 8003bb6:	bf44      	itt	mi
 8003bb8:	f043 0320 	orrmi.w	r3, r3, #32
 8003bbc:	6023      	strmi	r3, [r4, #0]
 8003bbe:	b91d      	cbnz	r5, 8003bc8 <_printf_i+0x198>
 8003bc0:	6823      	ldr	r3, [r4, #0]
 8003bc2:	f023 0320 	bic.w	r3, r3, #32
 8003bc6:	6023      	str	r3, [r4, #0]
 8003bc8:	2310      	movs	r3, #16
 8003bca:	e7af      	b.n	8003b2c <_printf_i+0xfc>
 8003bcc:	6823      	ldr	r3, [r4, #0]
 8003bce:	f043 0320 	orr.w	r3, r3, #32
 8003bd2:	6023      	str	r3, [r4, #0]
 8003bd4:	2378      	movs	r3, #120	; 0x78
 8003bd6:	4828      	ldr	r0, [pc, #160]	; (8003c78 <_printf_i+0x248>)
 8003bd8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003bdc:	e7e3      	b.n	8003ba6 <_printf_i+0x176>
 8003bde:	065e      	lsls	r6, r3, #25
 8003be0:	bf48      	it	mi
 8003be2:	b2ad      	uxthmi	r5, r5
 8003be4:	e7e6      	b.n	8003bb4 <_printf_i+0x184>
 8003be6:	4616      	mov	r6, r2
 8003be8:	e7bb      	b.n	8003b62 <_printf_i+0x132>
 8003bea:	680b      	ldr	r3, [r1, #0]
 8003bec:	6826      	ldr	r6, [r4, #0]
 8003bee:	1d1d      	adds	r5, r3, #4
 8003bf0:	6960      	ldr	r0, [r4, #20]
 8003bf2:	600d      	str	r5, [r1, #0]
 8003bf4:	0635      	lsls	r5, r6, #24
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	d501      	bpl.n	8003bfe <_printf_i+0x1ce>
 8003bfa:	6018      	str	r0, [r3, #0]
 8003bfc:	e002      	b.n	8003c04 <_printf_i+0x1d4>
 8003bfe:	0671      	lsls	r1, r6, #25
 8003c00:	d5fb      	bpl.n	8003bfa <_printf_i+0x1ca>
 8003c02:	8018      	strh	r0, [r3, #0]
 8003c04:	2300      	movs	r3, #0
 8003c06:	4616      	mov	r6, r2
 8003c08:	6123      	str	r3, [r4, #16]
 8003c0a:	e7ba      	b.n	8003b82 <_printf_i+0x152>
 8003c0c:	680b      	ldr	r3, [r1, #0]
 8003c0e:	1d1a      	adds	r2, r3, #4
 8003c10:	600a      	str	r2, [r1, #0]
 8003c12:	681e      	ldr	r6, [r3, #0]
 8003c14:	2100      	movs	r1, #0
 8003c16:	4630      	mov	r0, r6
 8003c18:	6862      	ldr	r2, [r4, #4]
 8003c1a:	f000 fa9d 	bl	8004158 <memchr>
 8003c1e:	b108      	cbz	r0, 8003c24 <_printf_i+0x1f4>
 8003c20:	1b80      	subs	r0, r0, r6
 8003c22:	6060      	str	r0, [r4, #4]
 8003c24:	6863      	ldr	r3, [r4, #4]
 8003c26:	6123      	str	r3, [r4, #16]
 8003c28:	2300      	movs	r3, #0
 8003c2a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003c2e:	e7a8      	b.n	8003b82 <_printf_i+0x152>
 8003c30:	4632      	mov	r2, r6
 8003c32:	4649      	mov	r1, r9
 8003c34:	4640      	mov	r0, r8
 8003c36:	6923      	ldr	r3, [r4, #16]
 8003c38:	47d0      	blx	sl
 8003c3a:	3001      	adds	r0, #1
 8003c3c:	d0ab      	beq.n	8003b96 <_printf_i+0x166>
 8003c3e:	6823      	ldr	r3, [r4, #0]
 8003c40:	079b      	lsls	r3, r3, #30
 8003c42:	d413      	bmi.n	8003c6c <_printf_i+0x23c>
 8003c44:	68e0      	ldr	r0, [r4, #12]
 8003c46:	9b03      	ldr	r3, [sp, #12]
 8003c48:	4298      	cmp	r0, r3
 8003c4a:	bfb8      	it	lt
 8003c4c:	4618      	movlt	r0, r3
 8003c4e:	e7a4      	b.n	8003b9a <_printf_i+0x16a>
 8003c50:	2301      	movs	r3, #1
 8003c52:	4632      	mov	r2, r6
 8003c54:	4649      	mov	r1, r9
 8003c56:	4640      	mov	r0, r8
 8003c58:	47d0      	blx	sl
 8003c5a:	3001      	adds	r0, #1
 8003c5c:	d09b      	beq.n	8003b96 <_printf_i+0x166>
 8003c5e:	3501      	adds	r5, #1
 8003c60:	68e3      	ldr	r3, [r4, #12]
 8003c62:	9903      	ldr	r1, [sp, #12]
 8003c64:	1a5b      	subs	r3, r3, r1
 8003c66:	42ab      	cmp	r3, r5
 8003c68:	dcf2      	bgt.n	8003c50 <_printf_i+0x220>
 8003c6a:	e7eb      	b.n	8003c44 <_printf_i+0x214>
 8003c6c:	2500      	movs	r5, #0
 8003c6e:	f104 0619 	add.w	r6, r4, #25
 8003c72:	e7f5      	b.n	8003c60 <_printf_i+0x230>
 8003c74:	0800439d 	.word	0x0800439d
 8003c78:	080043ae 	.word	0x080043ae

08003c7c <_sbrk_r>:
 8003c7c:	b538      	push	{r3, r4, r5, lr}
 8003c7e:	2300      	movs	r3, #0
 8003c80:	4d05      	ldr	r5, [pc, #20]	; (8003c98 <_sbrk_r+0x1c>)
 8003c82:	4604      	mov	r4, r0
 8003c84:	4608      	mov	r0, r1
 8003c86:	602b      	str	r3, [r5, #0]
 8003c88:	f7fd fb98 	bl	80013bc <_sbrk>
 8003c8c:	1c43      	adds	r3, r0, #1
 8003c8e:	d102      	bne.n	8003c96 <_sbrk_r+0x1a>
 8003c90:	682b      	ldr	r3, [r5, #0]
 8003c92:	b103      	cbz	r3, 8003c96 <_sbrk_r+0x1a>
 8003c94:	6023      	str	r3, [r4, #0]
 8003c96:	bd38      	pop	{r3, r4, r5, pc}
 8003c98:	200002b8 	.word	0x200002b8

08003c9c <__sread>:
 8003c9c:	b510      	push	{r4, lr}
 8003c9e:	460c      	mov	r4, r1
 8003ca0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003ca4:	f000 fabe 	bl	8004224 <_read_r>
 8003ca8:	2800      	cmp	r0, #0
 8003caa:	bfab      	itete	ge
 8003cac:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003cae:	89a3      	ldrhlt	r3, [r4, #12]
 8003cb0:	181b      	addge	r3, r3, r0
 8003cb2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003cb6:	bfac      	ite	ge
 8003cb8:	6563      	strge	r3, [r4, #84]	; 0x54
 8003cba:	81a3      	strhlt	r3, [r4, #12]
 8003cbc:	bd10      	pop	{r4, pc}

08003cbe <__swrite>:
 8003cbe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003cc2:	461f      	mov	r7, r3
 8003cc4:	898b      	ldrh	r3, [r1, #12]
 8003cc6:	4605      	mov	r5, r0
 8003cc8:	05db      	lsls	r3, r3, #23
 8003cca:	460c      	mov	r4, r1
 8003ccc:	4616      	mov	r6, r2
 8003cce:	d505      	bpl.n	8003cdc <__swrite+0x1e>
 8003cd0:	2302      	movs	r3, #2
 8003cd2:	2200      	movs	r2, #0
 8003cd4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003cd8:	f000 f9c8 	bl	800406c <_lseek_r>
 8003cdc:	89a3      	ldrh	r3, [r4, #12]
 8003cde:	4632      	mov	r2, r6
 8003ce0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003ce4:	81a3      	strh	r3, [r4, #12]
 8003ce6:	4628      	mov	r0, r5
 8003ce8:	463b      	mov	r3, r7
 8003cea:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003cee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003cf2:	f000 b869 	b.w	8003dc8 <_write_r>

08003cf6 <__sseek>:
 8003cf6:	b510      	push	{r4, lr}
 8003cf8:	460c      	mov	r4, r1
 8003cfa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003cfe:	f000 f9b5 	bl	800406c <_lseek_r>
 8003d02:	1c43      	adds	r3, r0, #1
 8003d04:	89a3      	ldrh	r3, [r4, #12]
 8003d06:	bf15      	itete	ne
 8003d08:	6560      	strne	r0, [r4, #84]	; 0x54
 8003d0a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003d0e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003d12:	81a3      	strheq	r3, [r4, #12]
 8003d14:	bf18      	it	ne
 8003d16:	81a3      	strhne	r3, [r4, #12]
 8003d18:	bd10      	pop	{r4, pc}

08003d1a <__sclose>:
 8003d1a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003d1e:	f000 b8d3 	b.w	8003ec8 <_close_r>
	...

08003d24 <__swbuf_r>:
 8003d24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d26:	460e      	mov	r6, r1
 8003d28:	4614      	mov	r4, r2
 8003d2a:	4605      	mov	r5, r0
 8003d2c:	b118      	cbz	r0, 8003d36 <__swbuf_r+0x12>
 8003d2e:	6983      	ldr	r3, [r0, #24]
 8003d30:	b90b      	cbnz	r3, 8003d36 <__swbuf_r+0x12>
 8003d32:	f7ff fbbb 	bl	80034ac <__sinit>
 8003d36:	4b21      	ldr	r3, [pc, #132]	; (8003dbc <__swbuf_r+0x98>)
 8003d38:	429c      	cmp	r4, r3
 8003d3a:	d12b      	bne.n	8003d94 <__swbuf_r+0x70>
 8003d3c:	686c      	ldr	r4, [r5, #4]
 8003d3e:	69a3      	ldr	r3, [r4, #24]
 8003d40:	60a3      	str	r3, [r4, #8]
 8003d42:	89a3      	ldrh	r3, [r4, #12]
 8003d44:	071a      	lsls	r2, r3, #28
 8003d46:	d52f      	bpl.n	8003da8 <__swbuf_r+0x84>
 8003d48:	6923      	ldr	r3, [r4, #16]
 8003d4a:	b36b      	cbz	r3, 8003da8 <__swbuf_r+0x84>
 8003d4c:	6923      	ldr	r3, [r4, #16]
 8003d4e:	6820      	ldr	r0, [r4, #0]
 8003d50:	b2f6      	uxtb	r6, r6
 8003d52:	1ac0      	subs	r0, r0, r3
 8003d54:	6963      	ldr	r3, [r4, #20]
 8003d56:	4637      	mov	r7, r6
 8003d58:	4283      	cmp	r3, r0
 8003d5a:	dc04      	bgt.n	8003d66 <__swbuf_r+0x42>
 8003d5c:	4621      	mov	r1, r4
 8003d5e:	4628      	mov	r0, r5
 8003d60:	f000 f948 	bl	8003ff4 <_fflush_r>
 8003d64:	bb30      	cbnz	r0, 8003db4 <__swbuf_r+0x90>
 8003d66:	68a3      	ldr	r3, [r4, #8]
 8003d68:	3001      	adds	r0, #1
 8003d6a:	3b01      	subs	r3, #1
 8003d6c:	60a3      	str	r3, [r4, #8]
 8003d6e:	6823      	ldr	r3, [r4, #0]
 8003d70:	1c5a      	adds	r2, r3, #1
 8003d72:	6022      	str	r2, [r4, #0]
 8003d74:	701e      	strb	r6, [r3, #0]
 8003d76:	6963      	ldr	r3, [r4, #20]
 8003d78:	4283      	cmp	r3, r0
 8003d7a:	d004      	beq.n	8003d86 <__swbuf_r+0x62>
 8003d7c:	89a3      	ldrh	r3, [r4, #12]
 8003d7e:	07db      	lsls	r3, r3, #31
 8003d80:	d506      	bpl.n	8003d90 <__swbuf_r+0x6c>
 8003d82:	2e0a      	cmp	r6, #10
 8003d84:	d104      	bne.n	8003d90 <__swbuf_r+0x6c>
 8003d86:	4621      	mov	r1, r4
 8003d88:	4628      	mov	r0, r5
 8003d8a:	f000 f933 	bl	8003ff4 <_fflush_r>
 8003d8e:	b988      	cbnz	r0, 8003db4 <__swbuf_r+0x90>
 8003d90:	4638      	mov	r0, r7
 8003d92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003d94:	4b0a      	ldr	r3, [pc, #40]	; (8003dc0 <__swbuf_r+0x9c>)
 8003d96:	429c      	cmp	r4, r3
 8003d98:	d101      	bne.n	8003d9e <__swbuf_r+0x7a>
 8003d9a:	68ac      	ldr	r4, [r5, #8]
 8003d9c:	e7cf      	b.n	8003d3e <__swbuf_r+0x1a>
 8003d9e:	4b09      	ldr	r3, [pc, #36]	; (8003dc4 <__swbuf_r+0xa0>)
 8003da0:	429c      	cmp	r4, r3
 8003da2:	bf08      	it	eq
 8003da4:	68ec      	ldreq	r4, [r5, #12]
 8003da6:	e7ca      	b.n	8003d3e <__swbuf_r+0x1a>
 8003da8:	4621      	mov	r1, r4
 8003daa:	4628      	mov	r0, r5
 8003dac:	f000 f81e 	bl	8003dec <__swsetup_r>
 8003db0:	2800      	cmp	r0, #0
 8003db2:	d0cb      	beq.n	8003d4c <__swbuf_r+0x28>
 8003db4:	f04f 37ff 	mov.w	r7, #4294967295
 8003db8:	e7ea      	b.n	8003d90 <__swbuf_r+0x6c>
 8003dba:	bf00      	nop
 8003dbc:	0800434c 	.word	0x0800434c
 8003dc0:	0800436c 	.word	0x0800436c
 8003dc4:	0800432c 	.word	0x0800432c

08003dc8 <_write_r>:
 8003dc8:	b538      	push	{r3, r4, r5, lr}
 8003dca:	4604      	mov	r4, r0
 8003dcc:	4608      	mov	r0, r1
 8003dce:	4611      	mov	r1, r2
 8003dd0:	2200      	movs	r2, #0
 8003dd2:	4d05      	ldr	r5, [pc, #20]	; (8003de8 <_write_r+0x20>)
 8003dd4:	602a      	str	r2, [r5, #0]
 8003dd6:	461a      	mov	r2, r3
 8003dd8:	f7fd faa3 	bl	8001322 <_write>
 8003ddc:	1c43      	adds	r3, r0, #1
 8003dde:	d102      	bne.n	8003de6 <_write_r+0x1e>
 8003de0:	682b      	ldr	r3, [r5, #0]
 8003de2:	b103      	cbz	r3, 8003de6 <_write_r+0x1e>
 8003de4:	6023      	str	r3, [r4, #0]
 8003de6:	bd38      	pop	{r3, r4, r5, pc}
 8003de8:	200002b8 	.word	0x200002b8

08003dec <__swsetup_r>:
 8003dec:	4b32      	ldr	r3, [pc, #200]	; (8003eb8 <__swsetup_r+0xcc>)
 8003dee:	b570      	push	{r4, r5, r6, lr}
 8003df0:	681d      	ldr	r5, [r3, #0]
 8003df2:	4606      	mov	r6, r0
 8003df4:	460c      	mov	r4, r1
 8003df6:	b125      	cbz	r5, 8003e02 <__swsetup_r+0x16>
 8003df8:	69ab      	ldr	r3, [r5, #24]
 8003dfa:	b913      	cbnz	r3, 8003e02 <__swsetup_r+0x16>
 8003dfc:	4628      	mov	r0, r5
 8003dfe:	f7ff fb55 	bl	80034ac <__sinit>
 8003e02:	4b2e      	ldr	r3, [pc, #184]	; (8003ebc <__swsetup_r+0xd0>)
 8003e04:	429c      	cmp	r4, r3
 8003e06:	d10f      	bne.n	8003e28 <__swsetup_r+0x3c>
 8003e08:	686c      	ldr	r4, [r5, #4]
 8003e0a:	89a3      	ldrh	r3, [r4, #12]
 8003e0c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003e10:	0719      	lsls	r1, r3, #28
 8003e12:	d42c      	bmi.n	8003e6e <__swsetup_r+0x82>
 8003e14:	06dd      	lsls	r5, r3, #27
 8003e16:	d411      	bmi.n	8003e3c <__swsetup_r+0x50>
 8003e18:	2309      	movs	r3, #9
 8003e1a:	6033      	str	r3, [r6, #0]
 8003e1c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8003e20:	f04f 30ff 	mov.w	r0, #4294967295
 8003e24:	81a3      	strh	r3, [r4, #12]
 8003e26:	e03e      	b.n	8003ea6 <__swsetup_r+0xba>
 8003e28:	4b25      	ldr	r3, [pc, #148]	; (8003ec0 <__swsetup_r+0xd4>)
 8003e2a:	429c      	cmp	r4, r3
 8003e2c:	d101      	bne.n	8003e32 <__swsetup_r+0x46>
 8003e2e:	68ac      	ldr	r4, [r5, #8]
 8003e30:	e7eb      	b.n	8003e0a <__swsetup_r+0x1e>
 8003e32:	4b24      	ldr	r3, [pc, #144]	; (8003ec4 <__swsetup_r+0xd8>)
 8003e34:	429c      	cmp	r4, r3
 8003e36:	bf08      	it	eq
 8003e38:	68ec      	ldreq	r4, [r5, #12]
 8003e3a:	e7e6      	b.n	8003e0a <__swsetup_r+0x1e>
 8003e3c:	0758      	lsls	r0, r3, #29
 8003e3e:	d512      	bpl.n	8003e66 <__swsetup_r+0x7a>
 8003e40:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003e42:	b141      	cbz	r1, 8003e56 <__swsetup_r+0x6a>
 8003e44:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003e48:	4299      	cmp	r1, r3
 8003e4a:	d002      	beq.n	8003e52 <__swsetup_r+0x66>
 8003e4c:	4630      	mov	r0, r6
 8003e4e:	f000 f99d 	bl	800418c <_free_r>
 8003e52:	2300      	movs	r3, #0
 8003e54:	6363      	str	r3, [r4, #52]	; 0x34
 8003e56:	89a3      	ldrh	r3, [r4, #12]
 8003e58:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003e5c:	81a3      	strh	r3, [r4, #12]
 8003e5e:	2300      	movs	r3, #0
 8003e60:	6063      	str	r3, [r4, #4]
 8003e62:	6923      	ldr	r3, [r4, #16]
 8003e64:	6023      	str	r3, [r4, #0]
 8003e66:	89a3      	ldrh	r3, [r4, #12]
 8003e68:	f043 0308 	orr.w	r3, r3, #8
 8003e6c:	81a3      	strh	r3, [r4, #12]
 8003e6e:	6923      	ldr	r3, [r4, #16]
 8003e70:	b94b      	cbnz	r3, 8003e86 <__swsetup_r+0x9a>
 8003e72:	89a3      	ldrh	r3, [r4, #12]
 8003e74:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003e78:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003e7c:	d003      	beq.n	8003e86 <__swsetup_r+0x9a>
 8003e7e:	4621      	mov	r1, r4
 8003e80:	4630      	mov	r0, r6
 8003e82:	f000 f929 	bl	80040d8 <__smakebuf_r>
 8003e86:	89a0      	ldrh	r0, [r4, #12]
 8003e88:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003e8c:	f010 0301 	ands.w	r3, r0, #1
 8003e90:	d00a      	beq.n	8003ea8 <__swsetup_r+0xbc>
 8003e92:	2300      	movs	r3, #0
 8003e94:	60a3      	str	r3, [r4, #8]
 8003e96:	6963      	ldr	r3, [r4, #20]
 8003e98:	425b      	negs	r3, r3
 8003e9a:	61a3      	str	r3, [r4, #24]
 8003e9c:	6923      	ldr	r3, [r4, #16]
 8003e9e:	b943      	cbnz	r3, 8003eb2 <__swsetup_r+0xc6>
 8003ea0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8003ea4:	d1ba      	bne.n	8003e1c <__swsetup_r+0x30>
 8003ea6:	bd70      	pop	{r4, r5, r6, pc}
 8003ea8:	0781      	lsls	r1, r0, #30
 8003eaa:	bf58      	it	pl
 8003eac:	6963      	ldrpl	r3, [r4, #20]
 8003eae:	60a3      	str	r3, [r4, #8]
 8003eb0:	e7f4      	b.n	8003e9c <__swsetup_r+0xb0>
 8003eb2:	2000      	movs	r0, #0
 8003eb4:	e7f7      	b.n	8003ea6 <__swsetup_r+0xba>
 8003eb6:	bf00      	nop
 8003eb8:	20000080 	.word	0x20000080
 8003ebc:	0800434c 	.word	0x0800434c
 8003ec0:	0800436c 	.word	0x0800436c
 8003ec4:	0800432c 	.word	0x0800432c

08003ec8 <_close_r>:
 8003ec8:	b538      	push	{r3, r4, r5, lr}
 8003eca:	2300      	movs	r3, #0
 8003ecc:	4d05      	ldr	r5, [pc, #20]	; (8003ee4 <_close_r+0x1c>)
 8003ece:	4604      	mov	r4, r0
 8003ed0:	4608      	mov	r0, r1
 8003ed2:	602b      	str	r3, [r5, #0]
 8003ed4:	f7fd fa41 	bl	800135a <_close>
 8003ed8:	1c43      	adds	r3, r0, #1
 8003eda:	d102      	bne.n	8003ee2 <_close_r+0x1a>
 8003edc:	682b      	ldr	r3, [r5, #0]
 8003ede:	b103      	cbz	r3, 8003ee2 <_close_r+0x1a>
 8003ee0:	6023      	str	r3, [r4, #0]
 8003ee2:	bd38      	pop	{r3, r4, r5, pc}
 8003ee4:	200002b8 	.word	0x200002b8

08003ee8 <__sflush_r>:
 8003ee8:	898a      	ldrh	r2, [r1, #12]
 8003eea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003eee:	4605      	mov	r5, r0
 8003ef0:	0710      	lsls	r0, r2, #28
 8003ef2:	460c      	mov	r4, r1
 8003ef4:	d458      	bmi.n	8003fa8 <__sflush_r+0xc0>
 8003ef6:	684b      	ldr	r3, [r1, #4]
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	dc05      	bgt.n	8003f08 <__sflush_r+0x20>
 8003efc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	dc02      	bgt.n	8003f08 <__sflush_r+0x20>
 8003f02:	2000      	movs	r0, #0
 8003f04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003f08:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003f0a:	2e00      	cmp	r6, #0
 8003f0c:	d0f9      	beq.n	8003f02 <__sflush_r+0x1a>
 8003f0e:	2300      	movs	r3, #0
 8003f10:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003f14:	682f      	ldr	r7, [r5, #0]
 8003f16:	602b      	str	r3, [r5, #0]
 8003f18:	d032      	beq.n	8003f80 <__sflush_r+0x98>
 8003f1a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003f1c:	89a3      	ldrh	r3, [r4, #12]
 8003f1e:	075a      	lsls	r2, r3, #29
 8003f20:	d505      	bpl.n	8003f2e <__sflush_r+0x46>
 8003f22:	6863      	ldr	r3, [r4, #4]
 8003f24:	1ac0      	subs	r0, r0, r3
 8003f26:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003f28:	b10b      	cbz	r3, 8003f2e <__sflush_r+0x46>
 8003f2a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003f2c:	1ac0      	subs	r0, r0, r3
 8003f2e:	2300      	movs	r3, #0
 8003f30:	4602      	mov	r2, r0
 8003f32:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003f34:	4628      	mov	r0, r5
 8003f36:	6a21      	ldr	r1, [r4, #32]
 8003f38:	47b0      	blx	r6
 8003f3a:	1c43      	adds	r3, r0, #1
 8003f3c:	89a3      	ldrh	r3, [r4, #12]
 8003f3e:	d106      	bne.n	8003f4e <__sflush_r+0x66>
 8003f40:	6829      	ldr	r1, [r5, #0]
 8003f42:	291d      	cmp	r1, #29
 8003f44:	d82c      	bhi.n	8003fa0 <__sflush_r+0xb8>
 8003f46:	4a2a      	ldr	r2, [pc, #168]	; (8003ff0 <__sflush_r+0x108>)
 8003f48:	40ca      	lsrs	r2, r1
 8003f4a:	07d6      	lsls	r6, r2, #31
 8003f4c:	d528      	bpl.n	8003fa0 <__sflush_r+0xb8>
 8003f4e:	2200      	movs	r2, #0
 8003f50:	6062      	str	r2, [r4, #4]
 8003f52:	6922      	ldr	r2, [r4, #16]
 8003f54:	04d9      	lsls	r1, r3, #19
 8003f56:	6022      	str	r2, [r4, #0]
 8003f58:	d504      	bpl.n	8003f64 <__sflush_r+0x7c>
 8003f5a:	1c42      	adds	r2, r0, #1
 8003f5c:	d101      	bne.n	8003f62 <__sflush_r+0x7a>
 8003f5e:	682b      	ldr	r3, [r5, #0]
 8003f60:	b903      	cbnz	r3, 8003f64 <__sflush_r+0x7c>
 8003f62:	6560      	str	r0, [r4, #84]	; 0x54
 8003f64:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003f66:	602f      	str	r7, [r5, #0]
 8003f68:	2900      	cmp	r1, #0
 8003f6a:	d0ca      	beq.n	8003f02 <__sflush_r+0x1a>
 8003f6c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003f70:	4299      	cmp	r1, r3
 8003f72:	d002      	beq.n	8003f7a <__sflush_r+0x92>
 8003f74:	4628      	mov	r0, r5
 8003f76:	f000 f909 	bl	800418c <_free_r>
 8003f7a:	2000      	movs	r0, #0
 8003f7c:	6360      	str	r0, [r4, #52]	; 0x34
 8003f7e:	e7c1      	b.n	8003f04 <__sflush_r+0x1c>
 8003f80:	6a21      	ldr	r1, [r4, #32]
 8003f82:	2301      	movs	r3, #1
 8003f84:	4628      	mov	r0, r5
 8003f86:	47b0      	blx	r6
 8003f88:	1c41      	adds	r1, r0, #1
 8003f8a:	d1c7      	bne.n	8003f1c <__sflush_r+0x34>
 8003f8c:	682b      	ldr	r3, [r5, #0]
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d0c4      	beq.n	8003f1c <__sflush_r+0x34>
 8003f92:	2b1d      	cmp	r3, #29
 8003f94:	d001      	beq.n	8003f9a <__sflush_r+0xb2>
 8003f96:	2b16      	cmp	r3, #22
 8003f98:	d101      	bne.n	8003f9e <__sflush_r+0xb6>
 8003f9a:	602f      	str	r7, [r5, #0]
 8003f9c:	e7b1      	b.n	8003f02 <__sflush_r+0x1a>
 8003f9e:	89a3      	ldrh	r3, [r4, #12]
 8003fa0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003fa4:	81a3      	strh	r3, [r4, #12]
 8003fa6:	e7ad      	b.n	8003f04 <__sflush_r+0x1c>
 8003fa8:	690f      	ldr	r7, [r1, #16]
 8003faa:	2f00      	cmp	r7, #0
 8003fac:	d0a9      	beq.n	8003f02 <__sflush_r+0x1a>
 8003fae:	0793      	lsls	r3, r2, #30
 8003fb0:	bf18      	it	ne
 8003fb2:	2300      	movne	r3, #0
 8003fb4:	680e      	ldr	r6, [r1, #0]
 8003fb6:	bf08      	it	eq
 8003fb8:	694b      	ldreq	r3, [r1, #20]
 8003fba:	eba6 0807 	sub.w	r8, r6, r7
 8003fbe:	600f      	str	r7, [r1, #0]
 8003fc0:	608b      	str	r3, [r1, #8]
 8003fc2:	f1b8 0f00 	cmp.w	r8, #0
 8003fc6:	dd9c      	ble.n	8003f02 <__sflush_r+0x1a>
 8003fc8:	4643      	mov	r3, r8
 8003fca:	463a      	mov	r2, r7
 8003fcc:	4628      	mov	r0, r5
 8003fce:	6a21      	ldr	r1, [r4, #32]
 8003fd0:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8003fd2:	47b0      	blx	r6
 8003fd4:	2800      	cmp	r0, #0
 8003fd6:	dc06      	bgt.n	8003fe6 <__sflush_r+0xfe>
 8003fd8:	89a3      	ldrh	r3, [r4, #12]
 8003fda:	f04f 30ff 	mov.w	r0, #4294967295
 8003fde:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003fe2:	81a3      	strh	r3, [r4, #12]
 8003fe4:	e78e      	b.n	8003f04 <__sflush_r+0x1c>
 8003fe6:	4407      	add	r7, r0
 8003fe8:	eba8 0800 	sub.w	r8, r8, r0
 8003fec:	e7e9      	b.n	8003fc2 <__sflush_r+0xda>
 8003fee:	bf00      	nop
 8003ff0:	20400001 	.word	0x20400001

08003ff4 <_fflush_r>:
 8003ff4:	b538      	push	{r3, r4, r5, lr}
 8003ff6:	690b      	ldr	r3, [r1, #16]
 8003ff8:	4605      	mov	r5, r0
 8003ffa:	460c      	mov	r4, r1
 8003ffc:	b913      	cbnz	r3, 8004004 <_fflush_r+0x10>
 8003ffe:	2500      	movs	r5, #0
 8004000:	4628      	mov	r0, r5
 8004002:	bd38      	pop	{r3, r4, r5, pc}
 8004004:	b118      	cbz	r0, 800400e <_fflush_r+0x1a>
 8004006:	6983      	ldr	r3, [r0, #24]
 8004008:	b90b      	cbnz	r3, 800400e <_fflush_r+0x1a>
 800400a:	f7ff fa4f 	bl	80034ac <__sinit>
 800400e:	4b14      	ldr	r3, [pc, #80]	; (8004060 <_fflush_r+0x6c>)
 8004010:	429c      	cmp	r4, r3
 8004012:	d11b      	bne.n	800404c <_fflush_r+0x58>
 8004014:	686c      	ldr	r4, [r5, #4]
 8004016:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800401a:	2b00      	cmp	r3, #0
 800401c:	d0ef      	beq.n	8003ffe <_fflush_r+0xa>
 800401e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004020:	07d0      	lsls	r0, r2, #31
 8004022:	d404      	bmi.n	800402e <_fflush_r+0x3a>
 8004024:	0599      	lsls	r1, r3, #22
 8004026:	d402      	bmi.n	800402e <_fflush_r+0x3a>
 8004028:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800402a:	f7ff fadd 	bl	80035e8 <__retarget_lock_acquire_recursive>
 800402e:	4628      	mov	r0, r5
 8004030:	4621      	mov	r1, r4
 8004032:	f7ff ff59 	bl	8003ee8 <__sflush_r>
 8004036:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004038:	4605      	mov	r5, r0
 800403a:	07da      	lsls	r2, r3, #31
 800403c:	d4e0      	bmi.n	8004000 <_fflush_r+0xc>
 800403e:	89a3      	ldrh	r3, [r4, #12]
 8004040:	059b      	lsls	r3, r3, #22
 8004042:	d4dd      	bmi.n	8004000 <_fflush_r+0xc>
 8004044:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004046:	f7ff fad0 	bl	80035ea <__retarget_lock_release_recursive>
 800404a:	e7d9      	b.n	8004000 <_fflush_r+0xc>
 800404c:	4b05      	ldr	r3, [pc, #20]	; (8004064 <_fflush_r+0x70>)
 800404e:	429c      	cmp	r4, r3
 8004050:	d101      	bne.n	8004056 <_fflush_r+0x62>
 8004052:	68ac      	ldr	r4, [r5, #8]
 8004054:	e7df      	b.n	8004016 <_fflush_r+0x22>
 8004056:	4b04      	ldr	r3, [pc, #16]	; (8004068 <_fflush_r+0x74>)
 8004058:	429c      	cmp	r4, r3
 800405a:	bf08      	it	eq
 800405c:	68ec      	ldreq	r4, [r5, #12]
 800405e:	e7da      	b.n	8004016 <_fflush_r+0x22>
 8004060:	0800434c 	.word	0x0800434c
 8004064:	0800436c 	.word	0x0800436c
 8004068:	0800432c 	.word	0x0800432c

0800406c <_lseek_r>:
 800406c:	b538      	push	{r3, r4, r5, lr}
 800406e:	4604      	mov	r4, r0
 8004070:	4608      	mov	r0, r1
 8004072:	4611      	mov	r1, r2
 8004074:	2200      	movs	r2, #0
 8004076:	4d05      	ldr	r5, [pc, #20]	; (800408c <_lseek_r+0x20>)
 8004078:	602a      	str	r2, [r5, #0]
 800407a:	461a      	mov	r2, r3
 800407c:	f7fd f991 	bl	80013a2 <_lseek>
 8004080:	1c43      	adds	r3, r0, #1
 8004082:	d102      	bne.n	800408a <_lseek_r+0x1e>
 8004084:	682b      	ldr	r3, [r5, #0]
 8004086:	b103      	cbz	r3, 800408a <_lseek_r+0x1e>
 8004088:	6023      	str	r3, [r4, #0]
 800408a:	bd38      	pop	{r3, r4, r5, pc}
 800408c:	200002b8 	.word	0x200002b8

08004090 <__swhatbuf_r>:
 8004090:	b570      	push	{r4, r5, r6, lr}
 8004092:	460e      	mov	r6, r1
 8004094:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004098:	4614      	mov	r4, r2
 800409a:	2900      	cmp	r1, #0
 800409c:	461d      	mov	r5, r3
 800409e:	b096      	sub	sp, #88	; 0x58
 80040a0:	da07      	bge.n	80040b2 <__swhatbuf_r+0x22>
 80040a2:	2300      	movs	r3, #0
 80040a4:	602b      	str	r3, [r5, #0]
 80040a6:	89b3      	ldrh	r3, [r6, #12]
 80040a8:	061a      	lsls	r2, r3, #24
 80040aa:	d410      	bmi.n	80040ce <__swhatbuf_r+0x3e>
 80040ac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80040b0:	e00e      	b.n	80040d0 <__swhatbuf_r+0x40>
 80040b2:	466a      	mov	r2, sp
 80040b4:	f000 f8c8 	bl	8004248 <_fstat_r>
 80040b8:	2800      	cmp	r0, #0
 80040ba:	dbf2      	blt.n	80040a2 <__swhatbuf_r+0x12>
 80040bc:	9a01      	ldr	r2, [sp, #4]
 80040be:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80040c2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80040c6:	425a      	negs	r2, r3
 80040c8:	415a      	adcs	r2, r3
 80040ca:	602a      	str	r2, [r5, #0]
 80040cc:	e7ee      	b.n	80040ac <__swhatbuf_r+0x1c>
 80040ce:	2340      	movs	r3, #64	; 0x40
 80040d0:	2000      	movs	r0, #0
 80040d2:	6023      	str	r3, [r4, #0]
 80040d4:	b016      	add	sp, #88	; 0x58
 80040d6:	bd70      	pop	{r4, r5, r6, pc}

080040d8 <__smakebuf_r>:
 80040d8:	898b      	ldrh	r3, [r1, #12]
 80040da:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80040dc:	079d      	lsls	r5, r3, #30
 80040de:	4606      	mov	r6, r0
 80040e0:	460c      	mov	r4, r1
 80040e2:	d507      	bpl.n	80040f4 <__smakebuf_r+0x1c>
 80040e4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80040e8:	6023      	str	r3, [r4, #0]
 80040ea:	6123      	str	r3, [r4, #16]
 80040ec:	2301      	movs	r3, #1
 80040ee:	6163      	str	r3, [r4, #20]
 80040f0:	b002      	add	sp, #8
 80040f2:	bd70      	pop	{r4, r5, r6, pc}
 80040f4:	466a      	mov	r2, sp
 80040f6:	ab01      	add	r3, sp, #4
 80040f8:	f7ff ffca 	bl	8004090 <__swhatbuf_r>
 80040fc:	9900      	ldr	r1, [sp, #0]
 80040fe:	4605      	mov	r5, r0
 8004100:	4630      	mov	r0, r6
 8004102:	f7ff fa73 	bl	80035ec <_malloc_r>
 8004106:	b948      	cbnz	r0, 800411c <__smakebuf_r+0x44>
 8004108:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800410c:	059a      	lsls	r2, r3, #22
 800410e:	d4ef      	bmi.n	80040f0 <__smakebuf_r+0x18>
 8004110:	f023 0303 	bic.w	r3, r3, #3
 8004114:	f043 0302 	orr.w	r3, r3, #2
 8004118:	81a3      	strh	r3, [r4, #12]
 800411a:	e7e3      	b.n	80040e4 <__smakebuf_r+0xc>
 800411c:	4b0d      	ldr	r3, [pc, #52]	; (8004154 <__smakebuf_r+0x7c>)
 800411e:	62b3      	str	r3, [r6, #40]	; 0x28
 8004120:	89a3      	ldrh	r3, [r4, #12]
 8004122:	6020      	str	r0, [r4, #0]
 8004124:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004128:	81a3      	strh	r3, [r4, #12]
 800412a:	9b00      	ldr	r3, [sp, #0]
 800412c:	6120      	str	r0, [r4, #16]
 800412e:	6163      	str	r3, [r4, #20]
 8004130:	9b01      	ldr	r3, [sp, #4]
 8004132:	b15b      	cbz	r3, 800414c <__smakebuf_r+0x74>
 8004134:	4630      	mov	r0, r6
 8004136:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800413a:	f000 f897 	bl	800426c <_isatty_r>
 800413e:	b128      	cbz	r0, 800414c <__smakebuf_r+0x74>
 8004140:	89a3      	ldrh	r3, [r4, #12]
 8004142:	f023 0303 	bic.w	r3, r3, #3
 8004146:	f043 0301 	orr.w	r3, r3, #1
 800414a:	81a3      	strh	r3, [r4, #12]
 800414c:	89a0      	ldrh	r0, [r4, #12]
 800414e:	4305      	orrs	r5, r0
 8004150:	81a5      	strh	r5, [r4, #12]
 8004152:	e7cd      	b.n	80040f0 <__smakebuf_r+0x18>
 8004154:	08003445 	.word	0x08003445

08004158 <memchr>:
 8004158:	4603      	mov	r3, r0
 800415a:	b510      	push	{r4, lr}
 800415c:	b2c9      	uxtb	r1, r1
 800415e:	4402      	add	r2, r0
 8004160:	4293      	cmp	r3, r2
 8004162:	4618      	mov	r0, r3
 8004164:	d101      	bne.n	800416a <memchr+0x12>
 8004166:	2000      	movs	r0, #0
 8004168:	e003      	b.n	8004172 <memchr+0x1a>
 800416a:	7804      	ldrb	r4, [r0, #0]
 800416c:	3301      	adds	r3, #1
 800416e:	428c      	cmp	r4, r1
 8004170:	d1f6      	bne.n	8004160 <memchr+0x8>
 8004172:	bd10      	pop	{r4, pc}

08004174 <__malloc_lock>:
 8004174:	4801      	ldr	r0, [pc, #4]	; (800417c <__malloc_lock+0x8>)
 8004176:	f7ff ba37 	b.w	80035e8 <__retarget_lock_acquire_recursive>
 800417a:	bf00      	nop
 800417c:	200002b0 	.word	0x200002b0

08004180 <__malloc_unlock>:
 8004180:	4801      	ldr	r0, [pc, #4]	; (8004188 <__malloc_unlock+0x8>)
 8004182:	f7ff ba32 	b.w	80035ea <__retarget_lock_release_recursive>
 8004186:	bf00      	nop
 8004188:	200002b0 	.word	0x200002b0

0800418c <_free_r>:
 800418c:	b538      	push	{r3, r4, r5, lr}
 800418e:	4605      	mov	r5, r0
 8004190:	2900      	cmp	r1, #0
 8004192:	d043      	beq.n	800421c <_free_r+0x90>
 8004194:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004198:	1f0c      	subs	r4, r1, #4
 800419a:	2b00      	cmp	r3, #0
 800419c:	bfb8      	it	lt
 800419e:	18e4      	addlt	r4, r4, r3
 80041a0:	f7ff ffe8 	bl	8004174 <__malloc_lock>
 80041a4:	4a1e      	ldr	r2, [pc, #120]	; (8004220 <_free_r+0x94>)
 80041a6:	6813      	ldr	r3, [r2, #0]
 80041a8:	4610      	mov	r0, r2
 80041aa:	b933      	cbnz	r3, 80041ba <_free_r+0x2e>
 80041ac:	6063      	str	r3, [r4, #4]
 80041ae:	6014      	str	r4, [r2, #0]
 80041b0:	4628      	mov	r0, r5
 80041b2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80041b6:	f7ff bfe3 	b.w	8004180 <__malloc_unlock>
 80041ba:	42a3      	cmp	r3, r4
 80041bc:	d90a      	bls.n	80041d4 <_free_r+0x48>
 80041be:	6821      	ldr	r1, [r4, #0]
 80041c0:	1862      	adds	r2, r4, r1
 80041c2:	4293      	cmp	r3, r2
 80041c4:	bf01      	itttt	eq
 80041c6:	681a      	ldreq	r2, [r3, #0]
 80041c8:	685b      	ldreq	r3, [r3, #4]
 80041ca:	1852      	addeq	r2, r2, r1
 80041cc:	6022      	streq	r2, [r4, #0]
 80041ce:	6063      	str	r3, [r4, #4]
 80041d0:	6004      	str	r4, [r0, #0]
 80041d2:	e7ed      	b.n	80041b0 <_free_r+0x24>
 80041d4:	461a      	mov	r2, r3
 80041d6:	685b      	ldr	r3, [r3, #4]
 80041d8:	b10b      	cbz	r3, 80041de <_free_r+0x52>
 80041da:	42a3      	cmp	r3, r4
 80041dc:	d9fa      	bls.n	80041d4 <_free_r+0x48>
 80041de:	6811      	ldr	r1, [r2, #0]
 80041e0:	1850      	adds	r0, r2, r1
 80041e2:	42a0      	cmp	r0, r4
 80041e4:	d10b      	bne.n	80041fe <_free_r+0x72>
 80041e6:	6820      	ldr	r0, [r4, #0]
 80041e8:	4401      	add	r1, r0
 80041ea:	1850      	adds	r0, r2, r1
 80041ec:	4283      	cmp	r3, r0
 80041ee:	6011      	str	r1, [r2, #0]
 80041f0:	d1de      	bne.n	80041b0 <_free_r+0x24>
 80041f2:	6818      	ldr	r0, [r3, #0]
 80041f4:	685b      	ldr	r3, [r3, #4]
 80041f6:	4401      	add	r1, r0
 80041f8:	6011      	str	r1, [r2, #0]
 80041fa:	6053      	str	r3, [r2, #4]
 80041fc:	e7d8      	b.n	80041b0 <_free_r+0x24>
 80041fe:	d902      	bls.n	8004206 <_free_r+0x7a>
 8004200:	230c      	movs	r3, #12
 8004202:	602b      	str	r3, [r5, #0]
 8004204:	e7d4      	b.n	80041b0 <_free_r+0x24>
 8004206:	6820      	ldr	r0, [r4, #0]
 8004208:	1821      	adds	r1, r4, r0
 800420a:	428b      	cmp	r3, r1
 800420c:	bf01      	itttt	eq
 800420e:	6819      	ldreq	r1, [r3, #0]
 8004210:	685b      	ldreq	r3, [r3, #4]
 8004212:	1809      	addeq	r1, r1, r0
 8004214:	6021      	streq	r1, [r4, #0]
 8004216:	6063      	str	r3, [r4, #4]
 8004218:	6054      	str	r4, [r2, #4]
 800421a:	e7c9      	b.n	80041b0 <_free_r+0x24>
 800421c:	bd38      	pop	{r3, r4, r5, pc}
 800421e:	bf00      	nop
 8004220:	20000174 	.word	0x20000174

08004224 <_read_r>:
 8004224:	b538      	push	{r3, r4, r5, lr}
 8004226:	4604      	mov	r4, r0
 8004228:	4608      	mov	r0, r1
 800422a:	4611      	mov	r1, r2
 800422c:	2200      	movs	r2, #0
 800422e:	4d05      	ldr	r5, [pc, #20]	; (8004244 <_read_r+0x20>)
 8004230:	602a      	str	r2, [r5, #0]
 8004232:	461a      	mov	r2, r3
 8004234:	f7fd f858 	bl	80012e8 <_read>
 8004238:	1c43      	adds	r3, r0, #1
 800423a:	d102      	bne.n	8004242 <_read_r+0x1e>
 800423c:	682b      	ldr	r3, [r5, #0]
 800423e:	b103      	cbz	r3, 8004242 <_read_r+0x1e>
 8004240:	6023      	str	r3, [r4, #0]
 8004242:	bd38      	pop	{r3, r4, r5, pc}
 8004244:	200002b8 	.word	0x200002b8

08004248 <_fstat_r>:
 8004248:	b538      	push	{r3, r4, r5, lr}
 800424a:	2300      	movs	r3, #0
 800424c:	4d06      	ldr	r5, [pc, #24]	; (8004268 <_fstat_r+0x20>)
 800424e:	4604      	mov	r4, r0
 8004250:	4608      	mov	r0, r1
 8004252:	4611      	mov	r1, r2
 8004254:	602b      	str	r3, [r5, #0]
 8004256:	f7fd f88b 	bl	8001370 <_fstat>
 800425a:	1c43      	adds	r3, r0, #1
 800425c:	d102      	bne.n	8004264 <_fstat_r+0x1c>
 800425e:	682b      	ldr	r3, [r5, #0]
 8004260:	b103      	cbz	r3, 8004264 <_fstat_r+0x1c>
 8004262:	6023      	str	r3, [r4, #0]
 8004264:	bd38      	pop	{r3, r4, r5, pc}
 8004266:	bf00      	nop
 8004268:	200002b8 	.word	0x200002b8

0800426c <_isatty_r>:
 800426c:	b538      	push	{r3, r4, r5, lr}
 800426e:	2300      	movs	r3, #0
 8004270:	4d05      	ldr	r5, [pc, #20]	; (8004288 <_isatty_r+0x1c>)
 8004272:	4604      	mov	r4, r0
 8004274:	4608      	mov	r0, r1
 8004276:	602b      	str	r3, [r5, #0]
 8004278:	f7fd f889 	bl	800138e <_isatty>
 800427c:	1c43      	adds	r3, r0, #1
 800427e:	d102      	bne.n	8004286 <_isatty_r+0x1a>
 8004280:	682b      	ldr	r3, [r5, #0]
 8004282:	b103      	cbz	r3, 8004286 <_isatty_r+0x1a>
 8004284:	6023      	str	r3, [r4, #0]
 8004286:	bd38      	pop	{r3, r4, r5, pc}
 8004288:	200002b8 	.word	0x200002b8

0800428c <_init>:
 800428c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800428e:	bf00      	nop
 8004290:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004292:	bc08      	pop	{r3}
 8004294:	469e      	mov	lr, r3
 8004296:	4770      	bx	lr

08004298 <_fini>:
 8004298:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800429a:	bf00      	nop
 800429c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800429e:	bc08      	pop	{r3}
 80042a0:	469e      	mov	lr, r3
 80042a2:	4770      	bx	lr
